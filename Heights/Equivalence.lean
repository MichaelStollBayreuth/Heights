import Heights.Auxiliary

/-!
# Two absolute values are equivalent iff they induce the same topology

This is Theorem 1.1 in Conrad's notes. We split the interesting direction (same topology
implies equivalence) into two steps:

* `AbsoluteValue.abv_lt_one_iff_of_isHomeomorph`: if `v‚ÇÅ` and `v‚ÇÇ` induce the same
  topology, then `{x | v‚ÇÅ x < 1} = {x | v‚ÇÇ x < 1}`.

* `AbsoluteValue.isEquiv_of_abv_lt_one_iff`: if `{x | v‚ÇÅ x < 1} = {x | v‚ÇÇ x < 1}`,
  then `v‚ÇÅ ‚âà v‚ÇÇ`.

The main result is `AbsoluteValue.isEquiv_iff_isHomeomorph`.
-/


/-!
### More API for AbsoluteValue.IsEquiv
-/

section isEquiv

namespace AbsoluteValue

variable {R : Type*} [Semiring R]

/-- The exponent `c` in the definition of equivalence of absolute values. -/
noncomputable
def IsEquiv.exponent {v v' : AbsoluteValue R ‚Ñù} (h : v ‚âà v') : ‚Ñù :=
  Classical.choose h

lemma IsEquiv.exponent_pos {v v' : AbsoluteValue R ‚Ñù} (h : v ‚âà v') : 0 < exponent h :=
  (Classical.choose_spec h).1

lemma IsEquiv.exponent_def {v v' : AbsoluteValue R ‚Ñù} (h : v ‚âà v') (x : R) :
    v x ^ exponent h = v' x :=
  congrFun (Classical.choose_spec h).2 x

lemma rpow_add_le (v : AbsoluteValue R ‚Ñù) {e : ‚Ñù} (h‚ÇÄ : 0 < e) (h‚ÇÅ : e ‚â§ 1) (x y : R) :
    v (x + y) ^ e ‚â§ v x ^ e + v y ^ e := by
  calc
  _ ‚â§ (v x + v y) ^ e := Real.rpow_le_rpow (v.nonneg _) (v.add_le x y) h‚ÇÄ.le
  _ ‚â§ v x ^ e + v y ^ e := Real.rpow_add_le_add_rpow (v.nonneg _) (v.nonneg _) h‚ÇÄ.le h‚ÇÅ

lemma rpow_add_le_of_isNonarchimedean {v : AbsoluteValue R ‚Ñù} (hv : IsNonarchimedean v) {e : ‚Ñù}
    (he : 0 < e) (x y : R) :
    v (x + y) ^ e ‚â§ v x ^ e ‚äî v y ^ e := by
  calc
  _ ‚â§ (v x ‚äî v y) ^ e := Real.rpow_le_rpow (v.nonneg _) (hv x y) he.le
  _ = v x ^ e ‚äî v y ^ e := (Real.max_map_rpow (v.nonneg _) (v.nonneg _) he.le).symm

@[simps]
noncomputable
def rpow (v : AbsoluteValue R ‚Ñù) {e : ‚Ñù} (h‚ÇÄ : 0 < e) (h‚ÇÅ : e ‚â§ 1) : AbsoluteValue R ‚Ñù where
  toFun := (v ¬∑) ^ e
  map_mul' x y := by simp only [Pi.pow_apply, v.map_mul, Real.mul_rpow (v.nonneg _) (v.nonneg _)]
  nonneg' x := by simpa only [Pi.pow_apply] using Real.rpow_nonneg (v.nonneg _) _
  eq_zero' x := by simp [Real.rpow_eq_zero_iff_of_nonneg (v.nonneg _), v.eq_zero, h‚ÇÄ.ne']
  add_le' x y := by simpa only [Pi.pow_apply] using rpow_add_le v h‚ÇÄ h‚ÇÅ x y

@[simps]
noncomputable
def rpow_of_isNonarchimedean {v : AbsoluteValue R ‚Ñù} (hv : IsNonarchimedean v) {e : ‚Ñù}
    (he : 0 < e) :
    AbsoluteValue R ‚Ñù where
  toFun := (v ¬∑) ^ e
  map_mul' x y := by simp only [Pi.pow_apply, v.map_mul, Real.mul_rpow (v.nonneg _) (v.nonneg _)]
  nonneg' x := by simpa only [Pi.pow_apply] using Real.rpow_nonneg (v.nonneg _) _
  eq_zero' x := by simp [Real.rpow_eq_zero_iff_of_nonneg (v.nonneg _), v.eq_zero, he.ne']
  add_le' x y := by
    simp only [Pi.pow_apply]
    exact (rpow_add_le_of_isNonarchimedean hv he x y).trans <|
      max_le_add_of_nonneg (by positivity) (by positivity)

lemma isEquiv_rpow (v : AbsoluteValue R ‚Ñù) {e : ‚Ñù} (h‚ÇÄ : 0 < e) (h‚ÇÅ : e ‚â§ 1) :
    v.rpow h‚ÇÄ h‚ÇÅ ‚âà v :=
  Setoid.symm ‚ü®e, h‚ÇÄ, rfl‚ü©

lemma isEquiv_rpow_of_isNonarchimedean {v : AbsoluteValue R ‚Ñù} (hv : IsNonarchimedean v) {e : ‚Ñù}
    (he : 0 < e) :
    v.rpow_of_isNonarchimedean hv he ‚âà v :=
  Setoid.symm <| ‚ü®e, he, rfl‚ü©

lemma isNonarchimedean_rpow_of_isNonarchimedean {v : AbsoluteValue R ‚Ñù} (hv : IsNonarchimedean v)
    {e : ‚Ñù} (he : 0 < e) :
    IsNonarchimedean (v.rpow_of_isNonarchimedean hv he) := by
  intro x y
  simpa only [rpow_of_isNonarchimedean, coe_mk, MulHom.coe_mk, Pi.pow_apply]
    using rpow_add_le_of_isNonarchimedean hv he x y

end AbsoluteValue

namespace Rat.AbsoluteValue

/-- If an absolute value `v` on `‚Ñö` is equivalent to the standard absolute value `|¬∑|`,
then `v = |¬∑| ^ e` for some `0 < e ‚â§ 1`. -/
lemma eq_rpow_of_isEquiv_real {v : AbsoluteValue ‚Ñö ‚Ñù} (hv : v ‚âà real) :
    ‚àÉ (e : ‚Ñù) (h‚ÇÄ : 0 < e) (h‚ÇÅ : e ‚â§ 1), v = real.rpow h‚ÇÄ h‚ÇÅ := by
  obtain ‚ü®e, he‚ÇÄ, he‚ü© := Setoid.symm hv
  refine ‚ü®e, he‚ÇÄ, ?_, by ext1; simp [‚Üê congrFun he, AbsoluteValue.rpow]‚ü©
  have h‚ÇÇ := congrFun he 2
  simp only [real_eq_abs, Nat.abs_ofNat, cast_ofNat] at h‚ÇÇ
  have h : (2 : ‚Ñù) ^ e ‚â§ 2 ^ (1 : ‚Ñù) := by
    calc
    _ = v 2 := h‚ÇÇ
    _ = v (1 + 1) := by rw [one_add_one_eq_two]
    _ ‚â§ v 1 + v 1 := v.add_le 1 1
    _ = 1 + 1 := by rw [v.map_one]
    _ = 2 ^ (1 : ‚Ñù) := by rw [Real.rpow_one, one_add_one_eq_two]
  exact (Real.strictMono_rpow_of_base_gt_one one_lt_two).le_iff_le.mp h

end Rat.AbsoluteValue

end isEquiv

namespace AbsoluteValue

/-!
### Two absolute values are equivalent iff they induce the same topology

This is Theorem 1.1 in Conrad's notes.

The main result is `AbsoluteValue.isEquiv_iff_isHomeomorph`.
-/

section withAbs

open WithAbs

variable {R : Type*} [Ring R]

open Filter Topology in
/-- The sequence of `n`th powers of an element `x` converges to zero in the topology induced
by an absolute value `v` if and only if `v x < 1`. -/
lemma tendsto_nhds_zero_iff_abv_lt_one [Nontrivial R] (v : AbsoluteValue R ‚Ñù) (x : R) :
    Tendsto (fun n : ‚Ñï ‚Ü¶ (WithAbs.equiv v).symm x ^ n) atTop (ùìù 0) ‚Üî v x < 1 := by
  refine ‚ü®fun H ‚Ü¶ ?_, fun H ‚Ü¶ ?_‚ü©
  ¬∑ rw [Metric.tendsto_atTop] at H
    obtain ‚ü®n, hn‚ü© := H 1 zero_lt_one
    simp only [ge_iff_le, dist_zero_right, norm_eq_abv, map_pow, RingEquiv.apply_symm_apply] at hn
    replace hn := hn n le_rfl
    refine (pow_lt_one_iff_of_nonneg (v.nonneg x) ?_).mp hn
    rintro rfl
    simp at hn
  ¬∑ refine tendsto_pow_atTop_nhds_zero_of_norm_lt_one ?_
    rwa [norm_eq_abv]

variable {F : Type*} [Field F]

/-- An absolute value `v` induces the discrete topology on a field `F` if and only if
`v` is trivial. -/
lemma discrete_iff_not_isNontrivial {v : AbsoluteValue F ‚Ñù} :
    DiscreteTopology (WithAbs v) ‚Üî ¬¨ v.IsNontrivial := by
  rw [discreteTopology_iff_isOpen_singleton_zero, Metric.isOpen_singleton_iff]
  refine ‚ü®fun ‚ü®Œµ, hŒµ‚ÇÄ, hŒµ‚ÇÅ‚ü© ‚Ü¶ ?_, fun H ‚Ü¶ ‚ü®1 / 2, one_half_pos, fun y hy ‚Ü¶ ?_‚ü©‚ü©
  ¬∑ simp only [dist_zero_right, norm_eq_abv] at hŒµ‚ÇÅ
    rw [not_isNontrivial_iff]
    intro x hx‚ÇÄ
    by_contra! h
    have H {y : F} (hy‚ÇÄ : y ‚â† 0) (hy : v y < 1) : False := by
      obtain ‚ü®n, hn‚ü© := exists_pow_lt_of_lt_one hŒµ‚ÇÄ hy
      rw [‚Üê v.map_pow] at hn
      exact hy‚ÇÄ <| pow_eq_zero <| hŒµ‚ÇÅ _ hn
    rcases h.lt_or_lt with h | h
    ¬∑ exact H hx‚ÇÄ h
    ¬∑ replace h := inv_lt_one_of_one_lt‚ÇÄ h
      rw [‚Üê map_inv‚ÇÄ] at h
      exact H (inv_ne_zero hx‚ÇÄ) h
  ¬∑ rw [dist_zero_right, norm_eq_abv] at hy
    rcases eq_or_ne y 0 with rfl | hy‚ÇÄ
    ¬∑ rfl
    ¬∑ have : WithAbs.equiv v y ‚â† 0 := hy‚ÇÄ
      simp only [H, not_false_eq_true, ne_eq, this, not_isNontrivial_apply] at hy
      contrapose! hy
      exact one_half_lt_one.le

/-- A field with a nontrivial absolute value on it is a nontrivially normed field. -/
noncomputable
def IsNontrivial.nontriviallyNormedField {v : AbsoluteValue F ‚Ñù} (hv : v.IsNontrivial) :
    NontriviallyNormedField (WithAbs v) where
  __ := WithAbs.normedField v
  non_trivial := hv.exists_abv_gt_one

noncomputable
instance _root_.WithAbs.nontriviallynormedField {v : AbsoluteValue F ‚Ñù} [Fact <| v.IsNontrivial] :
    NontriviallyNormedField (WithAbs v) :=
  (Fact.out : v.IsNontrivial).nontriviallyNormedField

end withAbs

section equiv_trivial

variable {R : Type*} [Ring R]

lemma isEquiv_iff_eq_of_not_isNontrivial {v‚ÇÅ v‚ÇÇ : AbsoluteValue R ‚Ñù} (h : ¬¨ v‚ÇÅ.IsNontrivial) :
    v‚ÇÅ ‚âà v‚ÇÇ ‚Üî v‚ÇÅ = v‚ÇÇ := by
  refine ‚ü®fun ‚ü®c, hc‚ÇÄ, hc‚ÇÅ‚ü© ‚Ü¶ ?_, fun H ‚Ü¶ H ‚ñ∏ isEquiv_refl v‚ÇÇ‚ü©
  ext1 x
  rcases eq_or_ne x 0 with rfl | hx
  ¬∑ simp
  ¬∑ simp [h, hx, ‚Üê hc‚ÇÅ]

lemma eq_of_not_isNontrivial {v‚ÇÅ v‚ÇÇ : AbsoluteValue R ‚Ñù} (h‚ÇÅ : ¬¨ v‚ÇÅ.IsNontrivial)
    (h‚ÇÇ : ¬¨ v‚ÇÇ.IsNontrivial) :
    v‚ÇÅ = v‚ÇÇ := by
  ext1 x
  rcases eq_or_ne x 0 with rfl | hx
  ¬∑ simp
  ¬∑ simp [h‚ÇÅ, h‚ÇÇ, hx]

end equiv_trivial

section equiv

variable {F : Type*} [Field F]

open WithAbs

lemma continuous_equiv‚ÇÇ {v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù} (h : v‚ÇÅ ‚âà v‚ÇÇ) :
    Continuous (WithAbs.equiv‚ÇÇ v‚ÇÅ v‚ÇÇ) := by
  obtain ‚ü®c, hc‚ÇÄ, hc‚ÇÅ‚ü© := h
  rw [Metric.continuous_iff]
  simp only [dist_eq_norm_sub, norm_eq_abv, WithAbs.equiv‚ÇÇ, Equiv.trans_apply,
    Equiv.apply_symm_apply]
  intro x Œµ hŒµ‚ÇÄ
  conv =>
    enter [1, Œ¥, 2, y, 2, 1]
    rw [‚Üê map_sub, RingEquiv.coe_trans, Function.comp_apply, RingEquiv.apply_symm_apply]
  refine ‚ü®Œµ ^ (1 / c), Real.rpow_pos_of_pos hŒµ‚ÇÄ _, fun y h ‚Ü¶ ?_‚ü©
  let x' := WithAbs.equiv v‚ÇÅ x
  let y' := WithAbs.equiv v‚ÇÅ y
  have hx : x = (WithAbs.equiv v‚ÇÅ).symm x' := rfl
  have hy : y = (WithAbs.equiv v‚ÇÅ).symm y' := rfl
  rw [hx, hy, ‚Üê map_sub, RingEquiv.apply_symm_apply] at h
  rw [map_sub, hx, hy]
  simp only [Equiv.apply_symm_apply, ‚Üê hc‚ÇÅ]
  calc v‚ÇÅ (y' - x') ^ c
  _ < (Œµ ^ (1 / c)) ^ c := by gcongr
  _ = Œµ := by rw [‚Üê Real.rpow_mul hŒµ‚ÇÄ.le, one_div_mul_cancel hc‚ÇÄ.ne', Real.rpow_one]

/-- Two equivalent absolute values on a field `F` induce the same topology.
This defines the identity map `F ‚Üí F` as a homeomorphism between the two topologies. -/
def homeomorph_of_isEquiv {v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù} (h : v‚ÇÅ ‚âà v‚ÇÇ) :
    WithAbs v‚ÇÅ ‚âÉ‚Çú WithAbs v‚ÇÇ where
  toFun := (WithAbs.equiv v‚ÇÇ).symm ‚àò WithAbs.equiv v‚ÇÅ
  invFun := (WithAbs.equiv v‚ÇÅ).symm ‚àò WithAbs.equiv v‚ÇÇ
  left_inv _ := rfl
  right_inv _ := rfl
  continuous_toFun := continuous_equiv‚ÇÇ h
  continuous_invFun := continuous_equiv‚ÇÇ (Setoid.symm h)

lemma homeomorph_of_isEquiv_toFun_eq {v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù} (h : v‚ÇÅ ‚âà v‚ÇÇ) :
    ‚áë(homeomorph_of_isEquiv h) = ‚áë(equiv‚ÇÇ v‚ÇÅ v‚ÇÇ) :=
  rfl

open Filter Topology in
/-- If two absolute values on a field `F` induce the same topology and an element of `F` has
absolute value less than one with respect to the first absolute value, then also with respect
to the second absolute value. -/
lemma abv_lt_one_of_isHomeomorph {v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù}
    (h : IsHomeomorph (WithAbs.equiv‚ÇÇ v‚ÇÅ v‚ÇÇ)) {x : F} (hx : v‚ÇÅ x < 1) :
    v‚ÇÇ x < 1 := by
  let x‚ÇÅ : WithAbs v‚ÇÅ := (WithAbs.equiv v‚ÇÅ).symm x
  let x‚ÇÇ : WithAbs v‚ÇÇ := (WithAbs.equiv v‚ÇÇ).symm x
  have hx‚ÇÅ : Tendsto (fun n : ‚Ñï ‚Ü¶ x‚ÇÅ ^ n) atTop (ùìù 0) :=
    (tendsto_nhds_zero_iff_abv_lt_one v‚ÇÅ x).mpr hx
  have hx‚ÇÇ : Tendsto (fun n : ‚Ñï ‚Ü¶ x‚ÇÇ ^ n) atTop (ùìù 0) := by
    have (n : ‚Ñï) : x‚ÇÇ ^ n = (WithAbs.equiv‚ÇÇ v‚ÇÅ v‚ÇÇ) (x‚ÇÅ ^ n) := rfl
    simp_rw [this]
    refine Tendsto.comp (g := (WithAbs.equiv‚ÇÇ v‚ÇÅ v‚ÇÇ)) ?_ hx‚ÇÅ
    exact Continuous.tendsto h.continuous 0
  exact (tendsto_nhds_zero_iff_abv_lt_one v‚ÇÇ x).mp hx‚ÇÇ

/--If two absolute values on a field `F` induce the same topology, then the sets of elements
of absolute value less than one agree for both absolute values. -/
lemma abv_lt_one_iff_of_isHomeomorph {v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù}
    (h : IsHomeomorph (WithAbs.equiv‚ÇÇ v‚ÇÅ v‚ÇÇ)) (x : F) :
    v‚ÇÅ x < 1 ‚Üî v‚ÇÇ x < 1 := by
  refine ‚ü®abv_lt_one_of_isHomeomorph h, abv_lt_one_of_isHomeomorph ?_‚ü©
  obtain ‚ü®œÜ, hœÜ‚ü© := isHomeomorph_iff_exists_homeomorph.mp h
  refine isHomeomorph_iff_exists_homeomorph.mpr ‚ü®œÜ.symm, ?_‚ü©
  apply_fun (fun f ‚Ü¶ (œÜ.symm ‚àò f) ‚àò (WithAbs.equiv‚ÇÇ v‚ÇÇ v‚ÇÅ)) at hœÜ
  simp only [Homeomorph.symm_comp_self, CompTriple.comp_eq] at hœÜ
  rw [hœÜ, Function.comp_assoc, ‚Üê WithAbs.equiv‚ÇÇ_symm_eq, ‚Üê RingEquiv.coe_trans,
    RingEquiv.self_trans_symm]
  simp

open Real in
/-- If the sets of elements of absolute value less than one agree for two absolute values
on a field `F`, then the two absolute values are equivalent. -/
lemma isEquiv_of_abv_lt_one_iff {v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù} (h : ‚àÄ x, v‚ÇÅ x < 1 ‚Üî v‚ÇÇ x < 1) :
    v‚ÇÅ ‚âà v‚ÇÇ := by
  by_cases H : ‚àÉ x ‚â† 0, v‚ÇÅ x < 1
  ¬∑ obtain ‚ü®c, hc‚ÇÄ, hc‚ÇÅ‚ü© := H
    have hc‚ÇÇ := (h c).mp hc‚ÇÅ
    have hcv‚ÇÅ := v‚ÇÅ.pos hc‚ÇÄ
    have hcv‚ÇÅ' := v‚ÇÅ.nonneg c
    have hcv‚ÇÇ := v‚ÇÇ.pos hc‚ÇÄ
    let e := logb (v‚ÇÅ c) (v‚ÇÇ c)
    have he : v‚ÇÅ c ^ e = v‚ÇÇ c := rpow_logb hcv‚ÇÅ hc‚ÇÅ.ne hcv‚ÇÇ
    have he‚ÇÄ : 0 < e := logb_pos_of_base_lt_one hcv‚ÇÅ hc‚ÇÅ hcv‚ÇÇ hc‚ÇÇ
    have key (y : F) : ¬¨ v‚ÇÅ y ^ e < v‚ÇÇ y := by
      intro hy
      have hyv‚ÇÅ := v‚ÇÅ.nonneg y
      have hy‚ÇÄ : y ‚â† 0 := v‚ÇÇ.ne_zero_iff.mp ((rpow_nonneg hyv‚ÇÅ e).trans_lt hy).ne'
      obtain ‚ü®n, hn‚ü© := exists_pow_lt_of_lt_one hcv‚ÇÇ <| (div_lt_one (v‚ÇÇ.pos hy‚ÇÄ)).mpr hy
      obtain ‚ü®m, hm‚ÇÅ, hm‚ÇÇ‚ü© : ‚àÉ m : ‚Ñ§, v‚ÇÅ (y ^ n) ^ e < v‚ÇÇ c ^ m ‚àß v‚ÇÇ c ^ m < v‚ÇÇ (y ^ n) := by
        have hv‚ÇÇy := v‚ÇÇ.pos <| pow_ne_zero n hy‚ÇÄ
        refine exists_zpow_btwn_of_lt_mul ?_ hv‚ÇÇy hcv‚ÇÇ hc‚ÇÇ
        rwa [div_pow, ‚Üê v‚ÇÇ.map_pow, div_lt_iff‚ÇÄ hv‚ÇÇy, rpow_pow_comm hyv‚ÇÅ,
          mul_comm, ‚Üê v‚ÇÅ.map_pow] at hn
      rw [‚Üê he, rpow_zpow_comm hcv‚ÇÅ', rpow_lt_rpow_iff (v‚ÇÅ.nonneg _) (zpow_nonneg hcv‚ÇÅ' m) he‚ÇÄ,
        ‚Üê div_lt_one (zpow_pos hcv‚ÇÅ m), ‚Üê map_zpow‚ÇÄ, ‚Üê map_div‚ÇÄ] at hm‚ÇÅ
      rw [‚Üê map_zpow‚ÇÄ, ‚Üê one_lt_div (v‚ÇÇ.pos (by exact zpow_ne_zero m hc‚ÇÄ)), ‚Üê map_div‚ÇÄ] at hm‚ÇÇ
      exact (h _).mp hm‚ÇÅ |>.trans hm‚ÇÇ |>.false
    simp only [not_lt] at key
    refine ‚ü®e, he‚ÇÄ, funext fun x ‚Ü¶ ?_‚ü©
    rcases eq_or_ne x 0 with rfl | hx‚ÇÄ
    ¬∑ simpa only [AbsoluteValue.map_zero, le_refl] using zero_rpow he‚ÇÄ.ne'
    ¬∑ refine le_antisymm ?_ (key x)
      have := key x‚Åª¬π
      simp only [map_inv‚ÇÄ, inv_rpow (v‚ÇÅ.nonneg _)] at this
      rwa [inv_le_inv‚ÇÄ (v‚ÇÇ.pos hx‚ÇÄ) <| rpow_pos_of_pos (v‚ÇÅ.pos hx‚ÇÄ) e] at this
  ¬∑ -- both are trivial
    have H‚ÇÅ := mt IsNontrivial.exists_abv_lt_one H
    have H' : ¬¨‚àÉ x, x ‚â† 0 ‚àß v‚ÇÇ x < 1 := by
      simp_all only [not_false_eq_true, ne_eq, not_exists, not_and, not_lt, implies_true]
    have H‚ÇÇ := mt IsNontrivial.exists_abv_lt_one H'
    classical
    rw [of_not_not <| (isNontrivial_iff_ne_trivial v‚ÇÅ).not.mp H‚ÇÅ,
      of_not_not <| (isNontrivial_iff_ne_trivial v‚ÇÇ).not.mp H‚ÇÇ]

open Filter Topology in
/-- Two absolute values on a field are equivalent if and only if they induce the same topology. -/
-- (This is Theorem 1.1 in the reference.)
lemma isEquiv_iff_isHomeomorph (v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù) :
    v‚ÇÅ ‚âà v‚ÇÇ ‚Üî IsHomeomorph (WithAbs.equiv‚ÇÇ v‚ÇÅ v‚ÇÇ) := by
  refine ‚ü®fun H ‚Ü¶ ?_, fun H ‚Ü¶ isEquiv_of_abv_lt_one_iff <| abv_lt_one_iff_of_isHomeomorph H‚ü©
  exact isHomeomorph_iff_exists_homeomorph.mpr ‚ü®homeomorph_of_isEquiv H, rfl‚ü©

/-- The induced ring homomorphism between two completions with respect to equivalent
absolute values. -/
noncomputable
def ringHom_completion_of_isEquiv {v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù} (h : v‚ÇÅ ‚âà v‚ÇÇ) :
    v‚ÇÅ.Completion ‚Üí+* v‚ÇÇ.Completion :=
  UniformSpace.Completion.mapRingHom (WithAbs.equiv‚ÇÇ v‚ÇÅ v‚ÇÇ) <|
    ((isEquiv_iff_isHomeomorph v‚ÇÅ v‚ÇÇ).mp h).continuous

/-- The induced ring isomorphism between two completions with respect to equivalent
absolute values. -/
noncomputable
def ringEquiv_completion_of_isEquiv {v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù} (h : v‚ÇÅ ‚âà v‚ÇÇ) :
    v‚ÇÅ.Completion ‚âÉ+* v‚ÇÇ.Completion := by
  refine UniformSpace.Completion.mapRingEquiv (WithAbs.equiv‚ÇÇ v‚ÇÅ v‚ÇÇ) ?_ ?_
  ¬∑ rw [‚Üê homeomorph_of_isEquiv_toFun_eq h]
    exact Homeomorph.continuous (homeomorph_of_isEquiv h)
  ¬∑ rw [WithAbs.equiv‚ÇÇ_symm_eq, ‚Üê homeomorph_of_isEquiv_toFun_eq (Setoid.symm h)]
    exact Homeomorph.continuous (homeomorph_of_isEquiv (Setoid.symm h))

lemma ringEquiv_completion_coe_eq {v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù} (h : v‚ÇÅ ‚âà v‚ÇÇ) :
    (ringEquiv_completion_of_isEquiv h).toRingHom = ringHom_completion_of_isEquiv h :=
  rfl

lemma ringEquiv_completion_coeFun_eq {v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù} (h : v‚ÇÅ ‚âà v‚ÇÇ) :
    ‚áë(ringEquiv_completion_of_isEquiv h) = ringHom_completion_of_isEquiv h :=
  rfl

lemma ringEquiv_completion_symm_coeFun_eq {v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù} (h : v‚ÇÅ ‚âà v‚ÇÇ) :
    ‚áë(ringEquiv_completion_of_isEquiv h).symm = ringHom_completion_of_isEquiv (Setoid.symm h) :=
  rfl

open UniformSpace.Completion in
/-- The induced ring isomorphism between two completions with respect to equivalent
absolute values is a homeomorphism. -/
lemma isHomeomorph_ringEquiv_completion {v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù} (h : v‚ÇÅ ‚âà v‚ÇÇ) :
    IsHomeomorph (ringEquiv_completion_of_isEquiv h) := by
  refine isHomeomorph_iff_exists_inverse.mpr
    ‚ü®?_, (ringEquiv_completion_of_isEquiv h).symm, ?_, ?_, ?_‚ü©
  ¬∑ rw [ringEquiv_completion_coeFun_eq, ringHom_completion_of_isEquiv]
    exact continuous_mapRingHom (continuous_equiv‚ÇÇ h)
  ¬∑ simp [Function.LeftInverse]
  ¬∑ simp [Function.RightInverse, Function.LeftInverse]
  ¬∑ rw [ringEquiv_completion_symm_coeFun_eq, ringHom_completion_of_isEquiv]
    exact continuous_mapRingHom (continuous_equiv‚ÇÇ (Setoid.symm h))

lemma uniformContinuous_equiv‚ÇÇ_of_isEquiv {v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù} (h : v‚ÇÅ ‚âà v‚ÇÇ) :
    UniformContinuous (equiv‚ÇÇ v‚ÇÅ v‚ÇÇ) :=
  uniformContinuous_of_continuousAt_zero _ (continuous_equiv‚ÇÇ h).continuousAt

/-- If `v‚ÇÅ` and `v‚ÇÇ` are equivalent absolute values on `F`, then `WithAbs.equiv‚ÇÇ v‚ÇÅ v‚ÇÇ`
is an equivalence of uniformities. This gives the `UniformEquiv`. -/
def uniformEquivOfIsEquiv {v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù} (h : v‚ÇÅ ‚âà v‚ÇÇ) :
    WithAbs v‚ÇÅ ‚âÉ·µ§ WithAbs v‚ÇÇ :=
  UniformEquiv.mk (equiv‚ÇÇ v‚ÇÅ v‚ÇÇ) (uniformContinuous_equiv‚ÇÇ_of_isEquiv h)
    (uniformContinuous_equiv‚ÇÇ_of_isEquiv <| Setoid.symm h)

/-- The underlying equivalence of `uniformEquivOfIsEquiv h` is `WithAbs.equiv‚ÇÇ _ _`. -/
lemma uniformEquiv_eq_equiv‚ÇÇ {v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù} (h : v‚ÇÅ ‚âà v‚ÇÇ) :
    (uniformEquivOfIsEquiv h).toEquiv = (equiv‚ÇÇ v‚ÇÅ v‚ÇÇ).toEquiv :=
  rfl

/-- If `v‚ÇÅ` and `v‚ÇÇ` are equivalent absolute values on `F` and `F` is complete
with respect to `v‚ÇÅ`, then `F` is also complete with respect to `v‚ÇÇ`. -/
lemma completeSpace_of_isEquiv {v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù} (h : v‚ÇÅ ‚âà v‚ÇÇ)
    [CompleteSpace (WithAbs v‚ÇÅ)] :
    CompleteSpace (WithAbs v‚ÇÇ) :=
  (uniformEquivOfIsEquiv h).completeSpace_iff.mp ‚ÄπCompleteSpace (WithAbs v‚ÇÅ)‚Ä∫

end equiv
