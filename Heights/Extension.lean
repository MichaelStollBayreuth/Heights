import Mathlib

/-!
# Estensions of absolute values

Let `F` be a field with an absolute value `v` on it, and let `F'` be a field extension of `F`
of finite degree.
The goal here is to show that there are finitely many possibilities to extend `v`
to an absolute value `v'` on `F'` and that
`‚àè v', v' x ^ localDegree F v' = v (Algebra.norm F' x)`,
where `localDegree F v'` is the degree of the extension of completions `F'_v' / F_v`.

We follow [Brian Conrad's notes}(http://math.stanford.edu/~conrad/676Page/handouts/ostrowski.pdf),
Sections 6 and 7.
-/

/-!
### Auxiliary lemmas
-/

section Mathlib.Analysis.SpecialFunctions.Pow.Real

lemma Real.rpow_right_inj {x y z : ‚Ñù} (hx‚ÇÄ : 0 < x) (hx‚ÇÅ : x ‚â† 1) : x ^ y = x ^ z ‚Üî y = z := by
  refine ‚ü®fun H ‚Ü¶ ?_, fun H ‚Ü¶ by rw [H]‚ü©
  rcases hx‚ÇÅ.lt_or_lt with h | h
  ¬∑ exact le_antisymm ((rpow_le_rpow_left_iff_of_base_lt_one hx‚ÇÄ h).mp H.symm.le) <|
      (rpow_le_rpow_left_iff_of_base_lt_one hx‚ÇÄ h).mp H.le
  ¬∑ exact le_antisymm ((rpow_le_rpow_left_iff h).mp H.le) ((rpow_le_rpow_left_iff h).mp H.symm.le)

end Mathlib.Analysis.SpecialFunctions.Pow.Real

section Mathlib.Algebra.Order.Archimedean.Basic

variable {Œ± : Type*} [LinearOrderedSemifield Œ±] [Archimedean Œ±] [ExistsAddOfLE Œ±]

lemma exists_pow_btwn_of_lt_mul {a b c : Œ±} (h : a < b * c) (hb‚ÇÄ : 0 < b) (hb‚ÇÅ : b ‚â§ 1)
    (hc‚ÇÄ : 0 < c) (hc‚ÇÅ : c < 1) :
    ‚àÉ n : ‚Ñï, a < c ^ n ‚àß c ^ n < b := by
  have := exists_pow_lt_of_lt_one hb‚ÇÄ hc‚ÇÅ
  refine ‚ü®Nat.find this, h.trans_le ?_, Nat.find_spec this‚ü©
  by_contra! H
  have hn : Nat.find this ‚â† 0 := by
    intro hf
    simp only [hf, pow_zero] at H
    exact (H.trans <| Left.mul_lt_of_le_of_lt_one_of_pos hb‚ÇÅ hc‚ÇÅ hb‚ÇÄ).false
  rw [(Nat.succ_pred_eq_of_ne_zero hn).symm, pow_succ, mul_lt_mul_right hc‚ÇÄ] at H
  exact Nat.find_min this (Nat.sub_one_lt hn) H

lemma exists_zpow_btwn_of_lt_mul {a b c : Œ±} (h : a < b * c) (ha : 0 < a) (hc‚ÇÄ : 0 < c)
    (hc‚ÇÅ : c < 1) :
    ‚àÉ n : ‚Ñ§, a < c ^ n ‚àß c ^ n < b := by
  have hb‚ÇÄ : 0 < b := pos_of_mul_pos_left (ha.trans h) hc‚ÇÄ.le
  rcases le_or_lt b 1 with hb‚ÇÅ | hb‚ÇÅ
  ¬∑ obtain ‚ü®n, hn‚ü© := exists_pow_btwn_of_lt_mul h hb‚ÇÄ hb‚ÇÅ hc‚ÇÄ hc‚ÇÅ
    exact ‚ü®n, mod_cast hn‚ü©
  ¬∑ rcases lt_or_le a 1 with ha‚ÇÅ | ha‚ÇÅ
    ¬∑ refine ‚ü®0, ?_‚ü©
      rw [zpow_zero]
      exact ‚ü®ha‚ÇÅ, hb‚ÇÅ‚ü©
    ¬∑ have : b‚Åª¬π < a‚Åª¬π * c := by rwa [lt_inv_mul_iff‚ÇÄ' ha, inv_mul_lt_iff‚ÇÄ hb‚ÇÄ]
      obtain ‚ü®n, hn‚ÇÅ, hn‚ÇÇ‚ü© :=
        exists_pow_btwn_of_lt_mul this (inv_pos_of_pos ha) (inv_le_one_of_one_le‚ÇÄ ha‚ÇÅ) hc‚ÇÄ hc‚ÇÅ
      refine ‚ü®-n, ?_, ?_‚ü©
      ¬∑ rwa [lt_inv_comm‚ÇÄ (pow_pos hc‚ÇÄ n) ha, ‚Üê zpow_natCast, ‚Üê zpow_neg] at hn‚ÇÇ
      ¬∑ rwa [inv_lt_comm‚ÇÄ hb‚ÇÄ (pow_pos hc‚ÇÄ n), ‚Üê zpow_natCast, ‚Üê zpow_neg] at hn‚ÇÅ

end Mathlib.Algebra.Order.Archimedean.Basic

section Mathlib.Analysis.Normed.Ring.WithAbs

variable {R : Type*} [Ring R]

lemma AbsoluteValue.norm_eq_abv (v : AbsoluteValue R ‚Ñù) (x : WithAbs v) :
    ‚Äñx‚Äñ = v (WithAbs.equiv v x) := rfl

namespace WithAbs

@[simp]
theorem equiv_one (v : AbsoluteValue R ‚Ñù) : (WithAbs.equiv v) 1 = 1 := rfl

@[simp]
theorem equiv_symm_one (v : AbsoluteValue R ‚Ñù) : (WithAbs.equiv v).symm 1 = 1 := rfl

@[simp]
theorem equiv_pow {v : AbsoluteValue R ‚Ñù} (x : WithAbs v) (n : ‚Ñï) :
    (WithAbs.equiv v) (x ^ n) = (WithAbs.equiv v) x ^ n := rfl

@[simp]
theorem equiv_symm_pow {v : AbsoluteValue R ‚Ñù} (x : R) (n : ‚Ñï) :
    (WithAbs.equiv v).symm (x ^ n) = (WithAbs.equiv v).symm x ^ n := rfl

variable {F : Type*} [Field F]

@[simp]
theorem equiv_zpow {v : AbsoluteValue F ‚Ñù} (x : WithAbs v) (n : ‚Ñ§) :
    (WithAbs.equiv v) (x ^ n) = (WithAbs.equiv v) x ^ n := rfl

@[simp]
theorem equiv_symm_zpow {v : AbsoluteValue F ‚Ñù} (x : F) (n : ‚Ñ§) :
    (WithAbs.equiv v).symm (x ^ n) = (WithAbs.equiv v).symm x ^ n := rfl

end WithAbs

end Mathlib.Analysis.Normed.Ring.WithAbs

namespace AbsoluteValue

/-!
### API lemmas for absolute values
-/

section API

variable {R : Type*} [Semiring R] {S : Type*} [OrderedSemiring S]

section nontrivial

/-- An absolute value on a semiring `R` without zero divisors is *nontrivial* if it takes
a value `‚â† 1` on a nonzero element.

This has the advantage over `v ‚â† .trivial` that it does not require decidability
of `¬∑ = 0` in `R`. -/
def IsNontrivial (v : AbsoluteValue R S) : Prop :=
  ‚àÉ x ‚â† 0, v x ‚â† 1

lemma isNontrivial_iff_not_eq_trivial [DecidableEq R] [NoZeroDivisors R] [Nontrivial S]
    (v : AbsoluteValue R S) :
    v.IsNontrivial ‚Üî v ‚â† .trivial := by
  refine ‚ü®fun ‚ü®x, hx‚ÇÄ, hx‚ÇÅ‚ü© h ‚Ü¶ hx‚ÇÅ <| h.symm ‚ñ∏ trivial_apply hx‚ÇÄ, fun H ‚Ü¶ ?_‚ü©
  contrapose! H
  simp only [IsNontrivial] at H
  push_neg at H
  ext1 x
  rcases eq_or_ne x 0 with rfl | hx
  ¬∑ simp
  ¬∑ simp [H, hx]

lemma not_isNontrivial_iff (v : AbsoluteValue R S) :
    ¬¨ v.IsNontrivial ‚Üî ‚àÄ x ‚â† 0, v x = 1 := by
  simp only [IsNontrivial]
  push_neg
  rfl

@[simp]
lemma not_isNontrivial_apply {v : AbsoluteValue R S} (hv : ¬¨ v.IsNontrivial) {x : R} (hx : x ‚â† 0) :
    v x = 1 :=
  v.not_isNontrivial_iff.mp hv _ hx

lemma IsNontrivial.exists_abv_gt_one {F : Type*} [Field F] {v : AbsoluteValue F ‚Ñù} (h : v.IsNontrivial) :
    ‚àÉ x, 1 < v x := by
  obtain ‚ü®x, hx‚ÇÄ, hx‚ÇÅ‚ü© := h
  rcases hx‚ÇÅ.lt_or_lt with h | h
  ¬∑ refine ‚ü®x‚Åª¬π, ?_‚ü©
    rw [map_inv‚ÇÄ]
    exact (one_lt_inv‚ÇÄ <| v.pos hx‚ÇÄ).mpr h
  ¬∑ exact ‚ü®x, h‚ü©

lemma IsNontrivial.exists_abv_lt_one {F : Type*} [Field F] {v : AbsoluteValue F ‚Ñù} (h : v.IsNontrivial) :
    ‚àÉ x ‚â† 0, v x < 1 := by
  obtain ‚ü®y, hy‚ü© := h.exists_abv_gt_one
  have hy‚ÇÄ := v.ne_zero_iff.mp <| (zero_lt_one.trans hy).ne'
  refine ‚ü®y‚Åª¬π, inv_ne_zero hy‚ÇÄ, ?_‚ü©
  rw [map_inv‚ÇÄ]
  exact (inv_lt_one‚ÇÄ <| v.pos hy‚ÇÄ).mpr hy

end nontrivial

section restrict

variable [Nontrivial R] (F : Type*) [Field F] [Algebra F R]

/-- The restriction to a field `F` of an absolute value on an `F`-algebra `R`. -/
def restrict (v : AbsoluteValue R S) : AbsoluteValue F S :=
  v.comp (RingHom.injective (algebraMap F R))

variable {F}

lemma apply_algebraMap (v : AbsoluteValue R S) (x : F) : v (algebraMap F R x) = v.restrict F x := rfl

lemma isNontrivial_of_restrict (v : AbsoluteValue R S) (h : (v.restrict F).IsNontrivial) :
    v.IsNontrivial := by
  obtain ‚ü®x, hx‚ÇÄ, hx‚ÇÅ‚ü© := h
  exact ‚ü®algebraMap F R x, (map_ne_zero _).mpr hx‚ÇÄ, hx‚ÇÅ‚ü©

/-- Two equivalent extensions from `F` to `R` of the same nontrivial absolute value
must be equal. -/
lemma eq_of_equivalent_and_restrict_eq {v‚ÇÅ v‚ÇÇ : AbsoluteValue R ‚Ñù} (h‚ÇÅ : v‚ÇÅ ‚âà v‚ÇÇ)
    (h‚ÇÇ : v‚ÇÅ.restrict F = v‚ÇÇ.restrict F) (h‚ÇÉ : (v‚ÇÅ.restrict F).IsNontrivial) :
    v‚ÇÅ = v‚ÇÇ := by
  obtain ‚ü®c, hc‚ÇÄ, hc‚ÇÅ‚ü© := h‚ÇÅ
  obtain ‚ü®x, hx‚ü© := h‚ÇÉ.exists_abv_gt_one
  suffices c = 1 by simpa [this] using hc‚ÇÅ
  have H : v‚ÇÅ (algebraMap F R x) = v‚ÇÇ (algebraMap F R x) := by
    simp only [apply_algebraMap, h‚ÇÇ]
  rw [‚Üê congrFun hc‚ÇÅ, apply_algebraMap, eq_comm] at H
  nth_rewrite 2 [‚Üê Real.rpow_one (v‚ÇÅ.restrict F x)] at H
  exact (Real.rpow_right_inj (zero_lt_one.trans hx) hx.ne').mp H

end restrict

/-!
### Two absolute values are equivalent iff they induce the same topology

This is Theorem 1.1 in Conrad's notes. We split the interesting direction (same topology
implies equivalence) into two steps:

* `AbsoluteValue.abv_lt_one_iff_of_isHomeomorph`: if `v‚ÇÅ` and `v‚ÇÇ` induce the same
  topology, then `{x | v‚ÇÅ x < 1} = {x | v‚ÇÇ x < 1}`.

* `AbsoluteValue.equiv_of_abv_lt_one_iff`: if `{x | v‚ÇÅ x < 1} = {x | v‚ÇÇ x < 1}`,
  then `v‚ÇÅ ‚âà v‚ÇÇ`.

The main result is `AbsoluteValue.equiv_iff_isHomeomorph`.
-/

section withAbs

variable {R : Type*} [Ring R]

open Filter Topology in
/-- The sequence of `n`th powers of an element `x` converges to zero in the topology induced
by an absolute value `v` if and only if `v x < 1`. -/
lemma tendsto_nhds_zero_iff_abv_lt_one [Nontrivial R] (v : AbsoluteValue R ‚Ñù) (x : R) :
    Tendsto (fun n : ‚Ñï ‚Ü¶ (WithAbs.equiv v).symm x ^ n) atTop (ùìù 0) ‚Üî v x < 1 := by
  refine ‚ü®fun H ‚Ü¶ ?_, fun H ‚Ü¶ ?_‚ü©
  ¬∑ rw [Metric.tendsto_atTop] at H
    simp only [dist_zero_right, norm_eq_abv, WithAbs.equiv_pow, Equiv.apply_symm_apply] at H
    obtain ‚ü®n, hn‚ü© := H 1 zero_lt_one
    replace hn := hn n le_rfl
    rw [map_pow] at hn
    refine (pow_lt_one_iff_of_nonneg (v.nonneg x) ?_).mp hn
    rintro rfl
    simp at hn
  ¬∑ refine tendsto_pow_atTop_nhds_zero_of_norm_lt_one ?_
    rwa [norm_eq_abv, Equiv.apply_symm_apply]

variable {F : Type*} [Field F]

/-- An absolute value `v` induces the discrete topology on a field `F` if and only if
`v` is trivial. -/
lemma discrete_iff_not_isNontrivial {v : AbsoluteValue F ‚Ñù} :
    DiscreteTopology (WithAbs v) ‚Üî ¬¨ v.IsNontrivial := by
  rw [discreteTopology_iff_isOpen_singleton_zero, Metric.isOpen_singleton_iff]
  refine ‚ü®fun ‚ü®Œµ, hŒµ‚ÇÄ, hŒµ‚ÇÅ‚ü© ‚Ü¶ ?_, fun H ‚Ü¶ ‚ü®1 / 2, one_half_pos, fun y hy ‚Ü¶ ?_‚ü©‚ü©
  ¬∑ simp only [dist_zero_right, norm_eq_abv] at hŒµ‚ÇÅ
    rw [not_isNontrivial_iff]
    intro x hx‚ÇÄ
    by_contra! h
    have H {y : F} (hy‚ÇÄ : y ‚â† 0) (hy : v y < 1) : False := by
      obtain ‚ü®n, hn‚ü© := exists_pow_lt_of_lt_one hŒµ‚ÇÄ hy
      rw [‚Üê v.map_pow] at hn
      exact hy‚ÇÄ <| pow_eq_zero <| hŒµ‚ÇÅ _ hn
    rcases h.lt_or_lt with h | h
    ¬∑ exact H hx‚ÇÄ h
    ¬∑ replace h := inv_lt_one_of_one_lt‚ÇÄ h
      rw [‚Üê map_inv‚ÇÄ] at h
      exact H (inv_ne_zero hx‚ÇÄ) h
  ¬∑ rw [dist_zero_right, norm_eq_abv] at hy
    rcases eq_or_ne y 0 with rfl | hy‚ÇÄ
    ¬∑ rfl
    ¬∑ have : WithAbs.equiv v y ‚â† 0 := hy‚ÇÄ
      simp only [H, not_false_eq_true, ne_eq, this, not_isNontrivial_apply] at hy
      contrapose! hy
      exact one_half_lt_one.le

end withAbs

section equiv

variable {R : Type*} [Ring R]

lemma equiv_iff_eq_of_not_isNontrivial {v‚ÇÅ v‚ÇÇ : AbsoluteValue R ‚Ñù} (h : ¬¨ v‚ÇÅ.IsNontrivial) :
    v‚ÇÅ ‚âà v‚ÇÇ ‚Üî v‚ÇÅ = v‚ÇÇ := by
  refine ‚ü®fun ‚ü®c, hc‚ÇÄ, hc‚ÇÅ‚ü© ‚Ü¶ ?_, fun H ‚Ü¶ H ‚ñ∏ equiv_refl v‚ÇÇ‚ü©
  ext1 x
  rcases eq_or_ne x 0 with rfl | hx
  ¬∑ simp
  ¬∑ simp [h, hx, ‚Üê hc‚ÇÅ]

lemma eq_of_not_isNontrivial {v‚ÇÅ v‚ÇÇ : AbsoluteValue R ‚Ñù} (h‚ÇÅ : ¬¨ v‚ÇÅ.IsNontrivial)
    (h‚ÇÇ : ¬¨ v‚ÇÇ.IsNontrivial) :
    v‚ÇÅ = v‚ÇÇ := by
  ext1 x
  rcases eq_or_ne x 0 with rfl | hx
  ¬∑ simp
  ¬∑ simp [h‚ÇÅ, h‚ÇÇ, hx]

variable {F : Type*} [Field F]

private
lemma continuous_equiv_withAbs_withAbs {v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù} (h : v‚ÇÅ ‚âà v‚ÇÇ) :
    Continuous ((WithAbs.equiv v‚ÇÇ).symm ‚àò WithAbs.equiv v‚ÇÅ) := by
  obtain ‚ü®c, hc‚ÇÄ, hc‚ÇÅ‚ü© := h
  rw [Metric.continuous_iff]
  simp only [dist_eq_norm_sub, norm_eq_abv, Function.comp_def]
  intro x Œµ hŒµ‚ÇÄ
  conv => enter [1, Œ¥, 2, y, 2, 1]; rw [‚Üê WithAbs.equiv_symm_sub, ‚Üê WithAbs.equiv_sub]
  refine ‚ü®Œµ ^ (1 / c), Real.rpow_pos_of_pos hŒµ‚ÇÄ _, fun y h ‚Ü¶ ?_‚ü©
  let x' := WithAbs.equiv v‚ÇÅ x
  let y' := WithAbs.equiv v‚ÇÅ y
  have hx : x = (WithAbs.equiv v‚ÇÅ).symm x' := rfl
  have hy : y = (WithAbs.equiv v‚ÇÅ).symm y' := rfl
  rw [hx, hy, ‚Üê WithAbs.equiv_symm_sub, Equiv.apply_symm_apply] at h
  rw [Equiv.apply_symm_apply, WithAbs.equiv_sub, hx, hy]
  simp only [Equiv.apply_symm_apply, ‚Üê hc‚ÇÅ]
  calc v‚ÇÅ (y' - x') ^ c
  _ < (Œµ ^ (1 / c)) ^ c := by gcongr
  _ = Œµ := by rw [‚Üê Real.rpow_mul hŒµ‚ÇÄ.le, one_div_mul_cancel hc‚ÇÄ.ne', Real.rpow_one]

/-- Two equivalent absolute values on a field `F` induce the same topology.
This defines the identity map `F ‚Üí F` as a homeomorphism between the two topologies. -/
def homeomorph_of_equiv {v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù} (h : v‚ÇÅ ‚âà v‚ÇÇ) : WithAbs v‚ÇÅ ‚âÉ‚Çú WithAbs v‚ÇÇ where
  toFun := (WithAbs.equiv v‚ÇÇ).symm ‚àò WithAbs.equiv v‚ÇÅ
  invFun := (WithAbs.equiv v‚ÇÅ).symm ‚àò WithAbs.equiv v‚ÇÇ
  left_inv _ := rfl
  right_inv _ := rfl
  continuous_toFun := continuous_equiv_withAbs_withAbs h
  continuous_invFun := continuous_equiv_withAbs_withAbs (Setoid.symm h)

open Filter Topology in
/-- If two absolute values on a field `F` induce the same topology and an element of `F` has
absolute value less than one with respect to the first absolute value, then also with respect
to the second absolute value. -/
lemma abv_lt_one_of_isHomeomorph {v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù}
    (h : IsHomeomorph ((WithAbs.equiv v‚ÇÇ).symm ‚àò WithAbs.equiv v‚ÇÅ)) {x : F} (hx : v‚ÇÅ x < 1) :
    v‚ÇÇ x < 1 := by
  let x‚ÇÅ : WithAbs v‚ÇÅ := (WithAbs.equiv v‚ÇÅ).symm x
  let x‚ÇÇ : WithAbs v‚ÇÇ := (WithAbs.equiv v‚ÇÇ).symm x
  have hx‚ÇÅ : Tendsto (fun n : ‚Ñï ‚Ü¶ x‚ÇÅ ^ n) atTop (ùìù 0) :=
    (tendsto_nhds_zero_iff_abv_lt_one v‚ÇÅ x).mpr hx
  have hx‚ÇÇ : Tendsto (fun n : ‚Ñï ‚Ü¶ x‚ÇÇ ^ n) atTop (ùìù 0) := by
    have (n : ‚Ñï) : x‚ÇÇ ^ n = ((WithAbs.equiv v‚ÇÇ).symm ‚àò WithAbs.equiv v‚ÇÅ) (x‚ÇÅ ^ n) := rfl
    simp_rw [this]
    refine Tendsto.comp (g := (WithAbs.equiv v‚ÇÇ).symm ‚àò WithAbs.equiv v‚ÇÅ) ?_ hx‚ÇÅ
    exact Continuous.tendsto h.continuous 0
  exact (tendsto_nhds_zero_iff_abv_lt_one v‚ÇÇ x).mp hx‚ÇÇ

/--If two absolute values on a field `F` induce the same topology, then the sets of elements
of absolute value less than one agree for both absolute values. -/
lemma abv_lt_one_iff_of_isHomeomorph {v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù}
    (h : IsHomeomorph ((WithAbs.equiv v‚ÇÇ).symm ‚àò WithAbs.equiv v‚ÇÅ)) (x : F) :
    v‚ÇÅ x < 1 ‚Üî v‚ÇÇ x < 1 := by
  refine ‚ü®abv_lt_one_of_isHomeomorph h, abv_lt_one_of_isHomeomorph ?_‚ü©
  obtain ‚ü®œÜ, hœÜ‚ü© := isHomeomorph_iff_exists_homeomorph.mp h
  refine isHomeomorph_iff_exists_homeomorph.mpr ‚ü®œÜ.symm, ?_‚ü©
  apply_fun (fun f ‚Ü¶ (œÜ.symm ‚àò f) ‚àò (WithAbs.equiv v‚ÇÅ).symm ‚àò WithAbs.equiv v‚ÇÇ) at hœÜ
  simp only [Homeomorph.symm_comp_self, CompTriple.comp_eq] at hœÜ
  rw [hœÜ]
  ext1 x
  simp

open Real in
/-- If the sets of elements of absolute value less than one agree for two absolute values
on a field `F`, then the two absolute values are equivalent. -/
lemma equiv_of_abv_lt_one_iff {v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù} (h : ‚àÄ x, v‚ÇÅ x < 1 ‚Üî v‚ÇÇ x < 1) :
    v‚ÇÅ ‚âà v‚ÇÇ := by
  by_cases H : ‚àÉ x ‚â† 0, v‚ÇÅ x < 1
  ¬∑ obtain ‚ü®c, hc‚ÇÄ, hc‚ÇÅ‚ü© := H
    have hc‚ÇÇ := (h c).mp hc‚ÇÅ
    have hcv‚ÇÅ := v‚ÇÅ.pos hc‚ÇÄ
    have hcv‚ÇÅ' := v‚ÇÅ.nonneg c
    have hcv‚ÇÇ := v‚ÇÇ.pos hc‚ÇÄ
    let e := logb (v‚ÇÅ c) (v‚ÇÇ c)
    have he : v‚ÇÅ c ^ e = v‚ÇÇ c := rpow_logb hcv‚ÇÅ hc‚ÇÅ.ne hcv‚ÇÇ
    have he‚ÇÄ : 0 < e := logb_pos_of_base_lt_one hcv‚ÇÅ hc‚ÇÅ hcv‚ÇÇ hc‚ÇÇ
    have key (y : F) : ¬¨ v‚ÇÅ y ^ e < v‚ÇÇ y := by
      intro hy
      have hyv‚ÇÅ := v‚ÇÅ.nonneg y
      have hy‚ÇÄ : y ‚â† 0 := v‚ÇÇ.ne_zero_iff.mp ((rpow_nonneg hyv‚ÇÅ e).trans_lt hy).ne'
      obtain ‚ü®n, hn‚ü© := exists_pow_lt_of_lt_one hcv‚ÇÇ <| (div_lt_one (v‚ÇÇ.pos hy‚ÇÄ)).mpr hy
      have hv‚ÇÅy : 0 < v‚ÇÅ (y ^ n) := v‚ÇÅ.pos <| pow_ne_zero n hy‚ÇÄ
      obtain ‚ü®m, hm‚ÇÅ, hm‚ÇÇ‚ü© : ‚àÉ m : ‚Ñ§, v‚ÇÅ (y ^ n) ^ e < v‚ÇÇ c ^ m ‚àß v‚ÇÇ c ^ m < v‚ÇÇ (y ^ n) := by
        refine exists_zpow_btwn_of_lt_mul ?_ (rpow_pos_of_pos hv‚ÇÅy e) hcv‚ÇÇ hc‚ÇÇ
        rwa [div_pow, ‚Üê v‚ÇÇ.map_pow, div_lt_iff‚ÇÄ (v‚ÇÇ.pos <| pow_ne_zero n hy‚ÇÄ), ‚Üê rpow_natCast,
          ‚Üê rpow_mul hyv‚ÇÅ, mul_comm, rpow_mul hyv‚ÇÅ, rpow_natCast, mul_comm, ‚Üê v‚ÇÅ.map_pow] at hn
      rw [‚Üê he, ‚Üê rpow_intCast _ m, ‚Üê rpow_mul hcv‚ÇÅ', mul_comm, rpow_mul hcv‚ÇÅ', rpow_intCast,
        rpow_lt_rpow_iff (v‚ÇÅ.nonneg _) (zpow_nonneg hcv‚ÇÅ' m) he‚ÇÄ, ‚Üê div_lt_one (zpow_pos hcv‚ÇÅ m),
        ‚Üê map_zpow‚ÇÄ, ‚Üê map_div‚ÇÄ] at hm‚ÇÅ
      rw [‚Üê map_zpow‚ÇÄ, ‚Üê one_lt_div (v‚ÇÇ.pos (by exact zpow_ne_zero m hc‚ÇÄ)), ‚Üê map_div‚ÇÄ] at hm‚ÇÇ
      exact (h _).mp hm‚ÇÅ |>.trans hm‚ÇÇ |>.false
    simp only [not_lt] at key
    refine ‚ü®e, he‚ÇÄ, funext fun x ‚Ü¶ ?_‚ü©
    rcases eq_or_ne x 0 with rfl | hx‚ÇÄ
    ¬∑ simpa only [AbsoluteValue.map_zero, le_refl] using zero_rpow he‚ÇÄ.ne'
    ¬∑ refine le_antisymm ?_ (key x)
      have := key x‚Åª¬π
      simp only [map_inv‚ÇÄ, inv_rpow (v‚ÇÅ.nonneg _)] at this
      rwa [inv_le_inv‚ÇÄ (v‚ÇÇ.pos hx‚ÇÄ) <| rpow_pos_of_pos (v‚ÇÅ.pos hx‚ÇÄ) e] at this
  ¬∑ -- both are trivial
    have H‚ÇÅ := mt IsNontrivial.exists_abv_lt_one H
    have H' : ¬¨‚àÉ x, x ‚â† 0 ‚àß v‚ÇÇ x < 1 := by
      simp_all only [not_false_eq_true, ne_eq, not_exists, not_and, not_lt, implies_true]
    have H‚ÇÇ := mt IsNontrivial.exists_abv_lt_one H'
    classical
    rw [of_not_not <| (isNontrivial_iff_not_eq_trivial v‚ÇÅ).not.mp H‚ÇÅ,
      of_not_not <| (isNontrivial_iff_not_eq_trivial v‚ÇÇ).not.mp H‚ÇÇ]

open Filter Topology in
/-- Two absolute values on a field are equivalent if and only if they induce the same topology. -/
-- (This is Theorem 1.1 in the reference.)
lemma equiv_iff_isHomeomorph (v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù) :
    v‚ÇÅ ‚âà v‚ÇÇ ‚Üî IsHomeomorph ((WithAbs.equiv v‚ÇÇ).symm ‚àò WithAbs.equiv v‚ÇÅ) := by
  refine ‚ü®fun H ‚Ü¶ ?_, fun H ‚Ü¶ equiv_of_abv_lt_one_iff <| abv_lt_one_iff_of_isHomeomorph H‚ü©
  exact isHomeomorph_iff_exists_homeomorph.mpr
    ‚ü®homeomorph_of_equiv H, by simp [homeomorph_of_equiv]‚ü©

end equiv

end API

section complete

/-!
### The complete case

If `F` is complete with respect to an absolute value `v` and `F'/F` is a finite extension,
then there is a unique extension of `v` to an absolute value `v'` on `F'`, and `F'`
is complete with respect to `v'`.
-/

variable {F F' : Type*} [Field F] [Field F'] [Algebra F F'] [FiniteDimensional F F']
variable (v : AbsoluteValue F ‚Ñù) [CompleteSpace (WithAbs v)]

-- Lemma 6.1
private lemma lemma_6_1 :
    Subsingleton ({ v' : AbsoluteValue F' ‚Ñù // v'.restrict F = v }) := by
  by_cases hv : v.IsNontrivial
  ¬∑ refine subsingleton_iff.mpr fun v‚ÇÅ v‚ÇÇ ‚Ü¶ ?_
    have hr : v‚ÇÅ.val.restrict F = v‚ÇÇ.val.restrict F := by
      rw [v‚ÇÅ.prop, v‚ÇÇ.prop]
    ext1
    refine eq_of_equivalent_and_restrict_eq ?_ hr (by rwa [v‚ÇÅ.prop])
    sorry
  ¬∑ sorry

end complete

end AbsoluteValue

-- AbsoluteValue.toNormedField AbsoluteValue.Completion
