import Mathlib

/-!
# Estensions of absolute values

Let `F` be a field with an absolute value `v` on it, and let `F'` be a field extension of `F`
of finite degree.
The goal here is to show that there are finitely many possibilities to extend `v`
to an absolute value `v'` on `F'` and that
`‚àè v', v' x ^ localDegree F v' = v (Algebra.norm F' x)`,
where `localDegree F v'` is the degree of the extension of completions `F'_v' / F_v`.

We follow [Brian Conrad's notes}(http://math.stanford.edu/~conrad/676Page/handouts/ostrowski.pdf),
Sections 6 and 7.
-/

/-!
### Auxiliary lemmas
-/

section Mathlib.Analysis.SpecialFunctions.Pow.Real

namespace Real

lemma rpow_right_inj {x y z : ‚Ñù} (hx‚ÇÄ : 0 < x) (hx‚ÇÅ : x ‚â† 1) : x ^ y = x ^ z ‚Üî y = z := by
  refine ‚ü®fun H ‚Ü¶ ?_, fun H ‚Ü¶ by rw [H]‚ü©
  rcases hx‚ÇÅ.lt_or_lt with h | h
  ¬∑ exact le_antisymm ((rpow_le_rpow_left_iff_of_base_lt_one hx‚ÇÄ h).mp H.symm.le) <|
      (rpow_le_rpow_left_iff_of_base_lt_one hx‚ÇÄ h).mp H.le
  ¬∑ exact le_antisymm ((rpow_le_rpow_left_iff h).mp H.le) ((rpow_le_rpow_left_iff h).mp H.symm.le)

lemma rpow_pow_comm {x : ‚Ñù} (hx : 0 ‚â§ x) (y : ‚Ñù) (n : ‚Ñï) : (x ^ y) ^ n = (x ^ n) ^ y := by
  simp_rw [‚Üê rpow_natCast, ‚Üê rpow_mul hx, mul_comm y]

lemma rpow_zpow_comm {x : ‚Ñù} (hx : 0 ‚â§ x) (y : ‚Ñù) (n : ‚Ñ§) : (x ^ y) ^ n = (x ^ n) ^ y := by
  simp_rw [‚Üê rpow_intCast, ‚Üê rpow_mul hx, mul_comm y]

end Real

end Mathlib.Analysis.SpecialFunctions.Pow.Real

section Mathlib.Algebra.Order.Archimedean.Basic

variable {Œ± : Type*} [LinearOrderedSemifield Œ±] [Archimedean Œ±] [ExistsAddOfLE Œ±]

lemma exists_pow_btwn_of_lt_mul {a b c : Œ±} (h : a < b * c) (hb‚ÇÄ : 0 < b) (hb‚ÇÅ : b ‚â§ 1)
    (hc‚ÇÄ : 0 < c) (hc‚ÇÅ : c < 1) :
    ‚àÉ n : ‚Ñï, a < c ^ n ‚àß c ^ n < b := by
  have := exists_pow_lt_of_lt_one hb‚ÇÄ hc‚ÇÅ
  refine ‚ü®Nat.find this, h.trans_le ?_, Nat.find_spec this‚ü©
  by_contra! H
  have hn : Nat.find this ‚â† 0 := by
    intro hf
    simp only [hf, pow_zero] at H
    exact (H.trans <| Left.mul_lt_of_le_of_lt_one_of_pos hb‚ÇÅ hc‚ÇÅ hb‚ÇÄ).false
  rw [(Nat.succ_pred_eq_of_ne_zero hn).symm, pow_succ, mul_lt_mul_right hc‚ÇÄ] at H
  exact Nat.find_min this (Nat.sub_one_lt hn) H

lemma exists_zpow_btwn_of_lt_mul {a b c : Œ±} (h : a < b * c) (hb‚ÇÄ : 0 < b) (hc‚ÇÄ : 0 < c)
    (hc‚ÇÅ : c < 1) :
    ‚àÉ n : ‚Ñ§, a < c ^ n ‚àß c ^ n < b := by
  rcases le_or_lt a 0 with ha | ha
  ¬∑ obtain ‚ü®n, hn‚ü© := exists_pow_lt_of_lt_one hb‚ÇÄ hc‚ÇÅ
    exact ‚ü®n, ha.trans_lt (zpow_pos hc‚ÇÄ _), mod_cast hn‚ü©
  ¬∑ rcases le_or_lt b 1 with hb‚ÇÅ | hb‚ÇÅ
    ¬∑ obtain ‚ü®n, hn‚ü© := exists_pow_btwn_of_lt_mul h hb‚ÇÄ hb‚ÇÅ hc‚ÇÄ hc‚ÇÅ
      exact ‚ü®n, mod_cast hn‚ü©
    ¬∑ rcases lt_or_le a 1 with ha‚ÇÅ | ha‚ÇÅ
      ¬∑ refine ‚ü®0, ?_‚ü©
        rw [zpow_zero]
        exact ‚ü®ha‚ÇÅ, hb‚ÇÅ‚ü©
      ¬∑ have : b‚Åª¬π < a‚Åª¬π * c := by rwa [lt_inv_mul_iff‚ÇÄ' ha, inv_mul_lt_iff‚ÇÄ hb‚ÇÄ]
        obtain ‚ü®n, hn‚ÇÅ, hn‚ÇÇ‚ü© :=
          exists_pow_btwn_of_lt_mul this (inv_pos_of_pos ha) (inv_le_one_of_one_le‚ÇÄ ha‚ÇÅ) hc‚ÇÄ hc‚ÇÅ
        refine ‚ü®-n, ?_, ?_‚ü©
        ¬∑ rwa [lt_inv_comm‚ÇÄ (pow_pos hc‚ÇÄ n) ha, ‚Üê zpow_natCast, ‚Üê zpow_neg] at hn‚ÇÇ
        ¬∑ rwa [inv_lt_comm‚ÇÄ hb‚ÇÄ (pow_pos hc‚ÇÄ n), ‚Üê zpow_natCast, ‚Üê zpow_neg] at hn‚ÇÅ

end Mathlib.Algebra.Order.Archimedean.Basic

section Mathlib.Topology.Algebra.Module.FiniteDimension

variable  {ùïú E E' : Type*} [NontriviallyNormedField ùïú] [CompleteSpace ùïú] [AddCommGroup E]
  [Module ùïú E] [FiniteDimensional ùïú E] [TopologicalSpace E] [TopologicalAddGroup E]
  [ContinuousSMul ùïú E] [T2Space E] [AddCommGroup E'] [Module ùïú E'] [TopologicalSpace E']
  [TopologicalAddGroup E'] [ContinuousSMul ùïú E'] [T2Space E']

/-- The homeomorphism induced by a linear isomorphism between two finite-dimensional vector spaces
over a complete nontrivially normed field. -/
def FiniteDimensional.homeomorph_of_linearEquiv (f : E ‚âÉ‚Çó[ùïú] E') : E ‚âÉ‚Çú E' :=
  Homeomorph.mk f f.toLinearMap.continuous_of_finiteDimensional <| by
    have : FiniteDimensional ùïú E' := Module.Finite.equiv f
    exact f.symm.toLinearMap.continuous_of_finiteDimensional

end Mathlib.Topology.Algebra.Module.FiniteDimension

section Mathlib.Analysis.Normed.Ring.WithAbs

variable {R : Type*} [Ring R]

lemma AbsoluteValue.norm_eq_abv (v : AbsoluteValue R ‚Ñù) (x : WithAbs v) :
    ‚Äñx‚Äñ = v (WithAbs.equiv v x) := rfl

/- /-- The topology on `R` induced by an absolute value `v`. -/
noncomputable
def AbsoluteValue.topology (v : AbsoluteValue R ‚Ñù) : TopologicalSpace R :=
  letI _ := v.toNormedRing
  inferInstance -/

/- lemma AbsoluteValue.topology_coinduced_eq (v : AbsoluteValue R ‚Ñù) :
    letI t : TopologicalSpace (WithAbs v) := inferInstance
    v.topology.coinduced (WithAbs.equiv v).symm = t :=
  rfl -/

/- lemma AbsoluteValue.topology_eq_coinduced (v : AbsoluteValue R ‚Ñù) :
    letI t : TopologicalSpace (WithAbs v) := inferInstance
    v.topology = t.coinduced (WithAbs.equiv v) :=
  rfl -/

/- lemma TopologicalSpace.isHomeomorph_iff_eq_coinduced {X Y : Type*} (t : TopologicalSpace Y)
    [TopologicalSpace X] (e : X ‚âÉ Y) :
    IsHomeomorph e ‚Üî t = TopologicalSpace.coinduced e inferInstance := by
  rw [isHomeomorph_iff_exists_homeomorph]
  refine ‚ü®fun ‚ü®h, hh‚ü© ‚Ü¶ hh ‚ñ∏ (Homeomorph.coinduced_eq h).symm, fun H ‚Ü¶ ?_‚ü©
  exact ‚ü®e.toHomeomorph fun _ ‚Ü¶ by convert isOpen_coinduced.symm, rfl‚ü© -/

/- lemma TopologicalSpace.isHomeomorph_iff_induced_eq {X Y : Type*} (t : TopologicalSpace Y)
    [TopologicalSpace X] (e : X ‚âÉ Y) :
    IsHomeomorph e ‚Üî t.induced e = (inferInstance : TopologicalSpace X) := by
  rw [t.isHomeomorph_iff_eq_coinduced]
  refine ‚ü®fun H ‚Ü¶ ?_, fun H ‚Ü¶ ?_‚ü©
  ¬∑ rw [H, ‚Üê e.induced_symm, induced_compose, e.symm_comp_self]
    exact induced_id
  ¬∑ apply_fun TopologicalSpace.coinduced e at H
    rw [‚Üê H, ‚Üê e.induced_symm, induced_compose, e.self_comp_symm]
    exact induced_id.symm -/

/- /-- The homeomorphism between `WithAbs v` and the underlying ring with the induced topology. -/
def AbsoluteValue.homeomorph (v : AbsoluteValue R ‚Ñù) :
    @Homeomorph (WithAbs v) R inferInstance v.topology :=
  letI inst := v.topology
  (WithAbs.equiv v).toHomeomorph fun _ ‚Ü¶ isOpen_coinduced.symm -/

namespace WithAbs

/- lemma isHomeomorph_equiv_iff (t : TopologicalSpace R) (v : AbsoluteValue R ‚Ñù) :
    IsHomeomorph (equiv v) ‚Üî t = v.topology :=
  t.isHomeomorph_iff_eq_coinduced _ -/

@[simp]
theorem equiv_one (v : AbsoluteValue R ‚Ñù) : (WithAbs.equiv v) 1 = 1 := rfl

@[simp]
theorem equiv_symm_one (v : AbsoluteValue R ‚Ñù) : (WithAbs.equiv v).symm 1 = 1 := rfl

@[simp]
theorem equiv_pow {v : AbsoluteValue R ‚Ñù} (x : WithAbs v) (n : ‚Ñï) :
    (WithAbs.equiv v) (x ^ n) = (WithAbs.equiv v) x ^ n := rfl

@[simp]
theorem equiv_symm_pow {v : AbsoluteValue R ‚Ñù} (x : R) (n : ‚Ñï) :
    (WithAbs.equiv v).symm (x ^ n) = (WithAbs.equiv v).symm x ^ n := rfl

variable {F : Type*} [Field F]

@[simp]
theorem equiv_zpow {v : AbsoluteValue F ‚Ñù} (x : WithAbs v) (n : ‚Ñ§) :
    (WithAbs.equiv v) (x ^ n) = (WithAbs.equiv v) x ^ n := rfl

@[simp]
theorem equiv_symm_zpow {v : AbsoluteValue F ‚Ñù} (x : F) (n : ‚Ñ§) :
    (WithAbs.equiv v).symm (x ^ n) = (WithAbs.equiv v).symm x ^ n := rfl

variable {S : Type*}

instance commRing {R : Type*} [CommRing R] (v : AbsoluteValue R ‚Ñù) : CommRing (WithAbs v) :=
  inferInstanceAs <| CommRing R

instance module_left [AddCommGroup S] [Module R S] {v : AbsoluteValue R ‚Ñù} :
    Module (WithAbs v) S :=
  inferInstanceAs <| Module R S

instance module_right [Ring S] [Module R S] (v : AbsoluteValue S ‚Ñù) : Module R (WithAbs v) :=
  inferInstanceAs <| Module R S

instance algebra_left {R S : Type*} [CommRing R] [Ring S] [Algebra R S] (v : AbsoluteValue R ‚Ñù) :
    Algebra (WithAbs v) S :=
  inferInstanceAs <| Algebra R S

instance algebra_right {R S : Type*} [CommRing R] [Ring S] [Algebra R S] (v : AbsoluteValue S ‚Ñù) :
    Algebra R (WithAbs v) :=
  inferInstanceAs <| Algebra R S

instance fd_left [AddCommGroup S] [Module F S] [FiniteDimensional F S] {v : AbsoluteValue F ‚Ñù} :
    FiniteDimensional (WithAbs v) S :=
  inferInstanceAs <| FiniteDimensional F S

instance fd_right [Ring S] [Module F S] [FiniteDimensional F S] (v : AbsoluteValue S ‚Ñù) :
    FiniteDimensional F (WithAbs v) :=
  inferInstanceAs <| FiniteDimensional F S

@[simp]
lemma equiv_smul [Ring S] [Module R S] {v : AbsoluteValue S ‚Ñù} (c : R) (x : WithAbs v) :
    WithAbs.equiv v (c ‚Ä¢ x) = c ‚Ä¢ WithAbs.equiv v x := rfl

@[simp]
lemma equiv_symm_smul [Ring S] [Module R S] {v : AbsoluteValue S ‚Ñù} (c : R) (x : S) :
    (WithAbs.equiv v).symm (c ‚Ä¢ x) = c ‚Ä¢ (WithAbs.equiv v).symm x := rfl

@[simp]
lemma equiv_apply_algebraMap {R S : Type*} [CommRing R] [Ring S] [Algebra R S]
    {v : AbsoluteValue R ‚Ñù} (v' : AbsoluteValue S ‚Ñù) (x : WithAbs v) :
    WithAbs.equiv v' (algebraMap (WithAbs v) (WithAbs v') x) =
      algebraMap R S (WithAbs.equiv v x) :=
  rfl

end WithAbs

end Mathlib.Analysis.Normed.Ring.WithAbs

namespace AbsoluteValue

/-!
### API lemmas for absolute values
-/

section API

variable {R : Type*} [Semiring R] {S : Type*} [OrderedSemiring S]

section nontrivial

/-- An absolute value on a semiring `R` without zero divisors is *nontrivial* if it takes
a value `‚â† 1` on a nonzero element.

This has the advantage over `v ‚â† .trivial` that it does not require decidability
of `¬∑ = 0` in `R`. -/
def IsNontrivial (v : AbsoluteValue R S) : Prop :=
  ‚àÉ x ‚â† 0, v x ‚â† 1

lemma isNontrivial_iff_not_eq_trivial [DecidableEq R] [NoZeroDivisors R] [Nontrivial S]
    (v : AbsoluteValue R S) :
    v.IsNontrivial ‚Üî v ‚â† .trivial := by
  refine ‚ü®fun ‚ü®x, hx‚ÇÄ, hx‚ÇÅ‚ü© h ‚Ü¶ hx‚ÇÅ <| h.symm ‚ñ∏ trivial_apply hx‚ÇÄ, fun H ‚Ü¶ ?_‚ü©
  contrapose! H
  simp only [IsNontrivial] at H
  push_neg at H
  ext1 x
  rcases eq_or_ne x 0 with rfl | hx
  ¬∑ simp
  ¬∑ simp [H, hx]

lemma not_isNontrivial_iff (v : AbsoluteValue R S) :
    ¬¨ v.IsNontrivial ‚Üî ‚àÄ x ‚â† 0, v x = 1 := by
  simp only [IsNontrivial]
  push_neg
  rfl

@[simp]
lemma not_isNontrivial_apply {v : AbsoluteValue R S} (hv : ¬¨ v.IsNontrivial) {x : R} (hx : x ‚â† 0) :
    v x = 1 :=
  v.not_isNontrivial_iff.mp hv _ hx

lemma IsNontrivial.exists_abv_gt_one {F : Type*} [Field F] {v : AbsoluteValue F ‚Ñù}
    (h : v.IsNontrivial) :
    ‚àÉ x, 1 < v x := by
  obtain ‚ü®x, hx‚ÇÄ, hx‚ÇÅ‚ü© := h
  rcases hx‚ÇÅ.lt_or_lt with h | h
  ¬∑ refine ‚ü®x‚Åª¬π, ?_‚ü©
    rw [map_inv‚ÇÄ]
    exact (one_lt_inv‚ÇÄ <| v.pos hx‚ÇÄ).mpr h
  ¬∑ exact ‚ü®x, h‚ü©

lemma IsNontrivial.exists_abv_lt_one {F : Type*} [Field F] {v : AbsoluteValue F ‚Ñù}
    (h : v.IsNontrivial) :
    ‚àÉ x ‚â† 0, v x < 1 := by
  obtain ‚ü®y, hy‚ü© := h.exists_abv_gt_one
  have hy‚ÇÄ := v.ne_zero_iff.mp <| (zero_lt_one.trans hy).ne'
  refine ‚ü®y‚Åª¬π, inv_ne_zero hy‚ÇÄ, ?_‚ü©
  rw [map_inv‚ÇÄ]
  exact (inv_lt_one‚ÇÄ <| v.pos hy‚ÇÄ).mpr hy

end nontrivial

section restrict

variable [Nontrivial R] (F : Type*) [Field F] [Algebra F R]

/-- The restriction to a field `F` of an absolute value on an `F`-algebra `R`. -/
def restrict (v : AbsoluteValue R S) : AbsoluteValue F S :=
  v.comp (RingHom.injective (algebraMap F R))

variable {F}

@[simp]
lemma apply_algebraMap (v : AbsoluteValue R S) (x : F) :
    v (algebraMap F R x) = v.restrict F x := rfl

lemma isNontrivial_of_restrict (v : AbsoluteValue R S) (h : (v.restrict F).IsNontrivial) :
    v.IsNontrivial := by
  obtain ‚ü®x, hx‚ÇÄ, hx‚ÇÅ‚ü© := h
  exact ‚ü®algebraMap F R x, (map_ne_zero _).mpr hx‚ÇÄ, hx‚ÇÅ‚ü©

/-- Two equivalent extensions from `F` to `R` of the same nontrivial absolute value
must be equal. -/
lemma eq_of_equivalent_and_restrict_eq {v‚ÇÅ v‚ÇÇ : AbsoluteValue R ‚Ñù} (h‚ÇÅ : v‚ÇÅ ‚âà v‚ÇÇ)
    (h‚ÇÇ : v‚ÇÅ.restrict F = v‚ÇÇ.restrict F) (h‚ÇÉ : (v‚ÇÅ.restrict F).IsNontrivial) :
    v‚ÇÅ = v‚ÇÇ := by
  obtain ‚ü®c, hc‚ÇÄ, hc‚ÇÅ‚ü© := h‚ÇÅ
  obtain ‚ü®x, hx‚ü© := h‚ÇÉ.exists_abv_gt_one
  suffices c = 1 by simpa [this] using hc‚ÇÅ
  have H : v‚ÇÅ (algebraMap F R x) = v‚ÇÇ (algebraMap F R x) := by
    simp only [apply_algebraMap, h‚ÇÇ]
  rw [‚Üê congrFun hc‚ÇÅ, apply_algebraMap, eq_comm] at H
  nth_rewrite 2 [‚Üê Real.rpow_one (v‚ÇÅ.restrict F x)] at H
  exact (Real.rpow_right_inj (zero_lt_one.trans hx) hx.ne').mp H

/-- The extension of the trivial absolute value on a field `F` to a finite-dimensional `F`-algebra
that is a division ring is trivial. -/
lemma trivial_of_finiteDimensional_of_restrict {R : Type*} [DivisionRing R] [Nontrivial R]
    [Algebra F R] [FiniteDimensional F R] {v : AbsoluteValue F ‚Ñù} {v' : AbsoluteValue R ‚Ñù}
    (h : v'.restrict F = v) (hv : ¬¨ v.IsNontrivial) :
    ¬¨ v'.IsNontrivial := by
  rw [not_isNontrivial_iff] at hv ‚ä¢
  suffices key : ‚àÄ {x} (hx : x ‚â† 0), v' x ‚â§ 1 by
    intro x hx
    refine le_antisymm (key hx) ?_
    rw [‚Üê inv_inv x, map_inv‚ÇÄ, one_le_inv‚ÇÄ <| v'.pos <| inv_ne_zero hx]
    exact key <| inv_ne_zero hx
  intro x hx‚ÇÄ
  by_contra! hx
  let n := Module.finrank F R
  have hn‚ÇÅ : 0 < n := Module.finrank_pos
  obtain ‚ü®m, hm‚ü© : ‚àÉ m : ‚Ñï, n < v' (x ^ m) := by
    simpa only [v'.map_pow] using pow_unbounded_of_one_lt _ hx
  let p := (LinearMap.mulLeft F (x ^ m)).charpoly
  have hp‚ÇÅ : p.Monic := LinearMap.charpoly_monic _
  have : p.aeval (x ^ m) = 0 := by
    have : p.aeval (LinearMap.mulLeft F (x ^ m)) = 0 := LinearMap.aeval_self_charpoly _
    apply_fun (¬∑ 1) at this
    simp only [Polynomial.aeval_endomorphism, LinearMap.pow_mulLeft, LinearMap.mulLeft_apply,
      mul_one, LinearMap.zero_apply] at this
    rw [Polynomial.sum_eq_of_subset _ (p := p) (by simp) Polynomial.supp_subset_range_natDegree_succ] at this
    rwa [Polynomial.aeval_eq_sum_range]
  have hpn : p.natDegree = n := LinearMap.charpoly_natDegree _
  rw [‚Üê p.eraseLead_add_C_mul_X_pow, Polynomial.aeval_add, Polynomial.aeval_eq_sum_range,
    add_eq_zero_iff_eq_neg'] at this
  simp only [hp‚ÇÅ, Polynomial.Monic.leadingCoeff, map_one, one_mul, map_pow,
    Polynomial.aeval_X] at this
  have hxm : x ^ m ‚â† 0 := pow_ne_zero m hx‚ÇÄ
  apply_fun (¬∑ * (x ^ m) ^ (-n + 1 : ‚Ñ§)) at this
  rw [hpn, ‚Üê zpow_natCast, ‚Üê zpow_add' (.inl hxm), add_neg_cancel_left, zpow_one, neg_mul] at this
  have pel : p.eraseLead.natDegree + 1 ‚â§ n := by
    rw [‚Üê hpn]
    by_cases hnc : p.nextCoeff = 0
    ¬∑ have := Polynomial.natDegree_eraseLead_le_of_nextCoeff_eq_zero hnc
      omega
    ¬∑ exact (Polynomial.natDegree_eraseLead_add_one hnc).le
  rw [Finset.sum_mul] at this
  conv at this =>
    enter [2, 1, 2, i]
    rw [smul_mul_assoc, ‚Üê zpow_natCast, ‚Üê zpow_add' (.inl hxm)]
  refine (hm.trans_le ?_).false
  rw [this, v'.map_neg]
  have pel' : (p.eraseLead.natDegree + 1 : ‚Ñù) ‚â§ n := mod_cast pel
  have help (N : ‚Ñï) : (N + 1 : ‚Ñù) = ‚àë i ‚àà Finset.range (N + 1), 1 := by simp
  refine (v'.sum_le ..).trans (LE.le.trans ?_ pel')
  conv_rhs => rw [help]
  refine Finset.sum_le_sum fun i hi ‚Ü¶ ?_
  simp only [Algebra.smul_def]
  rw [v'.map_mul, apply_algebraMap, h]
  rcases eq_or_ne (p.eraseLead.coeff i) 0 with H | H
  ¬∑ simp [H]
  ¬∑ simp only [ne_eq, H, not_false_eq_true, hv, map_zpow‚ÇÄ, AbsoluteValue.map_pow, one_mul]
    refine zpow_le_one_of_nonpos‚ÇÄ (one_le_pow‚ÇÄ hx.le) ?_
    simp only [Finset.mem_range] at hi
    omega

variable {F' : Type*} [Ring F'] [Algebra F F'] {v : AbsoluteValue F ‚Ñù}

lemma algebraMap_withAbs_apply (v' : AbsoluteValue F' ‚Ñù) (x : WithAbs v) :
    algebraMap (WithAbs v) (WithAbs v') x =
      (WithAbs.equiv v').symm (algebraMap F F' (WithAbs.equiv v x)) := by
  rw [‚Üê WithAbs.equiv_apply_algebraMap v', Equiv.symm_apply_apply]

variable [Nontrivial F']

@[simp]
lemma apply_algebraMap_withAbs {v' : AbsoluteValue F' ‚Ñù} (h : v'.restrict F = v) (x : WithAbs v) :
    v' (WithAbs.equiv v' (algebraMap (WithAbs v) (WithAbs v') x)) = v (WithAbs.equiv v x) := by
  rw [WithAbs.equiv_apply_algebraMap, apply_algebraMap, h]

@[fun_prop]
lemma continuous_algebraMap {v' : AbsoluteValue F' ‚Ñù} (h : v'.restrict F = v) :
    Continuous <| algebraMap (WithAbs v) (WithAbs v') := by
  rw [continuous_iff_continuous_dist]
  conv => enter [1, x]; simp only [algebraMap_withAbs_apply v']
  simp_rw [dist_eq_norm_sub, norm_eq_abv, WithAbs.equiv_sub, Equiv.apply_symm_apply, ‚Üê map_sub,
    apply_algebraMap, h, ‚Üê WithAbs.equiv_sub, ‚Üê norm_eq_abv, ‚Üê dist_eq_norm_sub]
  exact continuous_dist

instance continuousSMul {v' : AbsoluteValue F' ‚Ñù} [Fact <| v'.restrict F = v] :
    ContinuousSMul (WithAbs v) (WithAbs v') where
  continuous_smul := (continuous_algebraMap_iff_smul _ _).mp <| continuous_algebraMap Fact.out

end restrict

/-!
### Two absolute values are equivalent iff they induce the same topology

This is Theorem 1.1 in Conrad's notes. We split the interesting direction (same topology
implies equivalence) into two steps:

* `AbsoluteValue.abv_lt_one_iff_of_isHomeomorph`: if `v‚ÇÅ` and `v‚ÇÇ` induce the same
  topology, then `{x | v‚ÇÅ x < 1} = {x | v‚ÇÇ x < 1}`.

* `AbsoluteValue.equiv_of_abv_lt_one_iff`: if `{x | v‚ÇÅ x < 1} = {x | v‚ÇÇ x < 1}`,
  then `v‚ÇÅ ‚âà v‚ÇÇ`.

The main result is `AbsoluteValue.equiv_iff_isHomeomorph`.
-/

section withAbs

variable {R : Type*} [Ring R]

open Filter Topology in
/-- The sequence of `n`th powers of an element `x` converges to zero in the topology induced
by an absolute value `v` if and only if `v x < 1`. -/
lemma tendsto_nhds_zero_iff_abv_lt_one [Nontrivial R] (v : AbsoluteValue R ‚Ñù) (x : R) :
    Tendsto (fun n : ‚Ñï ‚Ü¶ (WithAbs.equiv v).symm x ^ n) atTop (ùìù 0) ‚Üî v x < 1 := by
  refine ‚ü®fun H ‚Ü¶ ?_, fun H ‚Ü¶ ?_‚ü©
  ¬∑ rw [Metric.tendsto_atTop] at H
    simp only [dist_zero_right, norm_eq_abv, WithAbs.equiv_pow, Equiv.apply_symm_apply] at H
    obtain ‚ü®n, hn‚ü© := H 1 zero_lt_one
    replace hn := hn n le_rfl
    rw [map_pow] at hn
    refine (pow_lt_one_iff_of_nonneg (v.nonneg x) ?_).mp hn
    rintro rfl
    simp at hn
  ¬∑ refine tendsto_pow_atTop_nhds_zero_of_norm_lt_one ?_
    rwa [norm_eq_abv, Equiv.apply_symm_apply]

variable {F : Type*} [Field F]

/-- An absolute value `v` induces the discrete topology on a field `F` if and only if
`v` is trivial. -/
lemma discrete_iff_not_isNontrivial {v : AbsoluteValue F ‚Ñù} :
    DiscreteTopology (WithAbs v) ‚Üî ¬¨ v.IsNontrivial := by
  rw [discreteTopology_iff_isOpen_singleton_zero, Metric.isOpen_singleton_iff]
  refine ‚ü®fun ‚ü®Œµ, hŒµ‚ÇÄ, hŒµ‚ÇÅ‚ü© ‚Ü¶ ?_, fun H ‚Ü¶ ‚ü®1 / 2, one_half_pos, fun y hy ‚Ü¶ ?_‚ü©‚ü©
  ¬∑ simp only [dist_zero_right, norm_eq_abv] at hŒµ‚ÇÅ
    rw [not_isNontrivial_iff]
    intro x hx‚ÇÄ
    by_contra! h
    have H {y : F} (hy‚ÇÄ : y ‚â† 0) (hy : v y < 1) : False := by
      obtain ‚ü®n, hn‚ü© := exists_pow_lt_of_lt_one hŒµ‚ÇÄ hy
      rw [‚Üê v.map_pow] at hn
      exact hy‚ÇÄ <| pow_eq_zero <| hŒµ‚ÇÅ _ hn
    rcases h.lt_or_lt with h | h
    ¬∑ exact H hx‚ÇÄ h
    ¬∑ replace h := inv_lt_one_of_one_lt‚ÇÄ h
      rw [‚Üê map_inv‚ÇÄ] at h
      exact H (inv_ne_zero hx‚ÇÄ) h
  ¬∑ rw [dist_zero_right, norm_eq_abv] at hy
    rcases eq_or_ne y 0 with rfl | hy‚ÇÄ
    ¬∑ rfl
    ¬∑ have : WithAbs.equiv v y ‚â† 0 := hy‚ÇÄ
      simp only [H, not_false_eq_true, ne_eq, this, not_isNontrivial_apply] at hy
      contrapose! hy
      exact one_half_lt_one.le

variable {F : Type*} [Field F]

/-- A field with a nontrivial absolute value on it is a nontrivially normed field. -/
noncomputable
def IsNontrivial.nontriviallyNormedField {v : AbsoluteValue F ‚Ñù} (hv : v.IsNontrivial) :
    NontriviallyNormedField (WithAbs v) where
  __ := WithAbs.normedField v
  non_trivial := hv.exists_abv_gt_one

noncomputable
instance _root_.WihAbs.nontriviallynormedField {v : AbsoluteValue F ‚Ñù} [Fact <| v.IsNontrivial] :
    NontriviallyNormedField (WithAbs v) :=
  (Fact.out : v.IsNontrivial).nontriviallyNormedField

end withAbs

section equiv

variable {R : Type*} [Ring R]

lemma equiv_iff_eq_of_not_isNontrivial {v‚ÇÅ v‚ÇÇ : AbsoluteValue R ‚Ñù} (h : ¬¨ v‚ÇÅ.IsNontrivial) :
    v‚ÇÅ ‚âà v‚ÇÇ ‚Üî v‚ÇÅ = v‚ÇÇ := by
  refine ‚ü®fun ‚ü®c, hc‚ÇÄ, hc‚ÇÅ‚ü© ‚Ü¶ ?_, fun H ‚Ü¶ H ‚ñ∏ equiv_refl v‚ÇÇ‚ü©
  ext1 x
  rcases eq_or_ne x 0 with rfl | hx
  ¬∑ simp
  ¬∑ simp [h, hx, ‚Üê hc‚ÇÅ]

lemma eq_of_not_isNontrivial {v‚ÇÅ v‚ÇÇ : AbsoluteValue R ‚Ñù} (h‚ÇÅ : ¬¨ v‚ÇÅ.IsNontrivial)
    (h‚ÇÇ : ¬¨ v‚ÇÇ.IsNontrivial) :
    v‚ÇÅ = v‚ÇÇ := by
  ext1 x
  rcases eq_or_ne x 0 with rfl | hx
  ¬∑ simp
  ¬∑ simp [h‚ÇÅ, h‚ÇÇ, hx]

variable {F : Type*} [Field F]

/-- The identity map of `F` as a map between normed field structures on `F` induced by two
absolute values- -/
abbrev _root_.WithAbs.equiv‚ÇÇ (v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù) : WithAbs v‚ÇÅ ‚âÉ WithAbs v‚ÇÇ :=
  (WithAbs.equiv v‚ÇÅ).trans (WithAbs.equiv v‚ÇÇ).symm

private lemma continuous_withAbs_equiv‚ÇÇ {v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù} (h : v‚ÇÅ ‚âà v‚ÇÇ) :
    Continuous (WithAbs.equiv‚ÇÇ v‚ÇÅ v‚ÇÇ) := by
  obtain ‚ü®c, hc‚ÇÄ, hc‚ÇÅ‚ü© := h
  rw [Metric.continuous_iff]
  simp only [dist_eq_norm_sub, norm_eq_abv, WithAbs.equiv‚ÇÇ, Equiv.trans_apply,
    Equiv.apply_symm_apply]
  intro x Œµ hŒµ‚ÇÄ
  conv => enter [1, Œ¥, 2, y, 2, 1]; rw [‚Üê WithAbs.equiv_symm_sub, ‚Üê WithAbs.equiv_sub]
  refine ‚ü®Œµ ^ (1 / c), Real.rpow_pos_of_pos hŒµ‚ÇÄ _, fun y h ‚Ü¶ ?_‚ü©
  let x' := WithAbs.equiv v‚ÇÅ x
  let y' := WithAbs.equiv v‚ÇÅ y
  have hx : x = (WithAbs.equiv v‚ÇÅ).symm x' := rfl
  have hy : y = (WithAbs.equiv v‚ÇÅ).symm y' := rfl
  rw [hx, hy, ‚Üê WithAbs.equiv_symm_sub, Equiv.apply_symm_apply] at h
  rw [Equiv.apply_symm_apply, WithAbs.equiv_sub, hx, hy]
  simp only [Equiv.apply_symm_apply, ‚Üê hc‚ÇÅ]
  calc v‚ÇÅ (y' - x') ^ c
  _ < (Œµ ^ (1 / c)) ^ c := by gcongr
  _ = Œµ := by rw [‚Üê Real.rpow_mul hŒµ‚ÇÄ.le, one_div_mul_cancel hc‚ÇÄ.ne', Real.rpow_one]

/-- Two equivalent absolute values on a field `F` induce the same topology.
This defines the identity map `F ‚Üí F` as a homeomorphism between the two topologies. -/
def homeomorph_of_equiv {v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù} (h : v‚ÇÅ ‚âà v‚ÇÇ) : WithAbs v‚ÇÅ ‚âÉ‚Çú WithAbs v‚ÇÇ where
  toFun := (WithAbs.equiv v‚ÇÇ).symm ‚àò WithAbs.equiv v‚ÇÅ
  invFun := (WithAbs.equiv v‚ÇÅ).symm ‚àò WithAbs.equiv v‚ÇÇ
  left_inv _ := rfl
  right_inv _ := rfl
  continuous_toFun := continuous_withAbs_equiv‚ÇÇ h
  continuous_invFun := continuous_withAbs_equiv‚ÇÇ (Setoid.symm h)

open Filter Topology in
/-- If two absolute values on a field `F` induce the same topology and an element of `F` has
absolute value less than one with respect to the first absolute value, then also with respect
to the second absolute value. -/
lemma abv_lt_one_of_isHomeomorph {v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù}
    (h : IsHomeomorph (WithAbs.equiv‚ÇÇ v‚ÇÅ v‚ÇÇ)) {x : F} (hx : v‚ÇÅ x < 1) :
    v‚ÇÇ x < 1 := by
  let x‚ÇÅ : WithAbs v‚ÇÅ := (WithAbs.equiv v‚ÇÅ).symm x
  let x‚ÇÇ : WithAbs v‚ÇÇ := (WithAbs.equiv v‚ÇÇ).symm x
  have hx‚ÇÅ : Tendsto (fun n : ‚Ñï ‚Ü¶ x‚ÇÅ ^ n) atTop (ùìù 0) :=
    (tendsto_nhds_zero_iff_abv_lt_one v‚ÇÅ x).mpr hx
  have hx‚ÇÇ : Tendsto (fun n : ‚Ñï ‚Ü¶ x‚ÇÇ ^ n) atTop (ùìù 0) := by
    have (n : ‚Ñï) : x‚ÇÇ ^ n = (WithAbs.equiv‚ÇÇ v‚ÇÅ v‚ÇÇ) (x‚ÇÅ ^ n) := rfl
    simp_rw [this]
    refine Tendsto.comp (g := (WithAbs.equiv‚ÇÇ v‚ÇÅ v‚ÇÇ)) ?_ hx‚ÇÅ
    exact Continuous.tendsto h.continuous 0
  exact (tendsto_nhds_zero_iff_abv_lt_one v‚ÇÇ x).mp hx‚ÇÇ

/--If two absolute values on a field `F` induce the same topology, then the sets of elements
of absolute value less than one agree for both absolute values. -/
lemma abv_lt_one_iff_of_isHomeomorph {v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù}
    (h : IsHomeomorph (WithAbs.equiv‚ÇÇ v‚ÇÅ v‚ÇÇ)) (x : F) :
    v‚ÇÅ x < 1 ‚Üî v‚ÇÇ x < 1 := by
  refine ‚ü®abv_lt_one_of_isHomeomorph h, abv_lt_one_of_isHomeomorph ?_‚ü©
  obtain ‚ü®œÜ, hœÜ‚ü© := isHomeomorph_iff_exists_homeomorph.mp h
  refine isHomeomorph_iff_exists_homeomorph.mpr ‚ü®œÜ.symm, ?_‚ü©
  apply_fun (fun f ‚Ü¶ (œÜ.symm ‚àò f) ‚àò (WithAbs.equiv v‚ÇÅ).symm ‚àò WithAbs.equiv v‚ÇÇ) at hœÜ
  simp only [Homeomorph.symm_comp_self, CompTriple.comp_eq] at hœÜ
  rw [Equiv.coe_trans, hœÜ]
  ext1 x
  simp

open Real in
/-- If the sets of elements of absolute value less than one agree for two absolute values
on a field `F`, then the two absolute values are equivalent. -/
lemma equiv_of_abv_lt_one_iff {v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù} (h : ‚àÄ x, v‚ÇÅ x < 1 ‚Üî v‚ÇÇ x < 1) :
    v‚ÇÅ ‚âà v‚ÇÇ := by
  by_cases H : ‚àÉ x ‚â† 0, v‚ÇÅ x < 1
  ¬∑ obtain ‚ü®c, hc‚ÇÄ, hc‚ÇÅ‚ü© := H
    have hc‚ÇÇ := (h c).mp hc‚ÇÅ
    have hcv‚ÇÅ := v‚ÇÅ.pos hc‚ÇÄ
    have hcv‚ÇÅ' := v‚ÇÅ.nonneg c
    have hcv‚ÇÇ := v‚ÇÇ.pos hc‚ÇÄ
    let e := logb (v‚ÇÅ c) (v‚ÇÇ c)
    have he : v‚ÇÅ c ^ e = v‚ÇÇ c := rpow_logb hcv‚ÇÅ hc‚ÇÅ.ne hcv‚ÇÇ
    have he‚ÇÄ : 0 < e := logb_pos_of_base_lt_one hcv‚ÇÅ hc‚ÇÅ hcv‚ÇÇ hc‚ÇÇ
    have key (y : F) : ¬¨ v‚ÇÅ y ^ e < v‚ÇÇ y := by
      intro hy
      have hyv‚ÇÅ := v‚ÇÅ.nonneg y
      have hy‚ÇÄ : y ‚â† 0 := v‚ÇÇ.ne_zero_iff.mp ((rpow_nonneg hyv‚ÇÅ e).trans_lt hy).ne'
      obtain ‚ü®n, hn‚ü© := exists_pow_lt_of_lt_one hcv‚ÇÇ <| (div_lt_one (v‚ÇÇ.pos hy‚ÇÄ)).mpr hy
      obtain ‚ü®m, hm‚ÇÅ, hm‚ÇÇ‚ü© : ‚àÉ m : ‚Ñ§, v‚ÇÅ (y ^ n) ^ e < v‚ÇÇ c ^ m ‚àß v‚ÇÇ c ^ m < v‚ÇÇ (y ^ n) := by
        have hv‚ÇÇy := v‚ÇÇ.pos <| pow_ne_zero n hy‚ÇÄ
        refine exists_zpow_btwn_of_lt_mul ?_ hv‚ÇÇy hcv‚ÇÇ hc‚ÇÇ
        rwa [div_pow, ‚Üê v‚ÇÇ.map_pow, div_lt_iff‚ÇÄ hv‚ÇÇy, rpow_pow_comm hyv‚ÇÅ,
          mul_comm, ‚Üê v‚ÇÅ.map_pow] at hn
      rw [‚Üê he, rpow_zpow_comm hcv‚ÇÅ', rpow_lt_rpow_iff (v‚ÇÅ.nonneg _) (zpow_nonneg hcv‚ÇÅ' m) he‚ÇÄ,
        ‚Üê div_lt_one (zpow_pos hcv‚ÇÅ m), ‚Üê map_zpow‚ÇÄ, ‚Üê map_div‚ÇÄ] at hm‚ÇÅ
      rw [‚Üê map_zpow‚ÇÄ, ‚Üê one_lt_div (v‚ÇÇ.pos (by exact zpow_ne_zero m hc‚ÇÄ)), ‚Üê map_div‚ÇÄ] at hm‚ÇÇ
      exact (h _).mp hm‚ÇÅ |>.trans hm‚ÇÇ |>.false
    simp only [not_lt] at key
    refine ‚ü®e, he‚ÇÄ, funext fun x ‚Ü¶ ?_‚ü©
    rcases eq_or_ne x 0 with rfl | hx‚ÇÄ
    ¬∑ simpa only [AbsoluteValue.map_zero, le_refl] using zero_rpow he‚ÇÄ.ne'
    ¬∑ refine le_antisymm ?_ (key x)
      have := key x‚Åª¬π
      simp only [map_inv‚ÇÄ, inv_rpow (v‚ÇÅ.nonneg _)] at this
      rwa [inv_le_inv‚ÇÄ (v‚ÇÇ.pos hx‚ÇÄ) <| rpow_pos_of_pos (v‚ÇÅ.pos hx‚ÇÄ) e] at this
  ¬∑ -- both are trivial
    have H‚ÇÅ := mt IsNontrivial.exists_abv_lt_one H
    have H' : ¬¨‚àÉ x, x ‚â† 0 ‚àß v‚ÇÇ x < 1 := by
      simp_all only [not_false_eq_true, ne_eq, not_exists, not_and, not_lt, implies_true]
    have H‚ÇÇ := mt IsNontrivial.exists_abv_lt_one H'
    classical
    rw [of_not_not <| (isNontrivial_iff_not_eq_trivial v‚ÇÅ).not.mp H‚ÇÅ,
      of_not_not <| (isNontrivial_iff_not_eq_trivial v‚ÇÇ).not.mp H‚ÇÇ]

open Filter Topology in
/-- Two absolute values on a field are equivalent if and only if they induce the same topology. -/
-- (This is Theorem 1.1 in the reference.)
lemma equiv_iff_isHomeomorph (v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù) :
    v‚ÇÅ ‚âà v‚ÇÇ ‚Üî IsHomeomorph (WithAbs.equiv‚ÇÇ v‚ÇÅ v‚ÇÇ) := by
  refine ‚ü®fun H ‚Ü¶ ?_, fun H ‚Ü¶ equiv_of_abv_lt_one_iff <| abv_lt_one_iff_of_isHomeomorph H‚ü©
  exact isHomeomorph_iff_exists_homeomorph.mpr
    ‚ü®homeomorph_of_equiv H, by simp [homeomorph_of_equiv]‚ü©

/- /-- Two absolute values on a field are equivalent if and only if they induce the same topology. -/
lemma equiv_iff_same_topology (v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù) :
    v‚ÇÅ ‚âà v‚ÇÇ ‚Üî v‚ÇÅ.topology = v‚ÇÇ.topology := by
  rw [equiv_iff_isHomeomorph, v‚ÇÅ.topology_eq_coinduced, v‚ÇÇ.topology_eq_coinduced, WithAbs.equiv‚ÇÇ,
   TopologicalSpace.isHomeomorph_iff_eq_coinduced]
  refine ‚ü®fun H ‚Ü¶ ?_, fun H ‚Ü¶ ?_‚ü©
  ¬∑ apply_fun TopologicalSpace.coinduced (WithAbs.equiv v‚ÇÇ) at H
    rw [coinduced_compose, Equiv.coe_trans, ‚Üê Function.comp_assoc] at H
    simpa only [Equiv.self_comp_symm, CompTriple.comp_eq, Equiv.induced_symm] using H.symm
  ¬∑ apply_fun TopologicalSpace.coinduced (WithAbs.equiv v‚ÇÇ).symm at H
    rw [coinduced_compose, coinduced_compose] at H
    simpa only [Equiv.symm_comp_self, coinduced_id] using H.symm -/

end equiv

end API

section complete

/-!
### The complete case

If `F` is complete with respect to an absolute value `v` and `F'/F` is a finite extension,
then there is a unique extension of `v` to an absolute value `v'` on `F'`, and `F'`
is complete with respect to `v'`.
-/

variable {F F' : Type*} [Field F] [Field F'] [Algebra F F'] [FiniteDimensional F F']
variable (v : AbsoluteValue F ‚Ñù) [CompleteSpace (WithAbs v)]

/- lemma _root_.WithAbs.complete [CompleteSpace (WithAbs v)] [FiniteDimensional F F']
    [Fact v.IsNontrivial] (v' : AbsoluteValue F' ‚Ñù) [Fact <| v'.restrict F = v] :
    CompleteSpace (WithAbs v') :=
  FiniteDimensional.complete (WithAbs v) (WithAbs v') -/

variable {v} in
private lemma isEquiv_of_restrict_eq {v‚ÇÅ v‚ÇÇ : AbsoluteValue F' ‚Ñù} (h : v.IsNontrivial)
    (h‚ÇÅ : v‚ÇÅ.restrict F = v) (h‚ÇÇ : v‚ÇÇ.restrict F = v) :
    v‚ÇÅ ‚âà v‚ÇÇ := by
  rw [equiv_iff_isHomeomorph]
  let e : WithAbs v‚ÇÅ ‚âÉ‚Çó[WithAbs v] WithAbs v‚ÇÇ := {
    toFun := WithAbs.equiv‚ÇÇ v‚ÇÅ v‚ÇÇ
    map_add' := by simp
    map_smul' := by simp
    invFun := WithAbs.equiv‚ÇÇ v‚ÇÇ v‚ÇÅ
    left_inv x := by simp
    right_inv x := by simp
  }
  have : Fact v.IsNontrivial := ‚ü®h‚ü©
  have : Fact <| v‚ÇÅ.restrict F = v := ‚ü®h‚ÇÅ‚ü©
  have : Fact <| v‚ÇÇ.restrict F = v := ‚ü®h‚ÇÇ‚ü©
  exact isHomeomorph_iff_exists_homeomorph.mpr ‚ü®FiniteDimensional.homeomorph_of_linearEquiv e, rfl‚ü©

-- Lemma 6.1, "at most one"
private lemma lemma_6_1_a : Subsingleton ({ v' : AbsoluteValue F' ‚Ñù // v'.restrict F = v }) := by
  refine subsingleton_iff.mpr fun v‚ÇÅ v‚ÇÇ ‚Ü¶ ?_
  by_cases hv : v.IsNontrivial
  ¬∑ have hr : v‚ÇÅ.val.restrict F = v‚ÇÇ.val.restrict F := by rw [v‚ÇÅ.prop, v‚ÇÇ.prop]
    ext1
    refine eq_of_equivalent_and_restrict_eq ?_ hr (by rwa [v‚ÇÅ.prop])
    exact isEquiv_of_restrict_eq hv v‚ÇÅ.prop v‚ÇÇ.prop
  ¬∑ have hv‚ÇÅ := trivial_of_finiteDimensional_of_restrict v‚ÇÅ.prop hv
    have hv‚ÇÇ := trivial_of_finiteDimensional_of_restrict v‚ÇÇ.prop hv
    ext1
    exact eq_of_not_isNontrivial hv‚ÇÅ hv‚ÇÇ

end complete

end AbsoluteValue
