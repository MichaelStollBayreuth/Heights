import Heights.Equivalence
import Heights.GelfandMazur

/-!
# Extensions of absolute values

Let `F` be a field with an absolute value `v` on it, and let `F'` be a field extension of `F`
of finite degree.
The goal here is to show that there are finitely many possibilities to extend `v`
to an absolute value `v'` on `F'` and that
`‚àè v', v' x ^ localDegree F v' = v (Algebra.norm F' x)`,
where `localDegree F v'` is the degree of the extension of completions `F'_v' / F_v`.

We follow [Brian Conrad's notes}(http://math.stanford.edu/~conrad/676Page/handouts/ostrowski.pdf),
Sections 6 and 7.
-/

/-!
### Auxiliary lemmas
-/

lemma Finset.sum_range_two_mul (n : ‚Ñï) {M : Type*} [AddCommMonoid M] (f : ‚Ñï ‚Üí M) :
    ‚àë k ‚àà range (2 * n), f k =
      ‚àë k ‚àà range n, f (2 * k) + ‚àë k ‚àà range n, f (2 * k + 1) := by
  rw [‚Üê sum_filter_add_sum_filter_not _ Even]
  congr 1
  ¬∑ refine sum_bij' (fun k _ ‚Ü¶ k / 2) (fun k _ ‚Ü¶ 2 * k) (fun k hk ‚Ü¶ ?_)
      (fun k hk ‚Ü¶ ?_ ) (fun k hk ‚Ü¶ ?_) (fun k hk ‚Ü¶ ?_) (fun k hk ‚Ü¶ ?_) <;>
      simp only [mem_filter, mem_range] at hk ‚ä¢
    ¬∑ omega
    ¬∑ simp only [Nat.ofNat_pos, mul_lt_mul_left, even_two, Even.mul_right, and_true] at hk ‚ä¢
      omega
    ¬∑ exact Nat.two_mul_div_two_of_even hk.2
    ¬∑ omega
    ¬∑ rw [Nat.two_mul_div_two_of_even hk.2]
  ¬∑ refine sum_bij' (fun k _ ‚Ü¶ k / 2) (fun k _ ‚Ü¶ 2 * k + 1) (fun k hk ‚Ü¶ ?_)
      (fun k hk ‚Ü¶ ?_ ) (fun k hk ‚Ü¶ ?_) (fun k hk ‚Ü¶ ?_) (fun k hk ‚Ü¶ ?_) <;>
      simp only [mem_filter, mem_range, Nat.not_even_iff_odd] at hk ‚ä¢
    ¬∑ omega
    ¬∑ simp only [odd_two_mul_add_one, and_true]
      omega
    ¬∑ exact Nat.two_mul_div_two_add_one_of_odd hk.2
    ¬∑ omega
    ¬∑ rw [Nat.two_mul_div_two_add_one_of_odd hk.2]

lemma Complex.cpow_inv_ofReal_mul_ofReal (z : ‚ÑÇ) {x : ‚Ñù} (hx : 1 ‚â§ x) :
    (z ^ (x‚Åª¬π : ‚ÑÇ)) ^ (x : ‚ÑÇ) = z := by
  rw [‚Üê cpow_mul, inv_mul_cancel‚ÇÄ (by norm_cast; linarith), cpow_one]
  -- side goals
  ¬∑ rw [‚Üê ofReal_inv, im_mul_ofReal, ‚Üê div_eq_mul_inv, lt_div_iff‚ÇÄ (by linarith)]
    calc
    _ ‚â§ -Real.pi := mul_le_of_one_le_right (neg_nonpos.mpr Real.pi_nonneg) hx
    _ < (log z).im := neg_pi_lt_log_im z
  ¬∑ rw [‚Üê ofReal_inv, im_mul_ofReal, ‚Üê div_eq_mul_inv, div_le_iff‚ÇÄ (by linarith)]
    calc
    _ ‚â§ Real.pi := log_im_le_pi z
    _ ‚â§ Real.pi * x := by refine le_mul_of_one_le_right Real.pi_nonneg hx

lemma IsPrimitiveRoot.map_nthRootsFinset {K F : Type*} [Field K] [Field F] [Algebra K F]
    {n : ‚Ñï} [NeZero n] {Œ∂ : K} (hŒ∂ : IsPrimitiveRoot Œ∂ n)
    {x : F} (hx : x ‚àà Polynomial.nthRootsFinset n 1) :
    ‚àÉ y ‚àà Polynomial.nthRootsFinset n (1 : K), algebraMap K F y = x := by
  let Œæ := algebraMap K F Œ∂
  have hŒæ : IsPrimitiveRoot Œæ n := hŒ∂.map_of_injective <| FaithfulSMul.algebraMap_injective ..
  rw [Polynomial.mem_nthRootsFinset (NeZero.pos n)] at hx
  obtain ‚ü®k, _, hk‚ü© := hŒæ.eq_pow_of_pow_eq_one hx
  refine ‚ü®Œ∂ ^ k, ?_, hk ‚ñ∏ algebraMap.coe_pow Œ∂ k‚ü©
  rw [Polynomial.mem_nthRootsFinset (NeZero.pos n), pow_right_comm, hŒ∂.pow_eq_one, one_pow]

open Topology Filter in
lemma Real.tendsto_mul_pow_div_one_sub_pow {x : ‚Ñù} (hx‚ÇÄ : 0 ‚â§ x) (hx‚ÇÅ : x < 1) :
    Tendsto (fun n : ‚Ñï ‚Ü¶ n * x ^ n / (1 - x ^ n)) atTop (ùìù 0) := by
  conv => enter [1, n]; rw [div_eq_mul_inv]
  conv => enter [3, 1]; rw [show (0 : ‚Ñù) = 0 * (1 - 0)‚Åª¬π by simp]
  exact (tendsto_self_mul_const_pow_of_lt_one hx‚ÇÄ hx‚ÇÅ).mul <|
    ((tendsto_pow_atTop_nhds_zero_of_lt_one hx‚ÇÄ hx‚ÇÅ).const_sub 1).inv‚ÇÄ (by simp)

open Topology Filter in
lemma Real.tendsto_two_pow_mul_pow_div_one_sub_pow {x : ‚Ñù} (hx‚ÇÄ : 0 ‚â§ x) (hx‚ÇÅ : x < 1) :
    Tendsto (fun n : ‚Ñï ‚Ü¶ 2 ^ n * x ^ 2 ^ n / (1 - x ^ 2 ^ n)) atTop (ùìù 0) := by
  have : Tendsto (fun n : ‚Ñï ‚Ü¶ 2 ^ n) atTop atTop :=
    Nat.tendsto_pow_atTop_atTop_of_one_lt one_lt_two
  convert (tendsto_mul_pow_div_one_sub_pow hx‚ÇÄ hx‚ÇÅ).comp this with n
  simp

/- lemma norm_natCast_le {E : Type*} [SeminormedRing E] [NormOneClass E] (n : ‚Ñï) :
    ‚Äñ(n : E)‚Äñ ‚â§ n := by
  induction n with
  | zero => simp [norm_zero]
  | succ n ih =>
    push_cast
    refine (norm_add_le ..).trans ?_
    rw [norm_one]
    exact add_le_add_right ih 1 -/

section restrict

namespace AbsoluteValue

section

variable {R S : Type*} [Semiring R] [Semiring S] [PartialOrder S]

lemma comp_apply {R' : Type*} [Semiring R'] (v : AbsoluteValue R S) {f : R' ‚Üí+* R}
    (hf : Function.Injective f) (x : R') :
  v.comp hf x = v (f x) := rfl

variable {F : Type*} [Field F] [Nontrivial R]

/-- The pull-back of an absolute value on a (semi)ring `R` to a field `F`
via a ring homomorphism `F ‚Üí+* R`. -/
def comap (v : AbsoluteValue R S) (f : F ‚Üí+* R) : AbsoluteValue F S :=
  v.comp (RingHom.injective f)


lemma comap_comp {F' : Type*} [Field F'] (v : AbsoluteValue R S) (f : F ‚Üí+* F') (g : F' ‚Üí+* R) :
    v.comap (g.comp f) = (v.comap g).comap f := by
  ext1
  simp [comap, comp_apply]

@[simp]
lemma comap_apply (v : AbsoluteValue R S) (f : F ‚Üí+* R) (x : F) :
    v.comap f x = v (f x) := rfl

@[simp]
lemma comap_equiv_comp (v : AbsoluteValue R S) (f : F ‚Üí+* R) :
    v.comap ((WithAbs.equiv v).toRingHom.comp f) = v.comap f :=
  rfl

open WithAbs in
lemma isometry_comap {F' : Type*} [Field F'] (v : AbsoluteValue F' ‚Ñù) (f : F ‚Üí+* F') :
    Isometry ((equiv v).symm.toRingHom.comp (f.comp (equiv (v.comap f)).toRingHom)) := by
  refine AddMonoidHomClass.isometry_of_norm _ fun x ‚Ü¶ ?_
  simp [WithAbs.norm_eq_abv]

lemma isNontrivial_of_comap (v : AbsoluteValue R S) (f : F ‚Üí+* R) (h : (v.comap f).IsNontrivial) :
    v.IsNontrivial := by
  obtain ‚ü®x, hx‚ÇÄ, hx‚ÇÅ‚ü© := h
  exact ‚ü®f x, (map_ne_zero _).mpr hx‚ÇÄ, hx‚ÇÅ‚ü©

lemma isEquiv_comap {v v' : AbsoluteValue R ‚Ñù} (f : F ‚Üí+* R) (h : v ‚âà v') :
    v.comap f ‚âà v'.comap f := by
  simpa [comap, comp, isEquiv_def', IsEquiv] using fun x y ‚Ü¶ h (f x) (f y)

/-- Two equivalent extensions from `F` to `R` of the same nontrivial absolute value
must be equal. -/
lemma eq_of_isEquiv_of_comap_eq {R : Type*} [Field R] {v‚ÇÅ v‚ÇÇ : AbsoluteValue R ‚Ñù} (h‚ÇÅ : v‚ÇÅ ‚âà v‚ÇÇ)
    (f : F ‚Üí+* R) (h‚ÇÇ : v‚ÇÅ.comap f = v‚ÇÇ.comap f) (h‚ÇÉ : (v‚ÇÅ.comap f).IsNontrivial) :
    v‚ÇÅ = v‚ÇÇ := by
  obtain ‚ü®c, hc‚ÇÄ, hc‚ÇÅ‚ü© := isEquiv_iff_exists_rpow_eq.mp h‚ÇÅ
  obtain ‚ü®x, hx‚ü© := h‚ÇÉ.exists_abv_gt_one
  suffices c = 1 by simpa [this] using hc‚ÇÅ
  have H : v‚ÇÅ (f x) = v‚ÇÇ (f x) := by
    simp only [‚Üê comap_apply, h‚ÇÇ]
  rw [‚Üê congrFun hc‚ÇÅ, ‚Üê comap_apply, eq_comm] at H
  nth_rewrite 2 [‚Üê Real.rpow_one (v‚ÇÅ.comap f x)] at H
  exact (Real.rpow_right_inj (zero_lt_one.trans hx) hx.ne').mp H

end

section

variable {F R : Type*} [Field F] [Field R] {v : AbsoluteValue F ‚Ñù} {v' : AbsoluteValue R ‚Ñù}
  (f : F ‚Üí+* R) (h : v'.comap f ‚âà v)

private
lemma ofIsEquivComap_map_mul' (x y : R) :
    letI c := IsEquiv.exponent h
    v' (x * y) ^ c = v' x ^ c * v' y ^ c := by
  rw [v'.map_mul, Real.mul_rpow (v'.nonneg x) (v'.nonneg y)]

private
lemma ofIsEquivComap_nonneg' (x : R) :
    letI c := IsEquiv.exponent h
    0 ‚â§ v' x ^ c :=
  Real.rpow_nonneg (v'.nonneg x) _

private
lemma ofIsEquivComap_eq_zero' (x : R) :
    letI c := IsEquiv.exponent h
    v' x ^ c = 0 ‚Üî x = 0 := by
  simp [Real.rpow_eq_zero_iff_of_nonneg (v'.nonneg x), v'.eq_zero, (IsEquiv.exponent_pos <| h).ne']

/-- If an absolute value `v` on `F` is equivalent to the pull-back
of an absolute value `v'` on `R`, then we can construct an absolute value on `R`
whose pull-back to `F` is `v`. -/
noncomputable
def ofIsEquivComap : AbsoluteValue R ‚Ñù where
      toFun x := v' x ^ IsEquiv.exponent h
      map_mul' := ofIsEquivComap_map_mul' f h
      nonneg' := ofIsEquivComap_nonneg' f h
      eq_zero' := ofIsEquivComap_eq_zero' f h
      add_le' x y := by
        set c := IsEquiv.exponent h with hc
        have hc‚ÇÅ : 0 < c := IsEquiv.exponent_pos h
        by_cases hna : IsNonarchimedean v'
        ¬∑ let v'' := rpow_of_isNonarchimedean hna hc‚ÇÅ
          have H (x : R) : v' x ^ c = v'' x := by simp [v'', c]
          simp only [H, v''.add_le]
        ¬∑ refine add_le_add_of_add_le_two_mul_max (ofIsEquivComap_map_mul' f h)
            (ofIsEquivComap_nonneg' f h) (ofIsEquivComap_eq_zero' f h) (fun x y ‚Ü¶ ?_) x y
          have H‚ÇÅ : v' 2 ^ c ‚â§ 2 := by
            have := IsEquiv.exponent_def h 2
            simp only [comap_apply, map_ofNat] at this
            rw [this]
            exact v.apply_nat_le_self 2
          have H‚ÇÇ := Real.rpow_le_rpow (v'.nonneg _) (abv_add_le_abv_two_mul_max hna x y) hc‚ÇÅ.le
          rw [‚Üê hc] at *
          rw [Real.mul_rpow (v'.nonneg 2) (le_max_iff.mpr <| .inl (v'.nonneg x))] at H‚ÇÇ
          refine H‚ÇÇ.trans ?_
          gcongr
          exact ((Real.monotoneOn_rpow_Ici_of_exponent_nonneg hc‚ÇÅ.le).map_max
            (v'.nonneg x) (v'.nonneg y)).le

lemma ofIsEquivComap_def : (ofIsEquivComap f h).comap f = v := by
  ext1 x
  simpa [ofIsEquivComap] using IsEquiv.exponent_def h x

lemma ofIsEquivComap_isEquiv : ofIsEquivComap f h ‚âà v' :=
  Setoid.symm <| isEquiv_def.mpr ‚ü®IsEquiv.exponent h, IsEquiv.exponent_pos h, rfl‚ü©

-- v.comap ((equiv v).toRingHom.comp ‚Üë(e.trans (algEquiv‚ÇÇ (ofIsEquivComap (algebraMap ‚Ñù F) hv) v))) ‚âà
--   (ofIsEquivComap (algebraMap ‚Ñù F) hv).comap ((equiv (ofIsEquivComap (algebraMap ‚Ñù F) hv)).toRingHom.comp ‚Üëe)


end

variable {F R S : Type*} [Field F] [Nontrivial R] [Semiring R] [Algebra F R] [Semiring S] [PartialOrder S]

variable (F) in
/-- The restriction to a field `F` of an absolute value on an `F`-algebra `R`. -/
def restrict (v : AbsoluteValue R S) : AbsoluteValue F S :=
  v.comap (algebraMap F R)

--@[simp] -- switch sides?
lemma apply_algebraMap (v : AbsoluteValue R S) (x : F) :
    v (algebraMap F R x) = v.restrict F x := rfl

lemma isNontrivial_of_restrict (v : AbsoluteValue R S) (h : (v.restrict F).IsNontrivial) :
    v.IsNontrivial :=
  isNontrivial_of_comap v (algebraMap F R) h

/-- Two equivalent extensions from `F` to `R` of the same nontrivial absolute value
must be equal. -/
lemma eq_of_isEquiv_of_restrict_eq {R : Type*} [Field R] [Algebra F R] {v‚ÇÅ v‚ÇÇ : AbsoluteValue R ‚Ñù}
    (h‚ÇÅ : v‚ÇÅ ‚âà v‚ÇÇ) (h‚ÇÇ : v‚ÇÅ.restrict F = v‚ÇÇ.restrict F) (h‚ÇÉ : (v‚ÇÅ.restrict F).IsNontrivial) :
    v‚ÇÅ = v‚ÇÇ :=
  eq_of_isEquiv_of_comap_eq h‚ÇÅ (algebraMap F R) h‚ÇÇ h‚ÇÉ

/-- The extension of the trivial absolute value on a field `F` to a finite-dimensional `F`-algebra
that is a division ring is trivial. -/
lemma trivial_of_finiteDimensional_of_restrict {R : Type*} [DivisionRing R] [Nontrivial R]
    [Algebra F R] [FiniteDimensional F R] {v : AbsoluteValue F ‚Ñù} {v' : AbsoluteValue R ‚Ñù}
    (h : v'.restrict F = v) (hv : ¬¨ v.IsNontrivial) :
    ¬¨ v'.IsNontrivial := by
  rw [not_isNontrivial_iff] at hv ‚ä¢
  suffices key : ‚àÄ {x} (hx : x ‚â† 0), v' x ‚â§ 1 by
    intro x hx
    refine le_antisymm (key hx) ?_
    rw [‚Üê inv_inv x, map_inv‚ÇÄ, one_le_inv‚ÇÄ <| v'.pos <| inv_ne_zero hx]
    exact key <| inv_ne_zero hx
  intro x hx‚ÇÄ
  by_contra! hx
  let n := Module.finrank F R
  obtain ‚ü®m, hm‚ü© : ‚àÉ m : ‚Ñï, n < v' (x ^ m) := by
    simpa only [v'.map_pow] using pow_unbounded_of_one_lt _ hx
  contrapose! hm; clear hm
  have hxm : x ^ m ‚â† 0 := pow_ne_zero m hx‚ÇÄ
  -- write `x ^ m` as a linear combination of `‚â§ n` terms `c ‚Ä¢ (x ^ m) ^ (-i)` with `i ‚â• 0`
  let p := (LinearMap.mulLeft F (x ^ m)).charpoly
  have hp‚ÇÅ : p.Monic := LinearMap.charpoly_monic _
  have hpn : p.natDegree = n := LinearMap.charpoly_natDegree _
  have H : p.aeval (x ^ m) = 0 := Algebra.charpoly_aeval_self_eq_zero _
  rw [‚Üê p.eraseLead_add_C_mul_X_pow, Polynomial.aeval_add, Polynomial.aeval_eq_sum_range,
    add_eq_zero_iff_eq_neg', hp‚ÇÅ.leadingCoeff, map_one, one_mul, map_pow, Polynomial.aeval_X] at H
  apply_fun (¬∑ * (x ^ m) ^ (-n + 1 : ‚Ñ§)) at H
  rw [hpn, ‚Üê zpow_natCast, ‚Üê zpow_add' (.inl hxm), add_neg_cancel_left, zpow_one, neg_mul,
    Finset.sum_mul] at H
  conv at H => enter [2, 1, 2, i]; rw [smul_mul_assoc, ‚Üê zpow_natCast, ‚Üê zpow_add' (.inl hxm)]
  rw [H, v'.map_neg]; clear H
  have pel : p.eraseLead.natDegree + 1 ‚â§ n := LinearMap.charpoly_eraseLead_natDegree_le _
  have pel' : (p.eraseLead.natDegree + 1 : ‚Ñù) ‚â§ n := mod_cast pel
  have help (N : ‚Ñï) : (N + 1 : ‚Ñù) = ‚àë i ‚àà Finset.range (N + 1), 1 := by simp
  refine (v'.sum_le ..).trans (LE.le.trans ?_ pel')
  conv_rhs => rw [help]
  refine Finset.sum_le_sum fun i hi ‚Ü¶ ?_
  rw [Algebra.smul_def, v'.map_mul, apply_algebraMap, h]
  rcases eq_or_ne (p.eraseLead.coeff i) 0 with H | H
  ¬∑ simp [H]
  ¬∑ simp only [ne_eq, H, not_false_eq_true, hv, map_zpow‚ÇÄ, v'.map_pow, one_mul]
    simp only [Finset.mem_range] at hi
    exact zpow_le_one_of_nonpos‚ÇÄ (one_le_pow‚ÇÄ hx.le) <| by omega

section complex_real

lemma Complex.abv_restrict_real : (NormedField.toAbsoluteValue ‚ÑÇ).restrict ‚Ñù = .abs := by
  ext1 x
  simp only [restrict, comap_apply, Complex.coe_algebraMap, abs_apply]
  change ‚Äñ(x : ‚ÑÇ)‚Äñ = |x|
  rw [Complex.norm_real, Real.norm_eq_abs]

end complex_real

variable {F' : Type*} [Ring F'] [Algebra F F'] {v : AbsoluteValue F ‚Ñù}

@[simp]
lemma equiv_symm_apply_algebraMap (v' : AbsoluteValue F' ‚Ñù) (x : WithAbs v) :
    (WithAbs.equiv v').symm (algebraMap F F' (WithAbs.equiv v x)) =
      algebraMap (WithAbs v) (WithAbs v') x :=
  rfl

variable [Nontrivial F']

open WithAbs

@[simp]
lemma apply_algebraMap_withAbs {v' : AbsoluteValue F' ‚Ñù} (h : v'.restrict F = v) (x : WithAbs v) :
    v' (WithAbs.equiv v' (algebraMap (WithAbs v) (WithAbs v') x)) = v (WithAbs.equiv v x) := by
  rw [‚Üê h, ‚Üê equiv_symm_apply_algebraMap, RingEquiv.apply_symm_apply, apply_algebraMap]

@[fun_prop]
lemma continuous_algebraMap {v' : AbsoluteValue F' ‚Ñù} (h : v'.restrict F = v) :
    Continuous <| algebraMap (WithAbs v) (WithAbs v') := by
  rw [continuous_iff_continuous_dist]
  conv => enter [1, x]; simp only [‚Üê equiv_symm_apply_algebraMap v']
  simp_rw [dist_eq_norm_sub, norm_eq_abv, map_sub, RingEquiv.apply_symm_apply, ‚Üê map_sub,
    apply_algebraMap, h, ‚Üê norm_eq_abv, ‚Üê dist_eq_norm_sub]
  exact continuous_dist

instance continuousSMul {v' : AbsoluteValue F' ‚Ñù} [Fact <| v'.restrict F = v] :
    ContinuousSMul (WithAbs v) (WithAbs v') where
  continuous_smul := (continuous_algebraMap_iff_smul _ _).mp <| continuous_algebraMap Fact.out

lemma isNonarchmedean_comap_iff {F' : Type*} [Field F'] {v : AbsoluteValue F' ‚Ñù} {f : F ‚Üí+* F'} :
    IsNonarchimedean (v.comap f) ‚Üî IsNonarchimedean v := by
  have H (n : ‚Ñï) : v.comap f n = v n := by
    rw [comap_apply, map_natCast f n]
  simp_rw [isNonarchimedean_iff_le_one_on_nat, H]

lemma isNonarchmedean_restrict_iff {F' : Type*} [Field F'] [Algebra F F']
    {v : AbsoluteValue F' ‚Ñù} :
    IsNonarchimedean (v.restrict F) ‚Üî IsNonarchimedean v :=
  isNonarchmedean_comap_iff (f := algebraMap F F')

end AbsoluteValue

end restrict

section complete

namespace AbsoluteValue

/-!
### The complete case

If `F` is complete with respect to an absolute value `v` and `F'/F` is a finite extension,
then there is a unique extension of `v` to an absolute value `v'` on `F'`, and `F'`
is complete with respect to `v'`.
-/

lemma isometry_equiv_realAbs : Isometry (WithAbs.equiv (R := ‚Ñù) .abs) :=
  (AddMonoidHomClass.isometry_iff_norm _).mpr (congrFun rfl)

lemma isHomeomorph_equiv_realAbs : IsHomeomorph (WithAbs.equiv (R := ‚Ñù) .abs) :=
  Isometry.isHomeomorph_ofEquiv isometry_equiv_realAbs

instance : CompleteSpace (WithAbs (R := ‚Ñù) .abs) := by
  let f := (WithAbs.equiv (R := ‚Ñù) .abs)
  have H‚ÇÅ : IsHomeomorph f := isHomeomorph_equiv_realAbs
  have H‚ÇÇ : IsHomeomorph f.symm := H‚ÇÅ -- not sure why this works...
  refine (UniformEquiv.completeSpace_iff ?_).mp (inferInstance : CompleteSpace ‚Ñù)
  refine UniformEquiv.mk f.symm ?_ ?_
  ¬∑ exact uniformContinuous_of_continuousAt_zero f.symm.toRingHom H‚ÇÇ.continuous.continuousAt
  ¬∑ exact uniformContinuous_of_continuousAt_zero f.toRingHom H‚ÇÅ.continuous.continuousAt

variable {F F' : Type*} [Field F] [Field F'] [Algebra F F'] [FiniteDimensional F F']
variable (v : AbsoluteValue F ‚Ñù) [CompleteSpace (WithAbs v)]

/- lemma _root_.WithAbs.complete [CompleteSpace (WithAbs v)] [FiniteDimensional F F']
    [Fact v.IsNontrivial] (v' : AbsoluteValue F' ‚Ñù) [Fact <| v'.restrict F = v] :
    CompleteSpace (WithAbs v') :=
  FiniteDimensional.complete (WithAbs v) (WithAbs v') -/

variable {v} in
private lemma isEquiv_of_restrict_eq {v‚ÇÅ v‚ÇÇ : AbsoluteValue F' ‚Ñù} (h : v.IsNontrivial)
    (h‚ÇÅ : v‚ÇÅ.restrict F = v) (h‚ÇÇ : v‚ÇÇ.restrict F = v) :
    v‚ÇÅ ‚âà v‚ÇÇ := by
  rw [isEquiv_iff_isHomeomorph]
  let e : WithAbs v‚ÇÅ ‚âÉ‚Çó[WithAbs v] WithAbs v‚ÇÇ := {
    toFun := WithAbs.equiv‚ÇÇ v‚ÇÅ v‚ÇÇ
    map_add' x y := rfl
    map_smul' c x := rfl
    invFun := WithAbs.equiv‚ÇÇ v‚ÇÇ v‚ÇÅ
    left_inv x := rfl
    right_inv x := rfl
  }
  have : Fact v.IsNontrivial := ‚ü®h‚ü©
  have : Fact <| v‚ÇÅ.restrict F = v := ‚ü®h‚ÇÅ‚ü©
  have : Fact <| v‚ÇÇ.restrict F = v := ‚ü®h‚ÇÇ‚ü©
  exact isHomeomorph_iff_exists_homeomorph.mpr ‚ü®FiniteDimensional.homeomorph_of_linearEquiv e, rfl‚ü©

-- Lemma 6.1, "at most one"
private lemma lemma_6_1_a : Subsingleton ({ v' : AbsoluteValue F' ‚Ñù // v'.restrict F = v }) := by
  refine subsingleton_iff.mpr fun v‚ÇÅ v‚ÇÇ ‚Ü¶ ?_
  by_cases hv : v.IsNontrivial
  ¬∑ have hr : v‚ÇÅ.val.restrict F = v‚ÇÇ.val.restrict F := by rw [v‚ÇÅ.prop, v‚ÇÇ.prop]
    ext1
    refine eq_of_isEquiv_of_restrict_eq ?_ hr (by rwa [v‚ÇÅ.prop])
    exact isEquiv_of_restrict_eq hv v‚ÇÅ.prop v‚ÇÇ.prop
  ¬∑ have hv‚ÇÅ := trivial_of_finiteDimensional_of_restrict v‚ÇÅ.prop hv
    have hv‚ÇÇ := trivial_of_finiteDimensional_of_restrict v‚ÇÇ.prop hv
    ext1
    exact eq_of_not_isNontrivial hv‚ÇÅ hv‚ÇÇ

end AbsoluteValue

section prelim

section

open AbsoluteValue

variable {F : Type*} [Field F] {v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù}

/-- The absolute value extending `v` on the completion of `F` with respect to `v`. -/
noncomputable
def Completion.absoluteValue (v : AbsoluteValue F ‚Ñù) : AbsoluteValue v.Completion ‚Ñù :=
  NormedField.toAbsoluteValue v.Completion

lemma Completion.absoluteValue_eq_norm (v : AbsoluteValue F ‚Ñù) (x : v.Completion) :
    absoluteValue v x = ‚Äñx‚Äñ := rfl

noncomputable
instance Completion.instAlgebra (v : AbsoluteValue F ‚Ñù) : Algebra (WithAbs v) v.Completion :=
  UniformSpace.Completion.algebra' _

noncomputable
instance Completion.instAlgebra' (v : AbsoluteValue F ‚Ñù) : Algebra F v.Completion :=
  Completion.instAlgebra v

@[simp]
lemma Completion.absoluteValue_restrict (v : AbsoluteValue F ‚Ñù) :
    (absoluteValue v).restrict F = v := by
  ext1 x
  rw [‚Üê apply_algebraMap, absoluteValue_eq_norm, show (algebraMap F v.Completion) x = x from rfl,
    UniformSpace.Completion.norm_coe]
  rfl

end


namespace AbsoluteValue

variable {F : Type*} [Field F] {v : AbsoluteValue F ‚Ñù}

open WithAbs

lemma comap_eq_of_isometry {F' : Type*} [Field F'] {v' : AbsoluteValue F' ‚Ñù}
    {f : WithAbs v ‚Üí+* WithAbs v'} (h : Isometry f) :
    v'.comap ((equiv v').toRingHom.comp (f.comp (equiv v).symm.toRingHom)) = v := by
  ext1 x
  rw [comap_apply]
  simp only [RingEquiv.toRingHom_eq_coe, RingHom.coe_comp, RingHom.coe_coe, Function.comp_apply]
  rw [‚Üê norm_eq_abv, (AddMonoidHomClass.isometry_iff_norm _).mp h, norm_eq_abv]
  simp

lemma comap_completion_eq_of_isometry {F' : Type*} [Field F'] (v' : AbsoluteValue F' ‚Ñù)
    {f : v.Completion ‚Üí+* F'} (h : Isometry ((equiv v').symm.toRingHom.comp f)) :
    v'.comap f = Completion.absoluteValue v := by
  ext1 x
  rw [comap_apply]
  have := (AddMonoidHomClass.isometry_iff_norm _).mp h x
  simpa only [RingEquiv.toRingHom_eq_coe, RingHom.coe_comp, RingHom.coe_coe, Function.comp_apply,
    norm_eq_abv, RingEquiv.apply_symm_apply, ‚Üê Completion.absoluteValue_eq_norm] using this

lemma isometry_equiv_comap {F' : Type*} [Field F'] (f : F' ‚âÉ+* v.Completion) :
    Isometry ((equiv ((Completion.absoluteValue v).comap f)).trans f) := by
  have H : Isometry (equiv (Completion.absoluteValue v)) :=
    (AddMonoidHomClass.isometry_iff_norm _).mpr (congrFun rfl)
  replace H := H.comp <| isometry_comap (Completion.absoluteValue v) f.toRingHom
  simpa only [RingEquiv.coe_trans, RingEquiv.toRingHom_eq_coe, RingHom.coe_comp,
    RingHom.coe_coe] using H

lemma isHomeomorph_equiv_comap {F' : Type*} [Field F'] (f : F' ‚âÉ+* v.Completion) :
    IsHomeomorph ((equiv ((Completion.absoluteValue v).comap f)).trans f) :=
  (isometry_equiv_comap f).isHomeomorph_ofEquiv

variable [CompleteSpace (WithAbs v)]

open RingEquiv Rat.AbsoluteValue in
/-- A field `F` that is complete w.r.t. an archimedean absolute value is an `‚Ñù`-algebra
such that the pull-back of its absolute value to `‚Ñù` is equivalent to the standard
absolute value. -/
lemma algebra_of_archimedean (h : ¬¨ IsNonarchimedean v) :
    ‚àÉ e : ‚Ñù ‚Üí+* F, v.comap e ‚âà .abs := by
  -- We have the canonical ring homomorphism `e‚ÇÄ : ‚Ñö ‚Üí F`.
  have : CharZero (WithAbs v) := charZero_of_archimedean h
  let e‚ÇÄ := Rat.castHom (WithAbs v)
  -- We pull back `v` from `F` to `‚Ñö` to obtain `v‚ÇÄ`.
  let v‚ÇÄ := v.comap e‚ÇÄ
  -- Then `v‚ÇÄ` is equivalent to the archimedean absolute value on `‚Ñö`.
  have hv‚ÇÄ : v‚ÇÄ ‚âà real := real_of_archimedean <| mt isNonarchmedean_comap_iff.mp h
  -- By functoriality of the completion, we obtain a ring homomorphism and isometry
  -- `e‚ÇÅ : v‚ÇÄ.Completion ‚Üí F`.
  let e‚ÇÅ : v‚ÇÄ.Completion ‚Üí+* WithAbs v :=
    Completion.extensionEmbedding_of_comp (f := e‚ÇÄ) fun _ ‚Ü¶ rfl
  have he‚ÇÅ : Isometry e‚ÇÅ := Completion.isometry_extensionEmbedding_of_comp fun _ ‚Ü¶ rfl
  -- The pull-back ov `v` under `e‚ÇÅ` is the absolute value of the completion.
  have H‚ÇÅ : v.comap e‚ÇÅ = Completion.absoluteValue v‚ÇÄ :=
    comap_completion_eq_of_isometry v he‚ÇÅ
  -- We can identify `v‚ÇÄ.Completion` with `‚Ñù` via a ring isomorphism and
  -- homeomorphism `e‚ÇÑ : ‚Ñù ‚Üí v‚ÇÄ.Completion` (built in two steps).
  let e‚ÇÇ := ringEquiv_completion_of_isEquiv hv‚ÇÄ
  let e‚ÇÉ := ringEquiv_completion_real
  let e‚ÇÑ := e‚ÇÉ.symm.trans e‚ÇÇ.symm
  have He‚ÇÉ : IsHomeomorph e‚ÇÉ := isHomeomorph_ringEquiv_completion_real
  have He‚ÇÇ : IsHomeomorph e‚ÇÇ := isHomeomorph_ringEquiv_completion hv‚ÇÄ
  have He‚ÇÑ : IsHomeomorph e‚ÇÑ := by
    simp only [coe_trans, e‚ÇÑ]
    exact He‚ÇÇ.ringEquiv_symm.comp He‚ÇÉ.ringEquiv_symm
  -- The pull-back of the absolute value of the completion to `‚Ñù` under `e‚ÇÑ`
  -- is equivalent to the standard absolute value.
  have H‚ÇÇ : (Completion.absoluteValue v‚ÇÄ).comap e‚ÇÑ ‚âà .abs := by
    refine (isEquiv_iff_isHomeomorph _ .abs).mpr ?_
    simp only [equiv‚ÇÇ, coe_trans]
    refine isHomeomorph_equiv_realAbs.ringEquiv_symm.comp ?_
    convert He‚ÇÑ.ringEquiv_symm.comp <|isHomeomorph_equiv_comap e‚ÇÑ
    rw [coe_trans, ‚Üê Function.comp_assoc, ‚Üê coe_trans, self_trans_symm, coe_refl,
      Function.id_comp]
  -- Finally, we take `e = e‚ÇÅ ‚àò e‚ÇÑ` and reduce to the statement `H‚ÇÇ` above.
  exact ‚ü®e‚ÇÅ.comp e‚ÇÑ, by rwa [comap_comp, H‚ÇÅ]‚ü©

end AbsoluteValue

end prelim

section GelfandMazur

/-!
### A version of the Gelfand-Mazur Theorem

Let `F` be a field that is complete with respect to an archimedean absolute value `v`.
Then `F` is isomorphic, as a field with absolute value, to either `‚Ñù` or `‚ÑÇ` with
an absolute value that is equivalent to the standard absolute value.

One can fairly easily conclude from the assumptions that `F` is an `‚Ñù`-algebra
and that the restriction of `v` to `‚Ñù` is equivalent to the standard absolute value.
There is then an absolute value `v'` on `F` that is equivalent to `v` and restricts
to the standard absolute value on `‚Ñù`; in this way, `F` is a normed `‚Ñù`-algebra.
So we will use this assumption in the following. The main ingredient is the
Gelfand-Mazur Theorem in the following version:

If a field `F` is a normed `‚Ñù`-algebra, then `F` is isomorphic as an `‚Ñù`-algebra
either to `‚Ñù` or to `‚ÑÇ`.
-/

namespace Real

section restrict

variable {F : Type*} [Field F] [Algebra ‚Ñù F] {v : AbsoluteValue F ‚Ñù}

noncomputable
def normedAlgebraOfAbsoluteValue (hv : v.restrict ‚Ñù = .abs) : NormedAlgebra ‚Ñù (WithAbs v) where
  __ := WithAbs.instAlgebra_right v --‚ÄπAlgebra ‚Ñù (WithAbs v)‚Ä∫
  norm_smul_le r x := by
    rw [Algebra.smul_def, norm_mul]
    refine le_of_eq ?_
    congr
    rw [WithAbs.norm_eq_abv, show ‚Äñr‚Äñ = AbsoluteValue.abs r from rfl, ‚Üê hv]
    rfl

lemma algebraEquiv_eq_algebraMap (e : ‚Ñù ‚âÉ‚Çê[‚Ñù] F) : e = algebraMap ‚Ñù F := by
  have : (e.symm : F ‚Üí+* ‚Ñù).comp (algebraMap ‚Ñù F) = RingHom.id ‚Ñù := Subsingleton.elim ..
  ext1 x
  apply_fun (¬∑ x) at this
  simp only [RingHom.coe_comp, Function.comp_apply, RingHom.id_apply] at this
  nth_rewrite 1 [‚Üê this]
  set y := algebraMap ‚Ñù F x -- without that, `simp` does not close the goal
  simp

open AbsoluteValue WithAbs

theorem GelfandMazur_restrict_eq (hv : v.restrict ‚Ñù = .abs) :
    (‚àÉ e : ‚Ñù ‚âÉ‚Çê[‚Ñù] WithAbs v, v.comap ((equiv v).toRingHom.comp e) = .abs) ‚à®
      ‚àÉ e : ‚ÑÇ ‚âÉ‚Çê[‚Ñù] WithAbs v, v.comap ((equiv v).toRingHom.comp e) =
        NormedField.toAbsoluteValue ‚ÑÇ := by
  let inst := normedAlgebraOfAbsoluteValue hv
  rcases NormedAlgebra.Real.nonempty_algEquiv_or (WithAbs v) with h‚Ñù | h‚ÑÇ
  ¬∑ left
    let e := Classical.choice h‚Ñù
    refine ‚ü®e.symm, ?_‚ü©
    have he : (e.symm : ‚Ñù ‚Üí+* WithAbs v) = algebraMap ‚Ñù (WithAbs v) :=
      algebraEquiv_eq_algebraMap e.symm
    rw [RingEquiv.toRingHom_eq_coe, he, ‚Üê hv]
    rfl
  ¬∑ right
    let e := Classical.choice h‚ÑÇ
    refine ‚ü®e.symm, ?_‚ü©
    let inst' : Algebra ‚ÑÇ (WithAbs v) := RingHom.toAlgebra e.symm
    have he : e.symm = algebraMap ‚ÑÇ (WithAbs v) := rfl
    have instST : IsScalarTower ‚Ñù ‚ÑÇ (WithAbs v) := by
      refine IsScalarTower.of_algebraMap_eq' ?_
      rw [‚Üê he]
      ext1 x
      change algebraMap ‚Ñù (WithAbs v) x = e.symm (algebraMap ‚Ñù ‚ÑÇ x)
      simp only [Algebra.algebraMap_eq_smul_one, map_smul, map_one]
    let v‚ÑÇ : AbsoluteValue ‚ÑÇ ‚Ñù := v.comap ((equiv v).toRingHom.comp e.symm)
    have hv‚ÑÇ : v‚ÑÇ.restrict ‚Ñù = .abs := by
      simp only [v‚ÑÇ, ‚Üê hv, restrict, ‚Üê comap_comp]
      congr
      let instF : Algebra ‚ÑÇ F := ((equiv v).toRingHom.comp (algebraMap ‚ÑÇ (WithAbs v))).toAlgebra
      have : IsScalarTower ‚Ñù ‚ÑÇ F := inferInstanceAs <| IsScalarTower ‚Ñù ‚ÑÇ (WithAbs v)
      exact (IsScalarTower.algebraMap_eq ‚Ñù ‚ÑÇ F).symm
    have H‚ÇÅ : (‚ü®_, hv‚ÑÇ‚ü© : { v' // restrict ‚Ñù v' = AbsoluteValue.abs }) =
        ‚ü®_, Complex.abv_restrict_real‚ü© :=
      (lemma_6_1_a (F := ‚Ñù) (F' := ‚ÑÇ) .abs).elim ..
    exact congrArg Subtype.val H‚ÇÅ

theorem GelfandMazur_restrict_isEquiv (hv : v.restrict ‚Ñù ‚âà .abs) :
    (‚àÉ e : ‚Ñù ‚âÉ‚Çê[‚Ñù] WithAbs v, v.comap ((equiv v).toRingHom.comp e) ‚âà .abs) ‚à®
      ‚àÉ e : ‚ÑÇ ‚âÉ‚Çê[‚Ñù] WithAbs v, v.comap ((equiv v).toRingHom.comp e) ‚âà
        NormedField.toAbsoluteValue ‚ÑÇ := by
  let v' := ofIsEquivComap (algebraMap ‚Ñù F) hv
  have hv' : restrict ‚Ñù v' = .abs := ofIsEquivComap_def ..
  have Hv' : v ‚âà v' := Setoid.symm <| ofIsEquivComap_isEquiv (algebraMap ‚Ñù F) hv
  let inst := normedAlgebraOfAbsoluteValue hv'
  rcases GelfandMazur_restrict_eq hv' with ‚ü®e, he‚ü© | ‚ü®e, he‚ü©
  ¬∑ exact .inl ‚ü®e.trans (algEquiv‚ÇÇ v' v), he ‚ñ∏ isEquiv_comap _ Hv'‚ü©
  ¬∑ exact .inr ‚ü®e.trans (algEquiv‚ÇÇ v' v), he ‚ñ∏ isEquiv_comap _ Hv'‚ü©

end restrict

variable {F : Type*} [Field F] {v : AbsoluteValue F ‚Ñù}

open AbsoluteValue WithAbs

theorem GelfandMazur_nonarch [CompleteSpace (WithAbs v)] (h : ¬¨IsNonarchimedean v) :
    (‚àÉ e : ‚Ñù ‚âÉ+* WithAbs v, v.comap ((equiv v).toRingHom.comp e) ‚âà .abs) ‚à®
      ‚àÉ e : ‚ÑÇ ‚âÉ+* WithAbs v, v.comap ((equiv v).toRingHom.comp e) ‚âà
        NormedField.toAbsoluteValue ‚ÑÇ := by
  obtain ‚ü®f, hf‚ü© := algebra_of_archimedean h
  let inst : Algebra ‚Ñù F := f.toAlgebra
  rcases GelfandMazur_restrict_isEquiv hf with ‚ü®e, he‚ü© | ‚ü®e, he‚ü©
  ¬∑ exact .inl ‚ü®‚Üëe, he‚ü©
  . exact .inr ‚ü®‚Üëe, he‚ü©

end Real
