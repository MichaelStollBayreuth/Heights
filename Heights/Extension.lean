import Heights.Equivalence
import Heights.GelfandMazur

/-!
# Extensions of absolute values

Let `F` be a field with an absolute value `v` on it, and let `F'` be a field extension of `F`
of finite degree.
The goal here is to show that there are finitely many possibilities to extend `v`
to an absolute value `v'` on `F'` and that
`‚àè v', v' x ^ localDegree F v' = v (Algebra.norm F' x)`,
where `localDegree F v'` is the degree of the extension of completions `F'_v' / F_v`.

We follow [Brian Conrad's notes}(http://math.stanford.edu/~conrad/676Page/handouts/ostrowski.pdf),
Sections 6 and 7.
-/

/-!
### Auxiliary lemmas
-/

lemma Finset.sum_range_two_mul (n : ‚Ñï) {M : Type*} [AddCommMonoid M] (f : ‚Ñï ‚Üí M) :
    ‚àë k ‚àà range (2 * n), f k =
      ‚àë k ‚àà range n, f (2 * k) + ‚àë k ‚àà range n, f (2 * k + 1) := by
  rw [‚Üê sum_filter_add_sum_filter_not _ Even]
  congr 1
  ¬∑ refine sum_bij' (fun k _ ‚Ü¶ k / 2) (fun k _ ‚Ü¶ 2 * k) (fun k hk ‚Ü¶ ?_)
      (fun k hk ‚Ü¶ ?_ ) (fun k hk ‚Ü¶ ?_) (fun k hk ‚Ü¶ ?_) (fun k hk ‚Ü¶ ?_) <;>
      simp only [mem_filter, mem_range] at hk ‚ä¢
    ¬∑ omega
    ¬∑ simp only [Nat.ofNat_pos, mul_lt_mul_left, even_two, Even.mul_right, and_true] at hk ‚ä¢
      omega
    ¬∑ exact Nat.two_mul_div_two_of_even hk.2
    ¬∑ omega
    ¬∑ rw [Nat.two_mul_div_two_of_even hk.2]
  ¬∑ refine sum_bij' (fun k _ ‚Ü¶ k / 2) (fun k _ ‚Ü¶ 2 * k + 1) (fun k hk ‚Ü¶ ?_)
      (fun k hk ‚Ü¶ ?_ ) (fun k hk ‚Ü¶ ?_) (fun k hk ‚Ü¶ ?_) (fun k hk ‚Ü¶ ?_) <;>
      simp only [mem_filter, mem_range, Nat.not_even_iff_odd] at hk ‚ä¢
    ¬∑ omega
    ¬∑ simp only [odd_two_mul_add_one, not_false_eq_true, and_true]
      omega
    ¬∑ exact Nat.two_mul_div_two_add_one_of_odd hk.2
    ¬∑ omega
    ¬∑ rw [Nat.two_mul_div_two_add_one_of_odd hk.2]

lemma Complex.cpow_inv_ofReal_mul_ofReal (z : ‚ÑÇ) {x : ‚Ñù} (hx : 1 ‚â§ x) :
    (z ^ (x‚Åª¬π : ‚ÑÇ)) ^ (x : ‚ÑÇ) = z := by
  rw [‚Üê cpow_mul, inv_mul_cancel‚ÇÄ (by norm_cast; linarith), cpow_one]
  -- side goals
  ¬∑ rw [‚Üê ofReal_inv, im_mul_ofReal, ‚Üê div_eq_mul_inv, lt_div_iff‚ÇÄ (by linarith)]
    calc
    _ ‚â§ -Real.pi := mul_le_of_one_le_right (neg_nonpos.mpr Real.pi_nonneg) hx
    _ < (log z).im := neg_pi_lt_log_im z
  ¬∑ rw [‚Üê ofReal_inv, im_mul_ofReal, ‚Üê div_eq_mul_inv, div_le_iff‚ÇÄ (by linarith)]
    calc
    _ ‚â§ Real.pi := log_im_le_pi z
    _ ‚â§ Real.pi * x := by refine le_mul_of_one_le_right Real.pi_nonneg hx

lemma IsPrimitiveRoot.map_nthRootsFinset {K F : Type*} [Field K] [Field F] [Algebra K F]
    {n : ‚Ñï} [NeZero n] {Œ∂ : K} (hŒ∂ : IsPrimitiveRoot Œ∂ n)
    {x : F} (hx : x ‚àà Polynomial.nthRootsFinset n 1) :
    ‚àÉ y ‚àà Polynomial.nthRootsFinset n (1 : K), algebraMap K F y = x := by
  let Œæ := algebraMap K F Œ∂
  have hŒæ : IsPrimitiveRoot Œæ n := hŒ∂.map_of_injective <| FaithfulSMul.algebraMap_injective ..
  rw [Polynomial.mem_nthRootsFinset (NeZero.pos n)] at hx
  obtain ‚ü®k, _, hk‚ü© := hŒæ.eq_pow_of_pow_eq_one hx
  refine ‚ü®Œ∂ ^ k, ?_, hk ‚ñ∏ algebraMap.coe_pow Œ∂ k‚ü©
  rw [Polynomial.mem_nthRootsFinset (NeZero.pos n), pow_right_comm, hŒ∂.pow_eq_one, one_pow]

open Topology Filter in
lemma Real.tendsto_mul_pow_div_one_sub_pow {x : ‚Ñù} (hx‚ÇÄ : 0 ‚â§ x) (hx‚ÇÅ : x < 1) :
    Tendsto (fun n : ‚Ñï ‚Ü¶ n * x ^ n / (1 - x ^ n)) atTop (ùìù 0) := by
  conv => enter [1, n]; rw [div_eq_mul_inv]
  conv => enter [3, 1]; rw [show (0 : ‚Ñù) = 0 * (1 - 0)‚Åª¬π by simp]
  exact (tendsto_self_mul_const_pow_of_lt_one hx‚ÇÄ hx‚ÇÅ).mul <|
    ((tendsto_pow_atTop_nhds_zero_of_lt_one hx‚ÇÄ hx‚ÇÅ).const_sub 1).inv‚ÇÄ (by simp)

open Topology Filter in
lemma Real.tendsto_two_pow_mul_pow_div_one_sub_pow {x : ‚Ñù} (hx‚ÇÄ : 0 ‚â§ x) (hx‚ÇÅ : x < 1) :
    Tendsto (fun n : ‚Ñï ‚Ü¶ 2 ^ n * x ^ 2 ^ n / (1 - x ^ 2 ^ n)) atTop (ùìù 0) := by
  have : Tendsto (fun n : ‚Ñï ‚Ü¶ 2 ^ n) atTop atTop :=
    Nat.tendsto_pow_atTop_atTop_of_one_lt one_lt_two
  convert (tendsto_mul_pow_div_one_sub_pow hx‚ÇÄ hx‚ÇÅ).comp this with n
  simp

/- lemma norm_natCast_le {E : Type*} [SeminormedRing E] [NormOneClass E] (n : ‚Ñï) :
    ‚Äñ(n : E)‚Äñ ‚â§ n := by
  induction n with
  | zero => simp [norm_zero]
  | succ n ih =>
    push_cast
    refine (norm_add_le ..).trans ?_
    rw [norm_one]
    exact add_le_add_right ih 1 -/

section restrict

namespace AbsoluteValue

variable {R S : Type*} [Semiring R] [Semiring S] [PartialOrder S]

lemma comp_apply {R' : Type*} [Semiring R'] (v : AbsoluteValue R S) {f : R' ‚Üí+* R}
    (hf : Function.Injective f) (x : R') :
  v.comp hf x = v (f x) := rfl

variable {F : Type*} [Field F] [Nontrivial R]

/-- The pull-back of an absolute value on a (semi)ring `R` to a field `F`
via a ring homomorphism `F ‚Üí+* R`. -/
def comap (v : AbsoluteValue R S) (f : F ‚Üí+* R) : AbsoluteValue F S :=
  v.comp (RingHom.injective f)


lemma comap_comp {F' : Type*} [Field F'] (v : AbsoluteValue R S) (f : F ‚Üí+* F') (g : F' ‚Üí+* R) :
    v.comap (g.comp f) = (v.comap g).comap f := by
  ext1
  simp [comap, comp_apply]

@[simp]
lemma comap_apply (v : AbsoluteValue R S) (f : F ‚Üí+* R) (x : F) :
    v.comap f x = v (f x) := rfl

@[simp]
lemma comap_equiv_comp (v : AbsoluteValue R S) (f : F ‚Üí+* R) :
    v.comap ((WithAbs.equiv v).toRingHom.comp f) = v.comap f :=
  rfl

open WithAbs in
lemma isometry_comap {F' : Type*} [Field F'] (v : AbsoluteValue F' ‚Ñù) (f : F ‚Üí+* F') :
    Isometry ((equiv v).symm.toRingHom.comp (f.comp (equiv (v.comap f)).toRingHom)) := by
  refine AddMonoidHomClass.isometry_of_norm _ fun x ‚Ü¶ ?_
  simp [WithAbs.norm_eq_abv]

lemma isNontrivial_of_comap (v : AbsoluteValue R S) (f : F ‚Üí+* R) (h : (v.comap f).IsNontrivial) :
    v.IsNontrivial := by
  obtain ‚ü®x, hx‚ÇÄ, hx‚ÇÅ‚ü© := h
  exact ‚ü®f x, (map_ne_zero _).mpr hx‚ÇÄ, hx‚ÇÅ‚ü©

lemma isEquiv_comap {v v' : AbsoluteValue R ‚Ñù} (f : F ‚Üí+* R) (h : v ‚âà v') :
    v.comap f ‚âà v'.comap f := by
  obtain ‚ü®c, hc‚ÇÄ, hc‚ü© := h
  refine ‚ü®c, hc‚ÇÄ, ?_‚ü©
  ext1 x
  simp [comap, comp, congrFun hc (f x)]

/-- Two equivalent extensions from `F` to `R` of the same nontrivial absolute value
must be equal. -/
lemma eq_of_isEquiv_of_comap_eq {v‚ÇÅ v‚ÇÇ : AbsoluteValue R ‚Ñù} (h‚ÇÅ : v‚ÇÅ ‚âà v‚ÇÇ) (f : F ‚Üí+* R)
    (h‚ÇÇ : v‚ÇÅ.comap f = v‚ÇÇ.comap f) (h‚ÇÉ : (v‚ÇÅ.comap f).IsNontrivial) :
    v‚ÇÅ = v‚ÇÇ := by
  obtain ‚ü®c, hc‚ÇÄ, hc‚ÇÅ‚ü© := h‚ÇÅ
  obtain ‚ü®x, hx‚ü© := h‚ÇÉ.exists_abv_gt_one
  suffices c = 1 by simpa [this] using hc‚ÇÅ
  have H : v‚ÇÅ (f x) = v‚ÇÇ (f x) := by
    simp only [‚Üê comap_apply, h‚ÇÇ]
  rw [‚Üê congrFun hc‚ÇÅ, ‚Üê comap_apply, eq_comm] at H
  nth_rewrite 2 [‚Üê Real.rpow_one (v‚ÇÅ.comap f x)] at H
  exact (Real.rpow_right_inj (zero_lt_one.trans hx) hx.ne').mp H

section

variable {R : Type*} [Field R] {v : AbsoluteValue F ‚Ñù} {v' : AbsoluteValue R ‚Ñù}
  (f : F ‚Üí+* R) (h : v'.comap f ‚âà v)

private
lemma ofIsEquivComap_map_mul' (x y : R) :
    letI c := IsEquiv.exponent h
    v' (x * y) ^ c = v' x ^ c * v' y ^ c := by
  rw [v'.map_mul, Real.mul_rpow (v'.nonneg x) (v'.nonneg y)]

private
lemma ofIsEquivComap_nonneg' (x : R) :
    letI c := IsEquiv.exponent h
    0 ‚â§ v' x ^ c :=
  Real.rpow_nonneg (v'.nonneg x) _

private
lemma ofIsEquivComap_eq_zero' (x : R) :
    letI c := IsEquiv.exponent h
    v' x ^ c = 0 ‚Üî x = 0 := by
  simp [Real.rpow_eq_zero_iff_of_nonneg (v'.nonneg x), v'.eq_zero, (IsEquiv.exponent_pos <| h).ne']

/-- If an absolute value `v` on `F` is equivalent to the pull-back
of an absolute value `v'` on `R`, then we can construct an absolute value on `R`
whose pull-back to `F` is `v`. -/
noncomputable
def ofIsEquivComap : AbsoluteValue R ‚Ñù where
      toFun x := v' x ^ IsEquiv.exponent h
      map_mul' := ofIsEquivComap_map_mul' f h
      nonneg' := ofIsEquivComap_nonneg' f h
      eq_zero' := ofIsEquivComap_eq_zero' f h
      add_le' x y := by
        set c := IsEquiv.exponent h with hc
        have hc‚ÇÅ : 0 < c := IsEquiv.exponent_pos h
        by_cases hna : IsNonarchimedean v'
        ¬∑ let v'' := rpow_of_isNonarchimedean hna hc‚ÇÅ
          have H (x : R) : v' x ^ c = v'' x := by simp [v'', c]
          simp only [H, v''.add_le]
        ¬∑ refine add_le_add_of_add_le_two_mul_max (ofIsEquivComap_map_mul' f h)
            (ofIsEquivComap_nonneg' f h) (ofIsEquivComap_eq_zero' f h) (fun x y ‚Ü¶ ?_) x y
          have H‚ÇÅ : v' 2 ^ c ‚â§ 2 := by
            have := IsEquiv.exponent_def h 2
            simp only [comap_apply, map_ofNat] at this
            rw [this]
            exact v.apply_nat_le_self 2
          have H‚ÇÇ := Real.rpow_le_rpow (v'.nonneg _) (abv_add_le_abv_two_mul_max hna x y) hc‚ÇÅ.le
          rw [‚Üê hc] at *
          rw [Real.mul_rpow (v'.nonneg 2) (le_max_iff.mpr <| .inl (v'.nonneg x))] at H‚ÇÇ
          refine H‚ÇÇ.trans ?_
          gcongr
          exact ((Real.monotoneOn_rpow_Ici_of_exponent_nonneg hc‚ÇÅ.le).map_max
            (v'.nonneg x) (v'.nonneg y)).le

lemma ofIsEquivComap_def : (ofIsEquivComap f h).comap f = v := by
  ext1 x
  simpa [ofIsEquivComap] using IsEquiv.exponent_def h x

lemma ofIsEquivComap_isEquiv : ofIsEquivComap f h ‚âà v' :=
  Setoid.symm <| isEquiv_def.mpr ‚ü®IsEquiv.exponent h, IsEquiv.exponent_pos h, rfl‚ü©

end


variable [Algebra F R]

variable (F) in
/-- The restriction to a field `F` of an absolute value on an `F`-algebra `R`. -/
def restrict (v : AbsoluteValue R S) : AbsoluteValue F S :=
  v.comap (algebraMap F R)

--@[simp] -- switch sides?
lemma apply_algebraMap (v : AbsoluteValue R S) (x : F) :
    v (algebraMap F R x) = v.restrict F x := rfl

lemma isNontrivial_of_restrict (v : AbsoluteValue R S) (h : (v.restrict F).IsNontrivial) :
    v.IsNontrivial :=
  isNontrivial_of_comap v (algebraMap F R) h

/-- Two equivalent extensions from `F` to `R` of the same nontrivial absolute value
must be equal. -/
lemma eq_of_isEquiv_of_restrict_eq {v‚ÇÅ v‚ÇÇ : AbsoluteValue R ‚Ñù} (h‚ÇÅ : v‚ÇÅ ‚âà v‚ÇÇ)
    (h‚ÇÇ : v‚ÇÅ.restrict F = v‚ÇÇ.restrict F) (h‚ÇÉ : (v‚ÇÅ.restrict F).IsNontrivial) :
    v‚ÇÅ = v‚ÇÇ :=
  eq_of_isEquiv_of_comap_eq h‚ÇÅ (algebraMap F R) h‚ÇÇ h‚ÇÉ

/-- The extension of the trivial absolute value on a field `F` to a finite-dimensional `F`-algebra
that is a division ring is trivial. -/
lemma trivial_of_finiteDimensional_of_restrict {R : Type*} [DivisionRing R] [Nontrivial R]
    [Algebra F R] [FiniteDimensional F R] {v : AbsoluteValue F ‚Ñù} {v' : AbsoluteValue R ‚Ñù}
    (h : v'.restrict F = v) (hv : ¬¨ v.IsNontrivial) :
    ¬¨ v'.IsNontrivial := by
  rw [not_isNontrivial_iff] at hv ‚ä¢
  suffices key : ‚àÄ {x} (hx : x ‚â† 0), v' x ‚â§ 1 by
    intro x hx
    refine le_antisymm (key hx) ?_
    rw [‚Üê inv_inv x, map_inv‚ÇÄ, one_le_inv‚ÇÄ <| v'.pos <| inv_ne_zero hx]
    exact key <| inv_ne_zero hx
  intro x hx‚ÇÄ
  by_contra! hx
  let n := Module.finrank F R
  obtain ‚ü®m, hm‚ü© : ‚àÉ m : ‚Ñï, n < v' (x ^ m) := by
    simpa only [v'.map_pow] using pow_unbounded_of_one_lt _ hx
  contrapose! hm; clear hm
  have hxm : x ^ m ‚â† 0 := pow_ne_zero m hx‚ÇÄ
  -- write `x ^ m` as a linear combination of `‚â§ n` terms `c ‚Ä¢ (x ^ m) ^ (-i)` with `i ‚â• 0`
  let p := (LinearMap.mulLeft F (x ^ m)).charpoly
  have hp‚ÇÅ : p.Monic := LinearMap.charpoly_monic _
  have hpn : p.natDegree = n := LinearMap.charpoly_natDegree _
  have H : p.aeval (x ^ m) = 0 := Algebra.charpoly_aeval_self_eq_zero _
  rw [‚Üê p.eraseLead_add_C_mul_X_pow, Polynomial.aeval_add, Polynomial.aeval_eq_sum_range,
    add_eq_zero_iff_eq_neg', hp‚ÇÅ.leadingCoeff, map_one, one_mul, map_pow, Polynomial.aeval_X] at H
  apply_fun (¬∑ * (x ^ m) ^ (-n + 1 : ‚Ñ§)) at H
  rw [hpn, ‚Üê zpow_natCast, ‚Üê zpow_add' (.inl hxm), add_neg_cancel_left, zpow_one, neg_mul,
    Finset.sum_mul] at H
  conv at H => enter [2, 1, 2, i]; rw [smul_mul_assoc, ‚Üê zpow_natCast, ‚Üê zpow_add' (.inl hxm)]
  rw [H, v'.map_neg]; clear H
  have pel : p.eraseLead.natDegree + 1 ‚â§ n := LinearMap.charpoly_eraseLead_natDegree_le _
  have pel' : (p.eraseLead.natDegree + 1 : ‚Ñù) ‚â§ n := mod_cast pel
  have help (N : ‚Ñï) : (N + 1 : ‚Ñù) = ‚àë i ‚àà Finset.range (N + 1), 1 := by simp
  refine (v'.sum_le ..).trans (LE.le.trans ?_ pel')
  conv_rhs => rw [help]
  refine Finset.sum_le_sum fun i hi ‚Ü¶ ?_
  rw [Algebra.smul_def, v'.map_mul, apply_algebraMap, h]
  rcases eq_or_ne (p.eraseLead.coeff i) 0 with H | H
  ¬∑ simp [H]
  ¬∑ simp only [ne_eq, H, not_false_eq_true, hv, map_zpow‚ÇÄ, v'.map_pow, one_mul]
    simp only [Finset.mem_range] at hi
    exact zpow_le_one_of_nonpos‚ÇÄ (one_le_pow‚ÇÄ hx.le) <| by omega

variable {F' : Type*} [Ring F'] [Algebra F F'] {v : AbsoluteValue F ‚Ñù}

@[simp]
lemma equiv_symm_apply_algebraMap (v' : AbsoluteValue F' ‚Ñù) (x : WithAbs v) :
    (WithAbs.equiv v').symm (algebraMap F F' (WithAbs.equiv v x)) =
      algebraMap (WithAbs v) (WithAbs v') x :=
  rfl

variable [Nontrivial F']

open WithAbs

@[simp]
lemma apply_algebraMap_withAbs {v' : AbsoluteValue F' ‚Ñù} (h : v'.restrict F = v) (x : WithAbs v) :
    v' (WithAbs.equiv v' (algebraMap (WithAbs v) (WithAbs v') x)) = v (WithAbs.equiv v x) := by
  rw [‚Üê h, ‚Üê equiv_symm_apply_algebraMap, RingEquiv.apply_symm_apply, apply_algebraMap]

@[fun_prop]
lemma continuous_algebraMap {v' : AbsoluteValue F' ‚Ñù} (h : v'.restrict F = v) :
    Continuous <| algebraMap (WithAbs v) (WithAbs v') := by
  rw [continuous_iff_continuous_dist]
  conv => enter [1, x]; simp only [‚Üê equiv_symm_apply_algebraMap v']
  simp_rw [dist_eq_norm_sub, norm_eq_abv, map_sub, RingEquiv.apply_symm_apply, ‚Üê map_sub,
    apply_algebraMap, h, ‚Üê norm_eq_abv, ‚Üê dist_eq_norm_sub]
  exact continuous_dist

instance continuousSMul {v' : AbsoluteValue F' ‚Ñù} [Fact <| v'.restrict F = v] :
    ContinuousSMul (WithAbs v) (WithAbs v') where
  continuous_smul := (continuous_algebraMap_iff_smul _ _).mp <| continuous_algebraMap Fact.out

lemma isNonarchmedean_comap_iff {F' : Type*} [Field F'] {v : AbsoluteValue F' ‚Ñù} {f : F ‚Üí+* F'} :
    IsNonarchimedean (v.comap f) ‚Üî IsNonarchimedean v := by
  have H (n : ‚Ñï) : v.comap f n = v n := by
    rw [comap_apply, map_natCast f n]
  simp_rw [isNonarchimedean_iff_le_one_on_nat, H]

lemma isNonarchmedean_restrict_iff {F' : Type*} [Field F'] [Algebra F F']
    {v : AbsoluteValue F' ‚Ñù} :
    IsNonarchimedean (v.restrict F) ‚Üî IsNonarchimedean v :=
  isNonarchmedean_comap_iff (f := algebraMap F F')

end AbsoluteValue

end restrict

section complete

namespace AbsoluteValue

/-!
### The complete case

If `F` is complete with respect to an absolute value `v` and `F'/F` is a finite extension,
then there is a unique extension of `v` to an absolute value `v'` on `F'`, and `F'`
is complete with respect to `v'`.
-/

lemma isometry_equiv_realAbs : Isometry (WithAbs.equiv (R := ‚Ñù) .abs) :=
  (AddMonoidHomClass.isometry_iff_norm _).mpr (congrFun rfl)

lemma isHomeomorph_equiv_realAbs : IsHomeomorph (WithAbs.equiv (R := ‚Ñù) .abs) :=
  Isometry.isHomeomorph_ofEquiv isometry_equiv_realAbs

instance : CompleteSpace (WithAbs (R := ‚Ñù) .abs) := by
  let f := (WithAbs.equiv (R := ‚Ñù) .abs)
  have H‚ÇÅ : IsHomeomorph f := isHomeomorph_equiv_realAbs
  have H‚ÇÇ : IsHomeomorph f.symm := H‚ÇÅ -- not sure why this works...
  refine (UniformEquiv.completeSpace_iff ?_).mp (inferInstance : CompleteSpace ‚Ñù)
  refine UniformEquiv.mk f.symm ?_ ?_
  ¬∑ exact uniformContinuous_of_continuousAt_zero f.symm.toRingHom H‚ÇÇ.continuous.continuousAt
  ¬∑ exact uniformContinuous_of_continuousAt_zero f.toRingHom H‚ÇÅ.continuous.continuousAt

variable {F F' : Type*} [Field F] [Field F'] [Algebra F F'] [FiniteDimensional F F']
variable (v : AbsoluteValue F ‚Ñù) [CompleteSpace (WithAbs v)]

/- lemma _root_.WithAbs.complete [CompleteSpace (WithAbs v)] [FiniteDimensional F F']
    [Fact v.IsNontrivial] (v' : AbsoluteValue F' ‚Ñù) [Fact <| v'.restrict F = v] :
    CompleteSpace (WithAbs v') :=
  FiniteDimensional.complete (WithAbs v) (WithAbs v') -/

variable {v} in
private lemma isEquiv_of_restrict_eq {v‚ÇÅ v‚ÇÇ : AbsoluteValue F' ‚Ñù} (h : v.IsNontrivial)
    (h‚ÇÅ : v‚ÇÅ.restrict F = v) (h‚ÇÇ : v‚ÇÇ.restrict F = v) :
    v‚ÇÅ ‚âà v‚ÇÇ := by
  rw [isEquiv_iff_isHomeomorph]
  let e : WithAbs v‚ÇÅ ‚âÉ‚Çó[WithAbs v] WithAbs v‚ÇÇ := {
    toFun := WithAbs.equiv‚ÇÇ v‚ÇÅ v‚ÇÇ
    map_add' x y := rfl
    map_smul' c x := rfl
    invFun := WithAbs.equiv‚ÇÇ v‚ÇÇ v‚ÇÅ
    left_inv x := rfl
    right_inv x := rfl
  }
  have : Fact v.IsNontrivial := ‚ü®h‚ü©
  have : Fact <| v‚ÇÅ.restrict F = v := ‚ü®h‚ÇÅ‚ü©
  have : Fact <| v‚ÇÇ.restrict F = v := ‚ü®h‚ÇÇ‚ü©
  exact isHomeomorph_iff_exists_homeomorph.mpr ‚ü®FiniteDimensional.homeomorph_of_linearEquiv e, rfl‚ü©

-- Lemma 6.1, "at most one"
private lemma lemma_6_1_a : Subsingleton ({ v' : AbsoluteValue F' ‚Ñù // v'.restrict F = v }) := by
  refine subsingleton_iff.mpr fun v‚ÇÅ v‚ÇÇ ‚Ü¶ ?_
  by_cases hv : v.IsNontrivial
  ¬∑ have hr : v‚ÇÅ.val.restrict F = v‚ÇÇ.val.restrict F := by rw [v‚ÇÅ.prop, v‚ÇÇ.prop]
    ext1
    refine eq_of_isEquiv_of_restrict_eq ?_ hr (by rwa [v‚ÇÅ.prop])
    exact isEquiv_of_restrict_eq hv v‚ÇÅ.prop v‚ÇÇ.prop
  ¬∑ have hv‚ÇÅ := trivial_of_finiteDimensional_of_restrict v‚ÇÅ.prop hv
    have hv‚ÇÇ := trivial_of_finiteDimensional_of_restrict v‚ÇÇ.prop hv
    ext1
    exact eq_of_not_isNontrivial hv‚ÇÅ hv‚ÇÇ

end AbsoluteValue

section GelfandMazur

/-!
### A version of the Gelfand-Mazur Theorem

We show that a complete field with real-valued archimedean absolute value must be
isomorphic either to `‚Ñù` or to `‚ÑÇ` with a power of its usual absolute value.
-/

namespace Real

variable {F : Type*} [Field F] [Algebra ‚Ñù F] {v : AbsoluteValue F ‚Ñù}

section restrict_equal

variable (hv : v.restrict ‚Ñù = .abs)

noncomputable
def normedAlgebraOfAbsoluteValue : NormedAlgebra ‚Ñù (WithAbs v) where
  __ := WithAbs.instAlgebra_right v --‚ÄπAlgebra ‚Ñù (WithAbs v)‚Ä∫
  norm_smul_le r x := by
    rw [Algebra.smul_def, norm_mul]
    refine le_of_eq ?_
    congr
    rw [WithAbs.norm_eq_abv, show ‚Äñr‚Äñ = AbsoluteValue.abs r from rfl, ‚Üê hv]
    rfl

lemma normedAlgebraOfAbsoluteValue_toAlgebra_eq :
    (normedAlgebraOfAbsoluteValue hv).toAlgebra = WithAbs.instAlgebra_right v :=
  rfl

end restrict_equal

-- variable (hv : v.restrict ‚Ñù ‚âà .abs)

open AbsoluteValue WithAbs in
theorem GelfandMazur [CompleteSpace (WithAbs v)] (hv : v.restrict ‚Ñù ‚âà .abs) :
    (‚àÉ e : ‚Ñù ‚âÉ‚Çê[‚Ñù] WithAbs v, v.comap (e.toRingEquiv.trans (equiv v)).toRingHom ‚âà .abs) ‚à®
      ‚àÉ e : ‚ÑÇ ‚âÉ‚Çê[‚Ñù] WithAbs v, v.comap (e.toRingEquiv.trans (equiv v)).toRingHom ‚âà
        NormedField.toAbsoluteValue ‚ÑÇ := by
  let v' := ofIsEquivComap (algebraMap ‚Ñù F) hv
  have hv' : restrict ‚Ñù v' = .abs := ofIsEquivComap_def ..
  let inst := normedAlgebraOfAbsoluteValue hv'
  rcases GelfandMazur.nonempty_algEquiv_or (F := WithAbs v') with h‚Ñù | h‚ÑÇ
  ¬∑ left
    let e := Classical.choice h‚Ñù
    have he (r : ‚Ñù) : e.symm r = algebraMap ‚Ñù (WithAbs v') r := by
      apply_fun ‚áëe
      simp
    refine ‚ü®e.symm.trans (algEquiv‚ÇÇ (F := ‚Ñù) v' v), ?_‚ü©
    have : v.comap ((e.symm.trans (algEquiv‚ÇÇ v' v)).toRingEquiv.trans (equiv v)).toRingHom =
        v.restrict ‚Ñù := by
      ext1 x
      simp [he, restrict]
    rwa [this]
  ¬∑ right
    let e := Classical.choice h‚ÑÇ
    have he (r : ‚Ñù) : e.symm r = algebraMap ‚Ñù (WithAbs v') r := by
      apply_fun ‚áëe
      simp
    refine ‚ü®e.symm.trans (algEquiv‚ÇÇ (F := ‚Ñù) v' v), ?_‚ü©
    have H : (v.comap ((e.symm.trans (algEquiv‚ÇÇ v' v)).toRingEquiv.trans (equiv v)).toRingHom).comap
             (algebraMap ‚Ñù ‚ÑÇ) = v.restrict ‚Ñù := by
      ext1 x
      simp [he, restrict]
    let inst' : Algebra ‚ÑÇ F := RingHom.toAlgebra e.symm.toRingHom
    have h (x : ‚Ñù) : algebraMap ‚ÑÇ F (algebraMap ‚Ñù ‚ÑÇ x) = algebraMap ‚Ñù F x := by
      have hh (z : ‚ÑÇ) :e.symm.toRingEquiv.toRingHom z = e.symm z := rfl
      erw [show algebraMap ‚ÑÇ F = e.symm.toRingHom from rfl, hh, he] -- defeq abuse?
      simp only [Algebra.id.map_eq_id, RingHom.id_apply]
      rfl
    -- let inst'' : IsScalarTower ‚Ñù ‚ÑÇ F := sorry
    have H' : v.comap ((e.symm.trans (algEquiv‚ÇÇ v' v)).toRingEquiv.trans (equiv v)).toRingHom =
        v.restrict ‚ÑÇ := by
      have : (v.restrict ‚ÑÇ).restrict ‚Ñù = v.restrict ‚Ñù  := by
        ext1
        simp only [restrict, comap_apply, h]
      have inst‚Çâ : CompleteSpace (WithAbs (restrict ‚Ñù v)) := sorry
      have heq := isEquiv_of_restrict_eq ((Setoid.symm hv).isNontrivial ‚ü®2, two_ne_zero, by norm_num‚ü©) this H

      sorry
    sorry

end Real

namespace Complex

section

variable {F : Type*} [Field F] [Algebra ‚ÑÇ F] {v : AbsoluteValue F ‚Ñù}

section restrict_equal

variable (hv : v.restrict ‚ÑÇ = NormedField.toAbsoluteValue ‚ÑÇ)

noncomputable
def normedAlgebraOfAbsoluteValue : NormedAlgebra ‚ÑÇ (WithAbs v) where
  __ := ‚ÄπAlgebra ‚ÑÇ (WithAbs v)‚Ä∫
  norm_smul_le r x := by
    rw [Algebra.smul_def, norm_mul]
    refine le_of_eq ?_
    congr
    rw [WithAbs.norm_eq_abv, show ‚Äñr‚Äñ = NormedField.toAbsoluteValue ‚ÑÇ r from rfl, ‚Üê hv]
    rfl

noncomputable
def algEquivComplex [CompleteSpace (WithAbs v)] : ‚ÑÇ ‚âÉ‚Çê[‚ÑÇ] WithAbs v :=
  letI inst := normedAlgebraOfAbsoluteValue hv
  NormedRing.algEquivComplexOfComplete fun {_} ‚Ü¶ isUnit_iff_ne_zero

lemma comap_algEquivComplex [CompleteSpace (WithAbs v)] :
    v.comap ((algEquivComplex hv).toRingEquiv.trans (WithAbs.equiv v)).toRingHom =
      NormedField.toAbsoluteValue ‚ÑÇ :=
  hv ‚ñ∏ rfl

end restrict_equal

section

open AbsoluteValue in
theorem GelfandMazur (hv : v.restrict ‚ÑÇ ‚âà NormedField.toAbsoluteValue ‚ÑÇ) [CompleteSpace (WithAbs v)] :
    ‚àÉ e : ‚ÑÇ ‚âÉ‚Çê[‚ÑÇ] WithAbs v, v.comap (e.toRingEquiv.trans (WithAbs.equiv v)).toRingHom ‚âà
      NormedField.toAbsoluteValue ‚ÑÇ := by
  let v' := ofIsEquivComap (algebraMap ‚ÑÇ F) hv
  have hv' : restrict ‚ÑÇ v' = NormedField.toAbsoluteValue ‚ÑÇ := ofIsEquivComap_def ..
  have : CompleteSpace (WithAbs v') :=
    completeSpace_of_isEquiv <| Setoid.symm (ofIsEquivComap_isEquiv (algebraMap ‚ÑÇ F) hv)
  let e := (algEquivComplex hv').trans <| (WithAbs.algEquiv v').trans (WithAbs.algEquiv v).symm
  refine ‚ü®e, ?_‚ü©
  have H : (e.toRingEquiv.trans (WithAbs.equiv v)).toRingHom = algebraMap ‚ÑÇ F := rfl
  rw [H]
  exact hv

end


section

variable {F : Type*} [Field F]

open Polynomial in
lemma irreducible_sq_add_one (h : ‚àÄ x : F, x ^ 2 ‚â† -1) :
    Irreducible (X ^ 2 + 1 : Polynomial F) := by
  set p : Polynomial F := X ^ 2 + 1
  refine irreducible_of_degree_le_three_of_not_isRoot ?_ fun x ‚Ü¶ ?_
  ¬∑ have : p.natDegree = 2 := by simp only [p]; compute_degree!
    simp [this]
  ¬∑ specialize h x
    contrapose! h
    simp only [p, IsRoot.def, eval_add, eval_pow, eval_X, eval_one] at h
    exact (neg_eq_of_add_eq_zero_left h).symm

variable [Algebra ‚Ñù F]

noncomputable
def algebraOfAlgebraReal {i : F} (hi : i ^ 2 = -1) : Algebra ‚ÑÇ F := RingHom.toAlgebra {
  toFun z := z.re ‚Ä¢ 1 + z.im ‚Ä¢ i
  map_one' := by simp
  map_mul' w z := by
    simp only [Complex.mul_re, Complex.mul_im, mul_add, Algebra.mul_smul_comm, mul_one, smul_add,
      add_mul, Algebra.smul_mul_assoc, one_mul, smul_smul]
    rw [‚Üê sq, hi]
    module
  map_zero' := by simp
  map_add' w z := by
    simp only [Complex.add_re, Complex.add_im]
    module
}

open Polynomial in
noncomputable
def algebraAdjoinRootOfAlgebraReal (h : ‚àÄ x : F, x ^ 2 ‚â† -1) :
    Algebra ‚ÑÇ (AdjoinRoot (X ^ 2 + 1 : Polynomial F)) := by
  letI p : Polynomial F := X ^ 2 + 1
  letI instF : Fact (Irreducible p) := ‚ü®irreducible_sq_add_one h‚ü©
  let i := AdjoinRoot.root p
  have hr : i ^ 2 = -1 := by
    refine (neg_eq_of_add_eq_zero_left ?_).symm
    simpa [p] using AdjoinRoot.isRoot_root p
  exact algebraOfAlgebraReal hr

noncomputable
def fieldAdjoinRootOfAlgebraReal (h : ‚àÄ x : F, x ^ 2 ‚â† -1) :
    Field (AdjoinRoot (Polynomial.X ^ 2 + 1 : Polynomial F)) :=
  haveI : Fact (Irreducible (Polynomial.X ^ 2 + 1 : Polynomial F)) := ‚ü®irreducible_sq_add_one h‚ü©
  AdjoinRoot.instField

end

#exit

section

variable {F : Type*} [NormedField F] [NormedAlgebra ‚Ñù F]

#check TensorProduct ‚Ñù ‚ÑÇ F

#synth Algebra ‚ÑÇ (TensorProduct ‚Ñù ‚ÑÇ F)

#synth NormedAlgebra ‚ÑÇ (TensorProduct ‚Ñù ‚ÑÇ F)

#synth Module F <| AdjoinRoot (Polynomial.X ^ 2 + 1 : Polynomial F)

noncomputable
def xyz : AdjoinRoot (Polynomial.X ^ 2 + 1 : Polynomial F) ‚âÉ‚Çó[F] Fin 2 ‚Üí F := by
  letI p : Polynomial F := Polynomial.X ^ 2 + 1
  have hp‚ÇÄ : p ‚â† 0 := Polynomial.Monic.ne_zero <| by simp only [p]; monicity!
  letI pb := AdjoinRoot.powerBasis hp‚ÇÄ
  have hpb : pb.dim = 2 := by
    simp [pb, p]
    compute_degree!
  exact (hpb ‚ñ∏ (AdjoinRoot.powerBasis hp‚ÇÄ).basis.repr).trans
    (Finsupp.linearEquivFunOnFinite F F (Fin 2))

lemma xyz_mul (x y : AdjoinRoot (Polynomial.X ^ 2 + 1 : Polynomial F)) :
    xyz (x * y) = ![xyz x 0 * xyz y 0 - xyz x 1 * xyz y 1, xyz x 0 * xyz y 1 + xyz x 1 * xyz y 0] := by
  ext1 i
  fin_cases i
  ¬∑ simp
    sorry
  ¬∑ sorry


open Polynomial in
noncomputable
def normFunAdjoinRootOfAlgebraReal --(h : ‚àÄ x : F, x ^ 2 ‚â† -1)
    (x : AdjoinRoot (X ^ 2 + 1 : Polynomial F)) : ‚Ñù := by
  letI p : Polynomial F := Polynomial.X ^ 2 + 1
  have hp‚ÇÄ : p ‚â† 0 := Polynomial.Monic.ne_zero <| by simp only [p]; monicity!
  letI pb := AdjoinRoot.powerBasis hp‚ÇÄ
  have hpb : pb.dim = 2 := by
    simp [pb, p]
    compute_degree!
  letI r := pb.basis.repr x
  exact Real.sqrt (‚Äñr ‚ü®0, by omega‚ü©‚Äñ ^ 2 + ‚Äñr ‚ü®1, by omega‚ü©‚Äñ ^ 2)

noncomputable
instance normAdjoinRootOfAlgebraReal : --(h : ‚àÄ x : F, x ^ 2 ‚â† -1) :
    Norm (AdjoinRoot (Polynomial.X ^ 2 + 1 : Polynomial F)) where
      norm := normFunAdjoinRootOfAlgebraReal --h

open Polynomial in
lemma normFunAdjoinRootOfAlgebraReal_mul (x y : AdjoinRoot (X ^ 2 + 1 : Polynomial F)) :
    ‚Äñx * y‚Äñ = ‚Äñx‚Äñ * ‚Äñy‚Äñ := by
  simp only [normAdjoinRootOfAlgebraReal, normFunAdjoinRootOfAlgebraReal, AdjoinRoot.powerBasis_dim]

  sorry

def normedFieldAdjoinRootOfAlgebraReal  {F : Type*} [NormedField F] [Algebra ‚Ñù F]
    (h : ‚àÄ x : F, x ^ 2 ‚â† -1) :
    NormedField <| AdjoinRoot (.X ^ 2 + 1 : Polynomial F) where
      __ := fieldAdjoinRootOfAlgebraReal h
      __ := normAdjoinRootOfAlgebraReal h
      -- 'dist', 'dist_self', 'dist_comm', 'dist_triangle', 'eq_of_dist_eq_zero', 'dist_eq', 'norm_mul'

def normedAlgebraAdjoinRootOfNormedAlgebraReal {F : Type*} [NormedField F] [NormedAlgebra ‚Ñù F] (h : ‚àÄ x : F, x ^ 2 ‚â† -1) :
    NormedAlgebra ‚ÑÇ (AdjoinRoot (.X ^ 2 + 1 : Polynomial F)) := _


end

end Complex

namespace Real

variable {F : Type*} [Field F] [Algebra ‚Ñù F]
  {v : AbsoluteValue F ‚Ñù} (hv : AbsoluteValue.restrict ‚Ñù v = .abs)

noncomputable
def normedAlgebraOfAbsoluteValue : NormedAlgebra ‚Ñù (WithAbs v) where
  __ := ‚ÄπAlgebra ‚Ñù (WithAbs v)‚Ä∫
  norm_smul_le r x := by
    rw [Algebra.smul_def, norm_mul]
    refine le_of_eq ?_
    congr
    rw [WithAbs.norm_eq_abv, show ‚Äñr‚Äñ = AbsoluteValue.abs r from rfl, ‚Üê hv]
    rfl

noncomputable
def algEquivReal (hF : ‚àÄ x : F, x ^ 2 ‚â† -1) [CompleteSpace (WithAbs v)] : ‚Ñù ‚âÉ‚Çê[‚Ñù] WithAbs v := by
  letI alg‚ÑÇ := Complex.algebraAdjoinRootOfAlgebraReal hF

  sorry

end Real

namespace AbsoluteValue

namespace GelfandMazur

section preliminaries

section

variable {F : Type*} [Field F] [Algebra ‚ÑÇ F]

lemma inv_one_sub_add_inv_one_add {x : F} (h : ‚àÄ z : ‚ÑÇ, x ‚â† z ‚Ä¢ 1) :
    (1 - x)‚Åª¬π + (1 + x)‚Åª¬π = 2 * (1 - x ^ 2)‚Åª¬π := by
  have H‚ÇÅ : 1 - x ‚â† 0 := by
    specialize h 1
    simp only [one_smul] at h
    exact sub_ne_zero_of_ne h.symm
  have H‚ÇÇ : 1 + x ‚â† 0 := by
    specialize h (-1)
    simp only [neg_smul, one_smul] at h
    contrapose! h
    exact (neg_eq_of_add_eq_zero_right h).symm
  have H‚ÇÉ : 1 - x ^ 2 ‚â† 0 := by
    rw [show 1 - x ^ 2 = (1 - x) * (1 + x) by ring]
    exact (mul_ne_zero_iff_right H‚ÇÇ).mpr H‚ÇÅ
  field_simp
  ring

lemma sum_rootsOfUnity_inv_one_sub {x : F} (h : ‚àÄ z : ‚ÑÇ, x ‚â† z ‚Ä¢ 1) {n : ‚Ñï} {Œ∂ : ‚ÑÇ}
    (hŒ∂ : IsPrimitiveRoot Œ∂ (2 ^ n)) :
    ‚àë k ‚àà Finset.range (2 ^ n), (1 - Œ∂ ^ k ‚Ä¢ x)‚Åª¬π = 2 ^ n * (1 - x ^ (2 ^ n))‚Åª¬π := by
  induction n generalizing x Œ∂ with
  | zero => simp
  | succ n ih =>
    rw [pow_succ', Finset.sum_range_two_mul]
    have hŒ∂' : IsPrimitiveRoot (Œ∂ ^ 2) (2 ^ n) :=
      IsPrimitiveRoot.pow (Nat.two_pow_pos _) hŒ∂ Nat.pow_succ'
    have H := ih h hŒ∂'
    conv at H => enter [1, 2, k]; rw [‚Üê pow_mul]
    rw [H]; clear H
    have h' (z : ‚ÑÇ) : Œ∂ ‚Ä¢ x ‚â† z ‚Ä¢ 1 := by
      apply_fun fun y ‚Ü¶ Œ∂‚Åª¬π ‚Ä¢ y
      simpa [smul_smul, inv_mul_cancel‚ÇÄ (hŒ∂.ne_zero (Nat.two_pow_pos _).ne')] using h _
    have H := ih h' hŒ∂'
    conv at H =>  enter [1, 2, k]; rw [‚Üê pow_mul, smul_smul, ‚Üê pow_succ]
    rw [H]; clear H
    have hŒ∂'' : Œ∂ ^ 2 ^ n = -1 :=
      IsPrimitiveRoot.eq_neg_one_of_two_right <|
        IsPrimitiveRoot.pow (Nat.two_pow_pos _) hŒ∂ <| Nat.pow_succ ..
    have h'' (z : ‚ÑÇ) : x ^ 2 ^ n ‚â† z ‚Ä¢ 1 := by
      contrapose! h
      let w := z ^ ((1 : ‚ÑÇ) / 2 ^ n)
      have hw : z = w ^ 2 ^ n := by
        simp only [w]
        rw [‚Üê Complex.cpow_natCast, one_div]
        convert (Complex.cpow_inv_ofReal_mul_ofReal _ ?_).symm
        ¬∑ norm_cast
        ¬∑ exact_mod_cast Nat.one_le_two_pow
      let Œ∂F := algebraMap ‚ÑÇ F (Œ∂ ^ 2)
      have hŒ∂F : IsPrimitiveRoot Œ∂F (2 ^ n) :=
        hŒ∂'.map_of_injective <| FaithfulSMul.algebraMap_injective ..
      rw [hw, ‚Üê one_pow (2 ^ n), ‚Üê smul_pow, ‚Üê sub_eq_zero,
        hŒ∂F.pow_sub_pow_eq_prod_sub_mul x (w ‚Ä¢ 1) n.two_pow_pos, Finset.prod_eq_zero_iff] at h
      obtain ‚ü®Œæ, hŒæ, h‚ü© := h
      rw [sub_eq_zero] at h
      obtain ‚ü®Œæ', hŒæ'‚ÇÅ, hŒæ'‚ÇÇ‚ü© := IsPrimitiveRoot.map_nthRootsFinset hŒ∂' hŒæ
      refine ‚ü®Œæ' * w, ?_‚ü©
      rw [h, ‚Üê hŒæ'‚ÇÇ, Algebra.mul_smul_comm, mul_one, Algebra.algebraMap_eq_smul_one, smul_smul,
        mul_comm]
    rw [smul_pow, hŒ∂'', neg_smul, one_smul, sub_neg_eq_add, ‚Üê mul_add,
      inv_one_sub_add_inv_one_add h'', ‚Üê pow_mul', ‚Üê mul_assoc, ‚Üê pow_succ]

end

section

open Topology Filter in
example (f g : ‚Ñï ‚Üí ‚Ñù) (h : ‚àÄ n, |f n| ‚â§ g n) (h' : Tendsto g atTop (ùìù 0)) :
    Tendsto f atTop (ùìù 0) := by
  exact squeeze_zero_norm h h'

variable {F : Type*} [NormedField F]

open Topology Filter in
lemma tendsto_mul_norm_inv_one_sub_pow_sub_one {y : F} (hy : ‚Äñy‚Äñ < 1) :
    Tendsto (fun n : ‚Ñï ‚Ü¶ 2 ^ n * (‚Äñ(1 - y ^ 2 ^ n)‚Åª¬π‚Äñ - 1)) atTop (ùìù 0) := by
  have H‚ÇÄ (n : ‚Ñï) : 0 < 1 - ‚Äñy‚Äñ ^ 2 ^ n := by
    rw [sub_pos]
    exact pow_lt_one‚ÇÄ (norm_nonneg y) hy n.two_pow_pos.ne'
  have H (n : ‚Ñï) : (1 - y ^ 2 ^ n)‚Åª¬π = 1 + y ^ 2 ^ n / (1 - y ^ 2 ^ n) := by
    have : 1 - y ^ 2 ^ n ‚â† 0 := by
      intro h
      rw [sub_eq_zero] at h
      apply_fun (‚Äñ¬∑‚Äñ) at h
      rw [norm_one, norm_pow] at h
      specialize H‚ÇÄ n
      rw [‚Üê h] at H‚ÇÄ
      norm_num at H‚ÇÄ
    field_simp
  conv => enter [1, n]; rw [H, ‚Üê norm_one (Œ± := F)]
  have H' (n : ‚Ñï) : ‚Äñ2 ^ n * (‚Äñ1 + y ^ 2 ^ n / (1 - y ^ 2 ^ n)‚Äñ - ‚Äñ(1 : F)‚Äñ)‚Äñ ‚â§
      2 ^ n * ‚Äñy‚Äñ ^ 2 ^ n / (1 - ‚Äñy‚Äñ ^ 2 ^ n) := by
    rw [norm_mul, mul_div_assoc]
    gcongr (?_ * ?_)
    ¬∑ simp
    ¬∑ rw [Real.norm_eq_abs]
      refine (abs_norm_sub_norm_le ..).trans ?_
      rw [add_sub_cancel_left, norm_div, norm_pow]
      gcongr (_ / ?_)
      ¬∑ exact H‚ÇÄ _
      ¬∑ rw [‚Üê norm_pow, ‚Üê norm_one (Œ± := F)]
        exact norm_sub_norm_le ..
  exact squeeze_zero_norm H' <|  Real.tendsto_two_pow_mul_pow_div_one_sub_pow (norm_nonneg _) hy

variable [Algebra ‚ÑÇ F]

lemma locallyConstant_of_bounded {x : F} (h : ‚àÄ z : ‚ÑÇ, x ‚â† z ‚Ä¢ 1)
    (hb : ‚àÄ z : ‚ÑÇ, ‚Äñ(1 - z ‚Ä¢ x)‚Åª¬π‚Äñ ‚â§ 1) {w : ‚ÑÇ} (hw : ‚Äñw ‚Ä¢ x‚Äñ < 1) :
    ‚Äñ(1 - w ‚Ä¢ x)‚Åª¬π‚Äñ = 1 := by
  rcases eq_or_ne w 0 with rfl | hw‚ÇÄ
  ¬∑ simp
  refine le_antisymm (hb w) <| le_of_forall_lt fun c hc ‚Ü¶ ?_
  obtain ‚ü®n, hn‚ü© : ‚àÉ n, 2 ^ n * ‚Äñw ‚Ä¢ x‚Äñ ^ 2 ^ n / (1 - ‚Äñw ‚Ä¢ x‚Äñ ^ 2 ^ n) < 1 - c := by
    have := Real.tendsto_two_pow_mul_pow_div_one_sub_pow (norm_nonneg _) hw
    rw [NormedAddCommGroup.tendsto_atTop] at this
    specialize this (1 - c) (by linarith)
    obtain ‚ü®n, hn‚ü© := this
    specialize hn n le_rfl
    rw [Real.norm_eq_abs, sub_zero] at hn
    exact ‚ü®n, (le_abs_self _).trans_lt hn‚ü©
  rw [lt_sub_comm, mul_div_assoc] at hn
  have h' (z : ‚ÑÇ) : w ‚Ä¢ x ‚â† z ‚Ä¢ 1 := by sorry
  obtain ‚ü®Œ∂, hŒ∂‚ü© : ‚àÉ Œ∂ : ‚ÑÇ, IsPrimitiveRoot Œ∂ (2 ^ n) :=
    ‚ü®_, Complex.isPrimitiveRoot_exp (2 ^ n) n.two_pow_pos.ne'‚ü©
  have H‚ÇÅ := sum_rootsOfUnity_inv_one_sub h' hŒ∂
  rw [Finset.range_eq_Ico, Finset.sum_eq_sum_Ico_succ_bot n.two_pow_pos, pow_zero, one_smul,
    zero_add, eq_comm] at H‚ÇÅ
  apply_fun (‚Äñ¬∑‚Äñ) at H‚ÇÅ

  have H‚ÇÇ : 1 + 2 ^ n * (‚Äñ1 - (w ‚Ä¢ x) ^ 2 ^ n‚Äñ‚Åª¬π - 1) ‚â§ ‚Äñ(1 - (w ‚Ä¢ x))‚Åª¬π‚Äñ := by

    sorry

  stop
  rw [H‚ÇÅ]
  refine LT.lt.trans_le ?_ H‚ÇÇ
  rw [show 2 ^ n * ‚Äñ1 - (w ‚Ä¢ x) ^ 2 ^ n‚Äñ‚Åª¬π - (2 ^ n - 1) =
             1 - 2 ^ n * (1 - ‚Äñ1 - (w ‚Ä¢ x) ^ 2 ^ n‚Äñ‚Åª¬π) by ring]
  refine hn.trans_le ?_
  gcongr 1 - 2 ^ n * ?_
  have H‚ÇÉ : 1 - ‚Äñw ‚Ä¢ x‚Äñ ^ 2 ^ n ‚â† 0 := sorry
  rw [tsub_le_iff_tsub_le, one_sub_div H‚ÇÉ, ‚Üê norm_pow]
  -- a wrong turn somewhere
  stop
  have H : 1 - 2 ^ n * ‚Äñw ‚Ä¢ x‚Äñ ^ 2 ^ n / (1 - ‚Äñw ‚Ä¢ x‚Äñ ^ 2 ^ n) ‚â§
      1 - ‚Äñw ‚Ä¢ x‚Äñ ^ 2 ^ n * ‚Äñ2 ^ n * (1 - (w ‚Ä¢ x) ^ 2 ^ n)‚Åª¬π‚Äñ := by
    sorry
  refine hn.trans_le <| H.trans ?_
  rw [‚Üê sum_rootsOfUnity_inv_one_sub h' hŒ∂, Finset.range_eq_Ico, Finset.sum_eq_sum_Ico_succ_bot,
    pow_zero, one_smul]
  stop
  calc
  c < _ := hn
  _ ‚â§ 1 - 2 ^ n * ‚Äñw ‚Ä¢ x‚Äñ ^ 2 ^ n / ‚Äñ1 - (w ‚Ä¢ x) ^ 2 ^ n‚Äñ := sorry
  _ = 1 - ‚Äñw ‚Ä¢ x‚Äñ ^ 2 ^ n * ‚Äñ2 ^ n * (1 - (w ‚Ä¢ x) ^ 2 ^ n)‚Åª¬π‚Äñ := sorry
  _ = ‚Äñ(1 - w ‚Ä¢ x)‚Åª¬π‚Äñ := sorry



example (x y z : ‚Ñù) (h : x - y ‚â§ z) : x - z ‚â§ y := tsub_le_iff_tsub_le.mp h

end

variable {F : Type*} [Field F] {v : AbsoluteValue F ‚Ñù} [Algebra ‚Ñù F] --(h : ¬¨ IsNonarchimedean v)
    (h' : v.restrict ‚Ñù ‚âà .abs)

section auxiliary

open WithAbs

include h'

lemma _root_.WithAbs.continuous_equiv_symm_comp_algebraMap :
    Continuous <| ‚áë(equiv v).symm ‚àò (algebraMap ‚Ñù F) := by
  have H : Isometry (algebraMap (WithAbs (v.restrict ‚Ñù)) (WithAbs v)) :=
    isometry_of_comp (congrFun rfl)
  rw [show ‚áë(equiv v).symm ‚àò (algebraMap ‚Ñù F) =
        ‚áë(algebraMap (WithAbs (restrict ‚Ñù v)) (WithAbs v))
          ‚àò ‚áë(equiv‚ÇÇ AbsoluteValue.abs (restrict ‚Ñù v)) ‚àò ‚áë(equiv AbsoluteValue.abs).symm from rfl]
  exact H.continuous.comp <| (continuous_equiv‚ÇÇ (Setoid.symm h')).comp <|
    continuous_of_continuousAt_zero _ fun ‚¶É_‚¶Ñ a ‚Ü¶ a

-- Help `fun_prop` below.
-- Note that `fun_prop` on its own cannot fill in the argument `h'`,
-- so we use `fun_prop (disch := assumption)` below.
@[fun_prop]
lemma continuous_smul : Continuous fun p : ‚Ñù √ó WithAbs v ‚Ü¶ p.1 ‚Ä¢ p.2 :=
  (continuousSMul_of_algebraMap _ _ <| continuous_equiv_symm_comp_algebraMap h').continuous_smul

lemma continuous_expr {x : WithAbs v} (H : ‚àÄ a b : ‚Ñù, x ^ 2 + a ‚Ä¢ x + b ‚Ä¢ 1 ‚â† 0) :
    Continuous fun z : ‚ÑÇ ‚Ü¶ 2 * (x - z.re ‚Ä¢ 1) / ((x - z.re ‚Ä¢ 1) ^ 2 + z.im ^ 2 ‚Ä¢ 1) := by
  refine Continuous.div‚ÇÄ (by fun_prop (disch := assumption)) (by fun_prop (disch := assumption))
    fun z ‚Ü¶ ?_
  convert H (-2 * z.re) (z.re ^ 2 + z.im ^ 2) using 1
  simp only [Algebra.smul_def, mul_one, map_pow, neg_mul, map_neg, map_mul, map_ofNat, map_add]
  ring

section

variable {E : Type*} [SeminormedCommRing E] [Algebra ‚Ñù E]

-- lemma integral_eq

end

end auxiliary

-- We follow
--   Leonard Tornheim, *Normed fields over the real and complex fields*,
--   Michigan Math. J. 1 (1952), 61‚Äì68



/- Every element of `F` is algebraic (of degree at most `2`) over `‚Ñù`. -/
open Polynomial in
include h' in
lemma isIntegral (x : WithAbs v) : IsIntegral ‚Ñù x := by
  suffices ‚àÉ a b : ‚Ñù, x ^ 2 + a ‚Ä¢ x + b ‚Ä¢ 1 = 0 by
    obtain ‚ü®a, b, H‚ü© := this
    let p : ‚Ñù[X] := X ^ 2 + C a * X + C b
    have hpm : p.Monic := by simp only [p]; monicity!
    have hpd : p.natDegree = 2 := by simp only [p]; compute_degree!
    have hx : IsIntegral ‚Ñù (p.aeval x) := by
      simp only [Algebra.smul_def, mul_one] at H
      simpa [p, H] using isIntegral_zero
    exact IsIntegral.of_aeval_monic hpm (by omega) hx
  by_contra! H
  let f (z : ‚ÑÇ) : ‚Ñù := ‚Äñ2 * (x - z.re ‚Ä¢ 1) / ((x - z.re ‚Ä¢ 1) ^ 2 + z.im ^ 2 ‚Ä¢ 1)‚Äñ
  have hfc : Continuous f := continuous_norm.comp <| continuous_expr h' H
  sorry

-- #check NormedRing.algEquivComplexOfComplete

-- See #25332 by Junyan Xu
theorem nonempty_algEquiv_or_of_finrank_algClosure_eq_two
    {F F' : Type*} (E : Type*) [Field F] [Field F'] [Field E] [Algebra F F'] [Algebra F E]
    [Algebra.IsAlgebraic F E] [IsAlgClosed F'] (h : Module.finrank F F' = 2) :
    Nonempty (E ‚âÉ‚Çê[F] F) ‚à® Nonempty (E ‚âÉ‚Çê[F] F') := by
  have emb : E ‚Üí‚Çê[F] F' := IsAlgClosed.lift
  have e := AlgEquiv.ofInjectiveField emb
  have := Subalgebra.isSimpleOrder_of_finrank h
  obtain h | h := IsSimpleOrder.eq_bot_or_eq_top emb.range <;> rw [h] at e
  exacts [.inl ‚ü®e.trans <| Algebra.botEquiv ..‚ü©, .inr ‚ü®e.trans Subalgebra.topEquiv‚ü©]

lemma nonempty_algEquiv_real_or_of_algebra_real {F : Type*} [Field F] [Algebra ‚Ñù F]
    (h : (algebraMap ‚Ñù F).IsIntegral) :
    Nonempty (F ‚âÉ‚Çê[‚Ñù] ‚Ñù) ‚à® Nonempty (F ‚âÉ‚Çê[‚Ñù] ‚ÑÇ) :=
  have : Algebra.IsIntegral ‚Ñù F := ‚ü®h‚ü©
  nonempty_algEquiv_or_of_finrank_algClosure_eq_two F Complex.finrank_real_complex
--

include h' in
theorem main_thm : Nonempty (F ‚âÉ‚Çê[‚Ñù] ‚Ñù) ‚à® Nonempty (F ‚âÉ‚Çê[‚Ñù] ‚ÑÇ) :=
  nonempty_algEquiv_real_or_of_algebra_real (isIntegral h')

end preliminaries

end GelfandMazur


section

variable {F : Type*} [Field F] {v‚ÇÅ v‚ÇÇ : AbsoluteValue F ‚Ñù}

/-- The absolute value extending `v` on the completion of `F` with respect to `v`. -/
noncomputable
def Completion.absoluteValue (v : AbsoluteValue F ‚Ñù) : AbsoluteValue v.Completion ‚Ñù :=
  NormedField.toAbsoluteValue v.Completion

lemma Completion.absoluteValue_eq_norm (v : AbsoluteValue F ‚Ñù) (x : v.Completion) :
    absoluteValue v x = ‚Äñx‚Äñ := rfl

noncomputable
instance Completion.instAlgebra (v : AbsoluteValue F ‚Ñù) : Algebra (WithAbs v) v.Completion :=
  UniformSpace.Completion.algebra' _

noncomputable
instance Completion.instAlgebra' (v : AbsoluteValue F ‚Ñù) : Algebra F v.Completion :=
  Completion.instAlgebra v

@[simp]
lemma Completion.absoluteValue_restrict (v : AbsoluteValue F ‚Ñù) :
    (absoluteValue v).restrict F = v := by
  ext1 x
  rw [‚Üê apply_algebraMap, absoluteValue_eq_norm, show (algebraMap F v.Completion) x = x from rfl,
    UniformSpace.Completion.norm_coe]
  rfl

end


open Completion Rat.AbsoluteValue WithAbs in
/-- If `v` is an absolute value on `‚Ñù` such that `(‚Ñù, v)` is complete and the restriction of `v`
to `‚Ñö` is equivalent to the standard archimedean absolute value, then `v` is equivalent to
the standard absolute value of `‚Ñù`. -/
lemma Real.isEquiv_abs_of_restrict {v : AbsoluteValue ‚Ñù ‚Ñù} [CompleteSpace (WithAbs v)]
    (h : v.restrict ‚Ñö ‚âà real) :
    v ‚âà .abs := by
  -- Get chain `‚Ñù ‚âÉ real.Completion ‚âÉ (v.restrict ‚Ñö).Completion ‚Üí (‚Ñù,v)`
  -- of equivalences / maps of normed rings (`e‚ÇÇ‚Åª¬π`, `e‚ÇÅ‚Åª¬π`, `e‚ÇÉ` below).
  -- Then the composition is a ring homomorphism `‚Ñù ‚Üí+* ‚Ñù` and therefore the identity.
  -- So the last homomorphism is an isomorphism as well, and everything is a homeomorphism.
  let e‚ÇÅ : (restrict ‚Ñö v).Completion ‚âÉ+* real.Completion := ringEquiv_completion_of_isEquiv h
  have He‚ÇÅ : IsHomeomorph e‚ÇÅ := isHomeomorph_ringEquiv_completion h
  let e‚ÇÇ : real.Completion ‚âÉ+* ‚Ñù := ringEquiv_completion_real
  have He‚ÇÇ : IsHomeomorph e‚ÇÇ := isHomeomorph_ringEquiv_completion_real
  let e‚ÇÉ : (v.restrict ‚Ñö).Completion ‚Üí+* WithAbs v :=
    extensionEmbedding_of_comp (f := (Rat.castHom _).comp (equiv (v.restrict ‚Ñö))) fun _ ‚Ü¶ rfl
  let e : ‚Ñù ‚Üí+* WithAbs v := e‚ÇÉ.comp (e‚ÇÇ.symm.trans e‚ÇÅ.symm).toRingHom
  let e‚ÇÄ : ‚Ñù ‚Üí+* ‚Ñù := (equiv v).toRingHom.comp e
  have he‚ÇÄ : e‚ÇÄ = RingHom.id ‚Ñù := Subsingleton.elim ..
  have he‚ÇÄ' : Function.Bijective e‚ÇÄ := by
    simpa only [he‚ÇÄ, RingHom.coe_id] using Function.bijective_id
  have He‚ÇÉ : IsHomeomorph e‚ÇÉ :=
    (isometry_extensionEmbedding_of_comp fun _ ‚Ü¶ rfl).isHomeomorph_ofBijective <|
      e‚ÇÉ.bijective_of_bijective_comp he‚ÇÄ'
  have He : IsHomeomorph e := by
    simp only [e, RingEquiv.toRingHom_eq_coe, RingEquiv.coe_ringHom_trans, RingHom.coe_comp,
      RingHom.coe_coe]
    exact He‚ÇÉ.comp <| (He‚ÇÅ.right_inv e‚ÇÅ.apply_symm_apply).comp (He‚ÇÇ.right_inv e‚ÇÇ.apply_symm_apply)
  let e‚ÇÑ : WithAbs .abs ‚âÉ+* ‚Ñù := equiv .abs
  have He‚ÇÑ : IsHomeomorph e‚ÇÑ :=
    ((AddMonoidHomClass.isometry_iff_norm e‚ÇÑ).mpr (congrFun rfl)).isHomeomorph_ofEquiv
  symm
  -- Use that two absoloute values are equivalent iff the identity map
  -- between the two topological spaces is a homeomorphism.
  refine (isEquiv_iff_isHomeomorph .abs v).mpr ?_
  have he : e = (equiv v).symm := by
    suffices e = (equiv v).symm.toRingHom.comp e‚ÇÄ by
      simpa only [he‚ÇÄ, RingEquiv.toRingHom_eq_coe, RingHomCompTriple.comp_eq] using this
    ext1 x
    simpa [e‚ÇÄ] using (RingEquiv.symm_apply_apply (equiv v) (e x)).symm
  have H : ‚áë(equiv‚ÇÇ .abs v) = e.comp e‚ÇÑ.toRingHom := by simp [equiv‚ÇÇ, he, e‚ÇÑ]
  simpa only [H, RingEquiv.toRingHom_eq_coe, RingHom.coe_comp, RingHom.coe_coe] using He.comp He‚ÇÑ

open Rat.AbsoluteValue in
/-- If `v` is an absolute value on `‚Ñù` such that `(‚Ñù, v)` is complete and the restriction of `v`
to `‚Ñö` is equal to the standard archimedean absolute value,
then `v` is the standard absolute value of `‚Ñù`. -/
lemma Real.eq_abs_of_restrict_eq_ratReal {v : AbsoluteValue ‚Ñù ‚Ñù} [CompleteSpace (WithAbs v)]
    (h : v.restrict ‚Ñö = real) :
    v = .abs := by
  have h' : v.restrict ‚Ñö ‚âà real := by rw [h]
  refine eq_of_isEquiv_of_restrict_eq (isEquiv_abs_of_restrict h') h ?_
  rw [h]
  exact ‚ü®2, two_ne_zero, by simp‚ü©

variable {F : Type*} [Field F] {v : AbsoluteValue F ‚Ñù} [CompleteSpace (WithAbs v)]

omit [CompleteSpace (WithAbs v)] in
open WithAbs in
lemma comap_eq_of_isometry {F' : Type*} [Field F'] {v' : AbsoluteValue F' ‚Ñù}
    {f : WithAbs v ‚Üí+* WithAbs v'} (h : Isometry f) :
    v'.comap ((equiv v').toRingHom.comp (f.comp (equiv v).symm.toRingHom)) = v := by
  ext1 x
  rw [comap_apply]
  simp only [RingEquiv.toRingHom_eq_coe, RingHom.coe_comp, RingHom.coe_coe, Function.comp_apply]
  rw [‚Üê norm_eq_abv, (AddMonoidHomClass.isometry_iff_norm _).mp h, norm_eq_abv]
  simp

omit [CompleteSpace (WithAbs v)] in
open WithAbs in
lemma comap_completion_eq_of_isometry {F' : Type*} [Field F'] (v' : AbsoluteValue F' ‚Ñù)
    {f : v.Completion ‚Üí+* F'} (h : Isometry ((equiv v').symm.toRingHom.comp f)) :
    v'.comap f = Completion.absoluteValue v := by
  ext1 x
  rw [comap_apply]
  have := (AddMonoidHomClass.isometry_iff_norm _).mp h x
  simpa only [RingEquiv.toRingHom_eq_coe, RingHom.coe_comp, RingHom.coe_coe, Function.comp_apply,
    norm_eq_abv, RingEquiv.apply_symm_apply, ‚Üê Completion.absoluteValue_eq_norm] using this

omit [CompleteSpace (WithAbs v)] in
open WithAbs in
lemma isometry_equiv_comap {F' : Type*} [Field F'] (f : F' ‚âÉ+* v.Completion) :
    Isometry ((equiv ((Completion.absoluteValue v).comap f)).trans f) := by
  have H : Isometry (equiv (Completion.absoluteValue v)) :=
    (AddMonoidHomClass.isometry_iff_norm _).mpr (congrFun rfl)
  replace H := H.comp <| isometry_comap (Completion.absoluteValue v) f.toRingHom
  simpa only [RingEquiv.coe_trans, RingEquiv.toRingHom_eq_coe, RingHom.coe_comp,
    RingHom.coe_coe] using H

omit [CompleteSpace (WithAbs v)] in
open WithAbs in
lemma isHomeomorph_equiv_comap {F' : Type*} [Field F'] (f : F' ‚âÉ+* v.Completion) :
    IsHomeomorph ((equiv ((Completion.absoluteValue v).comap f)).trans f) :=
  (isometry_equiv_comap f).isHomeomorph_ofEquiv

open WithAbs RingEquiv Rat.AbsoluteValue in
/-- A field `F` that is complete w.r.t. an archimedean absolute value is an `‚Ñù`-algebra
such that the pull-back of its absolute value to `‚Ñù` is equivalent to the standard
absolute value. -/
lemma algebra_of_archimedean (h : ¬¨ IsNonarchimedean v) :
    ‚àÉ e : ‚Ñù ‚Üí+* F, v.comap e ‚âà .abs := by
  -- We have the canonical ring homomorphism `e‚ÇÄ : ‚Ñö ‚Üí F`.
  have : CharZero (WithAbs v) := charZero_of_archimedean h
  let e‚ÇÄ := Rat.castHom (WithAbs v)
  -- We pull back `v` from `F` to `‚Ñö` to obtain `v‚ÇÄ`.
  let v‚ÇÄ := v.comap e‚ÇÄ
  -- Then `v‚ÇÄ` is equivalent to the archimedean absolute value on `‚Ñö`.
  have hv‚ÇÄ : v‚ÇÄ ‚âà real := real_of_archimedean <| mt isNonarchmedean_comap_iff.mp h
  -- By functoriality of the completion, we obtain a ring homomorphism and isometry
  -- `e‚ÇÅ : v‚ÇÄ.Completion ‚Üí F`.
  let e‚ÇÅ : v‚ÇÄ.Completion ‚Üí+* WithAbs v :=
    Completion.extensionEmbedding_of_comp (f := e‚ÇÄ) fun _ ‚Ü¶ rfl
  have he‚ÇÅ : Isometry e‚ÇÅ := Completion.isometry_extensionEmbedding_of_comp fun _ ‚Ü¶ rfl
  -- The pull-back ov `v` under `e‚ÇÅ` is the absolute value of the completion.
  have H‚ÇÅ : v.comap e‚ÇÅ = Completion.absoluteValue v‚ÇÄ :=
    comap_completion_eq_of_isometry v he‚ÇÅ
  -- We can identify `v‚ÇÄ.Completion` with `‚Ñù` via a ring isomorphism and
  -- homeomorphism `e‚ÇÑ : ‚Ñù ‚Üí v‚ÇÄ.Completion` (built in two steps).
  let e‚ÇÇ := ringEquiv_completion_of_isEquiv hv‚ÇÄ
  let e‚ÇÉ := ringEquiv_completion_real
  let e‚ÇÑ := e‚ÇÉ.symm.trans e‚ÇÇ.symm
  have He‚ÇÉ : IsHomeomorph e‚ÇÉ := isHomeomorph_ringEquiv_completion_real
  have He‚ÇÇ : IsHomeomorph e‚ÇÇ := isHomeomorph_ringEquiv_completion hv‚ÇÄ
  have He‚ÇÑ : IsHomeomorph e‚ÇÑ := by
    simp only [coe_trans, e‚ÇÑ]
    exact He‚ÇÇ.ringEquiv_symm.comp He‚ÇÉ.ringEquiv_symm
  -- The pull-back of the absolute value of the completion to `‚Ñù` under `e‚ÇÑ`
  -- is equivalent to the standard absolute value.
  have H‚ÇÇ : (Completion.absoluteValue v‚ÇÄ).comap e‚ÇÑ ‚âà .abs := by
    refine (isEquiv_iff_isHomeomorph _ .abs).mpr ?_
    simp only [equiv‚ÇÇ, toRingHom_eq_coe, coe_trans]
    refine isHomeomorph_equiv_realAbs.ringEquiv_symm.comp ?_
    convert He‚ÇÑ.ringEquiv_symm.comp <|isHomeomorph_equiv_comap e‚ÇÑ
    rw [coe_trans, ‚Üê Function.comp_assoc, ‚Üê coe_trans, self_trans_symm, coe_refl,
      Function.id_comp]
  -- Finally, we take `e = e‚ÇÅ ‚àò e‚ÇÑ` and reduce to the statement `H‚ÇÇ` above.
  exact ‚ü®e‚ÇÅ.comp e‚ÇÑ, by rwa [comap_comp, H‚ÇÅ]‚ü©

/-- If an absolute value `v` on `‚Ñù` is equivalent to the standard absolute value `|¬∑|`,
then `v = |¬∑| ^ e` for some `0 < e ‚â§ 1`. -/
lemma _root_.Real.AbsoluteValue.eq_rpow_of_isEquiv_abs {v : AbsoluteValue ‚Ñù ‚Ñù} (hv : v ‚âà .abs) :
    ‚àÉ (e : ‚Ñù) (h‚ÇÄ : 0 < e) (h‚ÇÅ : e ‚â§ 1), v = AbsoluteValue.rpow .abs h‚ÇÄ h‚ÇÅ := by
  have H‚ÇÅ : v.restrict ‚Ñö ‚âà Rat.AbsoluteValue.real :=
    Setoid.trans (isEquiv_comap (algebraMap ‚Ñö ‚Ñù) hv) <| Setoid.refl _
  obtain ‚ü®e, he‚ÇÄ, he‚ÇÅ, he‚ü© := Rat.AbsoluteValue.eq_rpow_of_isEquiv_real H‚ÇÅ
  refine ‚ü®e, he‚ÇÄ, he‚ÇÅ, ?_‚ü©
  refine eq_of_isEquiv_of_restrict_eq ?_ he ?_
  ¬∑ exact Setoid.trans hv <| Setoid.symm (isEquiv_rpow AbsoluteValue.abs he‚ÇÄ he‚ÇÅ)
  ¬∑ rw [isNontrivial_iff_ne_trivial]
    intro h
    replace H‚ÇÅ := Setoid.symm H‚ÇÅ
    rw [h, eq_trivial_of_isEquiv_trivial] at H‚ÇÅ
    revert H‚ÇÅ
    change _ ‚â† _
    rw [‚Üê isNontrivial_iff_ne_trivial]
    exact ‚ü®2, two_ne_zero, by simp‚ü©

lemma _root_.Complex.AbsoluteValue.isEquiv_abv_of_restrict {v : AbsoluteValue ‚ÑÇ ‚Ñù}
    [CompleteSpace (WithAbs <| v.restrict ‚Ñù)] (h : v.restrict ‚Ñù ‚âà .abs) :
    v ‚âà NormedField.toAbsoluteValue ‚ÑÇ := by
  have H‚ÇÅ := AbsoluteValue.lemma_6_1_a (F' := ‚ÑÇ) (v.restrict ‚Ñù)
  obtain ‚ü®e, he‚ÇÄ, he‚ÇÅ, he‚ü© := Real.AbsoluteValue.eq_rpow_of_isEquiv_abs h
  let v' := (NormedField.toAbsoluteValue ‚ÑÇ).rpow he‚ÇÄ he‚ÇÅ
  have hv' : v'.restrict ‚Ñù = v.restrict ‚Ñù := by
    simp only [v', he]
    ext1 x
    simp only [restrict, comap_apply, Complex.coe_algebraMap, rpow_apply, Pi.pow_apply, abs_apply]
    rw [show (NormedField.toAbsoluteValue ‚ÑÇ) ‚Üëx = ‚Äñ(x : ‚ÑÇ)‚Äñ from rfl, Complex.norm_real,
      Real.norm_eq_abs]
  rw [show v = v' from congrArg Subtype.val <| @Subsingleton.elim _ H‚ÇÅ ‚ü®v, rfl‚ü© ‚ü®v', hv'‚ü©]
  simp only [v']
  exact isEquiv_rpow (NormedField.toAbsoluteValue ‚ÑÇ) he‚ÇÄ he‚ÇÅ


theorem equiv_R_or_C_of_complete_archimedean (h : ¬¨ IsNonarchimedean v) :
    (‚àÉ e : ‚Ñù ‚âÉ+* F, v.comap e ‚âà .abs)
      ‚à® ‚àÉ e : ‚ÑÇ ‚âÉ+* F, v.comap e ‚âà NormedField.toAbsoluteValue ‚ÑÇ := by
  obtain ‚ü®e, he‚ü© := algebra_of_archimedean h
  let inst := e.toAlgebra
  rcases GelfandMazur.main_thm he with H | H <;> let e' := Classical.choice H
  ¬∑ -- `F` is isomorphic to `‚Ñù`.
    refine .inl ‚ü®e'.symm, ?_‚ü©
    convert he
    have : (e' : F ‚Üí+* ‚Ñù).comp e = RingHom.id ‚Ñù := Subsingleton.elim ..
    rw [show ((e'.symm : ‚Ñù ‚âÉ+* F) : ‚Ñù ‚Üí+* F) = e'.symm from rfl,
      ‚Üê RingHom.comp_id (e'.symm : ‚Ñù ‚Üí+* F), ‚Üê this]
    ext1
    simp
  ¬∑ -- `F` is isomorphic to `‚ÑÇ` as an `‚Ñù`-algebra.
    refine .inr ‚ü®e'.symm, ?_‚ü©
    have H : (e' : F ‚Üí+* ‚ÑÇ).comp e = algebraMap ‚Ñù ‚ÑÇ := by
      suffices AlgHom.comp e' (Algebra.ofId ‚Ñù F) = Algebra.ofId ‚Ñù ‚ÑÇ from
        congrArg AlgHom.toRingHom this
      exact Subsingleton.elim ..
    suffices v.comap ((e'.symm : ‚ÑÇ ‚Üí+* F).comp (algebraMap ‚Ñù ‚ÑÇ)) ‚âà .abs by
      rw [comap_comp] at this
      have inst : CompleteSpace (WithAbs (restrict ‚Ñù (R := ‚ÑÇ) (v.comap e'.symm))) :=
        completeSpace_of_isEquiv <| Setoid.symm this
      convert Complex.AbsoluteValue.isEquiv_abv_of_restrict this
    convert he
    rw [‚Üê H]
    ext1
    simp

end AbsoluteValue

end GelfandMazur

end complete
