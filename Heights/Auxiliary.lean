import Mathlib

/-!
### Auxiliary statements

These fill API gaps in Mathlib and should eventually go there.
-/

section general

open Filter in
lemma Real.le_of_forall_pow_le_mul_pow {a b x y : ‚Ñù} (ha : 0 < a) (hb : 0 ‚â§ b) (hx : 0 ‚â§ x)
    (hy : 0 ‚â§ y) (h : ‚àÄ·∂† (N : ‚Ñï) in atTop, x ^ N ‚â§ (a * N + b) * y ^ N) :
    x ‚â§ y := by
  replace h : ‚àÄ·∂† (N : ‚Ñï) in atTop, x ‚â§ (a * N + b) ^ (1 / N : ‚Ñù) * y := by
    rw [eventually_atTop] at h ‚ä¢
    obtain ‚ü®m, hm‚ü© := h
    refine ‚ü®max 1 m, fun n hn ‚Ü¶ ?_‚ü©
    specialize hm n <| le_of_max_le_right hn
    have hn' : 1 ‚â§ n := le_of_max_le_left hn
    have : MonotoneOn (fun x : ‚Ñù ‚Ü¶ x ^ (1 / n : ‚Ñù)) {x | 0 ‚â§ x} :=
      Real.strictMonoOn_rpow_Ici_of_exponent_pos (by positivity) |>.monotoneOn
    have H‚ÇÅ : x ^ n ‚àà {x | 0 ‚â§ x} := by
      simp only [Set.mem_setOf_eq]
      exact pow_nonneg hx n
    have H‚ÇÇ : (a * n + b) * y ^ n ‚àà {x | 0 ‚â§ x} := by
      simp only [Set.mem_setOf_eq]
      positivity
    have := this H‚ÇÅ H‚ÇÇ hm
    dsimp only at this
    rwa [‚Üê Real.rpow_natCast_mul hx, mul_one_div_cancel (by norm_cast; omega),
      Real.rpow_one,
      Real.mul_rpow (by positivity) (by positivity), ‚Üê Real.rpow_natCast_mul (by positivity),
      mul_one_div_cancel (by norm_cast; omega), Real.rpow_one] at this
  refine ge_of_tendsto ?_ h
  conv => enter [3]; rw [‚Üê one_mul y]
  refine Tendsto.mul ?_ tendsto_const_nhds
  have := tendsto_rpow_div_mul_add a 1 (-b) zero_ne_one
  have hn : Tendsto (fun x : ‚Ñù ‚Ü¶ (a * x + b)) atTop atTop :=
    tendsto_atTop_add_const_right atTop b <| Tendsto.const_mul_atTop ha tendsto_id
  refine (this.comp (hn.comp tendsto_natCast_atTop_atTop)).congr fun N ‚Ü¶ ?_
  rcases eq_or_ne N 0 with rfl | hN‚ÇÄ
  ¬∑ simp
  simp only [one_mul, Function.comp_apply, add_neg_cancel_right]
  congr 1
  field_simp

end general

namespace Isometry

lemma isHomeomorph_ofBijective {Œ± Œ≤ F : Type*} [PseudoEMetricSpace Œ±] [PseudoEMetricSpace Œ≤]
    [FunLike F Œ± Œ≤] {f : F} (hf : Isometry f) (hb : Function.Bijective f) :
    IsHomeomorph f := by
  obtain ‚ü®g, hg‚ÇÅ, hg‚ÇÇ‚ü© := Function.bijective_iff_has_inverse.mp hb
  exact IsHomeomorph.mk hf.continuous
    (IsOpenMap.of_inverse (hf.right_inv hg‚ÇÇ).continuous hg‚ÇÇ hg‚ÇÅ) hb

lemma isHomeomorph_ofEquiv {Œ± Œ≤ E : Type*} [PseudoEMetricSpace Œ±] [PseudoEMetricSpace Œ≤]
    [EquivLike E Œ± Œ≤] {f : E} (hf : Isometry f) :
    IsHomeomorph f :=
  hf.isHomeomorph_ofBijective <| EquivLike.bijective f

end Isometry

namespace IsHomeomorph

lemma right_inv {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y] {f : X ‚Üí Y} {g : Y ‚Üí X}
    (h : Function.RightInverse g f) (hh : IsHomeomorph f) :
    IsHomeomorph g := by
  obtain ‚ü®e, he‚ü© := isHomeomorph_iff_exists_homeomorph.mp hh
  refine isHomeomorph_iff_exists_homeomorph.mpr ‚ü®e.symm, ?_‚ü©
  ext1 y
  nth_rewrite 1 [‚Üê h y]
  apply_fun e
  simp [he]

lemma ringEquiv_symm {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y] [Semiring X]
    [Semiring Y] {e : X ‚âÉ+* Y} (h : IsHomeomorph e) :
    IsHomeomorph e.symm :=
  h.right_inv fun x ‚Ü¶ e.apply_symm_apply x

end IsHomeomorph

namespace RingHom

lemma bijective_of_bijective_comp {R‚ÇÅ R‚ÇÇ R‚ÇÉ R‚ÇÑ : Type*} [NonAssocSemiring R‚ÇÅ] [NonAssocSemiring R‚ÇÇ]
    [NonAssocSemiring R‚ÇÉ] [NonAssocSemiring R‚ÇÑ] {e‚ÇÅ : R‚ÇÅ ‚âÉ+* R‚ÇÇ} {e‚ÇÇ : R‚ÇÇ ‚Üí+* R‚ÇÉ} {e‚ÇÉ : R‚ÇÉ ‚âÉ+* R‚ÇÑ}
    (h : Function.Bijective (e‚ÇÉ.toRingHom.comp <| e‚ÇÇ.comp e‚ÇÅ.toRingHom)) :
    Function.Bijective e‚ÇÇ := by
  let e : R‚ÇÅ ‚Üí+* R‚ÇÑ := e‚ÇÉ.toRingHom.comp <| e‚ÇÇ.comp e‚ÇÅ.toRingHom
  have : e‚ÇÇ = e‚ÇÉ.symm.toRingHom.comp (e.comp e‚ÇÅ.symm.toRingHom) := by ext1; simp [e]
  simpa [this]

end RingHom

section Rat

-- maybe unnecessary...
@[simp]
lemma Rat.castHom_apply {R : Type*} [DivisionRing R] [CharZero R] (x : ‚Ñö) :
  castHom R x = x := rfl

end Rat

section aux

variable {Œ± Œ≤ : Type*}

lemma max_eq_iSup [ConditionallyCompleteLattice Œ±] (a b : Œ±) : max a b = iSup ![a, b] :=
  eq_of_forall_ge_iff <| by simp [ciSup_le_iff, Fin.forall_fin_two]

-- [Mathlib.Analysis.SpecialFunctions.Pow.Real]
lemma Real.max_map_rpow {x y c : ‚Ñù} (hx : 0 ‚â§ x) (hy : 0 ‚â§ y) (hc : 0 ‚â§ c) :
    max (x ^ c) (y ^ c) = max x y ^ c := by
  rcases le_total x y with h | h
  ¬∑ simpa only [h, sup_of_le_right, sup_eq_right] using Real.rpow_le_rpow hx h hc
  ¬∑ simpa only [h, sup_of_le_left, sup_eq_left] using Real.rpow_le_rpow hy h hc

lemma Real.iSup_pow_of_nonneg [Fintype Œ±] [Nonempty Œ±] {f : Œ± ‚Üí ‚Ñù} (hf : ‚àÄ a, 0 ‚â§ f a) (n : ‚Ñï) :
    (‚®Ü a, f a) ^ n = ‚®Ü a, (f a ^ n) := by
  have H a : ((f a).toNNReal  : ‚Ñù) = f a := Real.coe_toNNReal (f a) (hf a)
  conv => enter [1, 1, 1, a]; rw [‚Üê H]
  conv => enter [2, 1, a]; rw [‚Üê H]
  norm_cast
  exact Monotone.map_ciSup_of_continuousAt ((continuous_pow n).continuousAt)
    (pow_left_mono n) (Finite.bddAbove_range _)

@[to_additive]
lemma finprod_mono [CommMonoid Œ≤] [PartialOrder Œ≤] [IsOrderedMonoid Œ≤] {f g : Œ± ‚Üí Œ≤} (hf : f.mulSupport.Finite)
    (hg : g.mulSupport.Finite) (h : f ‚â§ g) :
    ‚àè·∂† a, f a ‚â§ ‚àè·∂† a, g a := by
  have : Fintype ‚Üë(f.mulSupport ‚à™ g.mulSupport) := (Set.Finite.union hf hg).fintype
  let s := (f.mulSupport ‚à™ g.mulSupport).toFinset
  have hf‚ÇÅ : f.mulSupport ‚äÜ s := by
    simp only [Set.coe_toFinset, Set.subset_union_left, s]
  have hg‚ÇÅ : g.mulSupport ‚äÜ s := by
    simp only [Set.coe_toFinset, Set.subset_union_right, s]
  rw [finprod_eq_finset_prod_of_mulSupport_subset f hf‚ÇÅ,
    finprod_eq_finset_prod_of_mulSupport_subset g hg‚ÇÅ]
  exact Finset.prod_le_prod' fun i _ ‚Ü¶ h i

/-- Monotonicity of `finprod`. See `finprod_mono` for a variant
where `Œ≤` is a `OrderedCommMonoid`. -/
lemma finprod_mono' [CommMonoidWithZero Œ≤] [PartialOrder Œ≤] [ZeroLEOneClass Œ≤] [PosMulMono Œ≤]
    {f g : Œ± ‚Üí Œ≤} (hf : f.mulSupport.Finite) (hf‚ÇÄ : ‚àÄ a, 0 ‚â§ f a)
    (hg : g.mulSupport.Finite) (h : f ‚â§ g) :
    ‚àè·∂† a, f a ‚â§ ‚àè·∂† a, g a := by
  have : Fintype ‚Üë(f.mulSupport ‚à™ g.mulSupport) := (Set.Finite.union hf hg).fintype
  let s := (f.mulSupport ‚à™ g.mulSupport).toFinset
  have hf‚ÇÅ : f.mulSupport ‚äÜ s := by
    simp only [Set.coe_toFinset, Set.subset_union_left, s]
  have hg‚ÇÅ : g.mulSupport ‚äÜ s := by
    simp only [Set.coe_toFinset, Set.subset_union_right, s]
  rw [finprod_eq_finset_prod_of_mulSupport_subset f hf‚ÇÅ,
    finprod_eq_finset_prod_of_mulSupport_subset g hg‚ÇÅ]
  exact Finset.prod_le_prod (fun i _ ‚Ü¶ hf‚ÇÄ i) fun i _ ‚Ü¶ h i

@[to_additive]
lemma Function.mulSupport_mul_finite [Monoid Œ≤] {f g : Œ± ‚Üí Œ≤} (hf : f.mulSupport.Finite)
    (hg : g.mulSupport.Finite) :
    (Function.mulSupport fun a ‚Ü¶ f a * g a).Finite :=
  (hf.union hg).subset <| mulSupport_mul f g

lemma one_le_finprod {M : Type*} [CommMonoidWithZero M] [Preorder M] [ZeroLEOneClass M]
    [PosMulMono M] {f : Œ± ‚Üí M} (hf : ‚àÄ i, 1 ‚â§ f i) :
    1 ‚â§ ‚àè·∂† i, f i :=
  finprod_induction _ le_rfl (fun _ _ ‚Ü¶ one_le_mul_of_one_le_of_one_le) hf

lemma Finset.one_le_prod [DecidableEq Œ±] (s : Finset Œ±) {M : Type*} [CommMonoidWithZero M]
    [Preorder M] [ZeroLEOneClass M] [PosMulMono M] {f : Œ± ‚Üí M} (hf : ‚àÄ i, 1 ‚â§ f i) :
    1 ‚â§ ‚àè i ‚àà s, f i := by
  induction s using Finset.induction with
  | empty => simp
  | @insert a s h ih => simpa [h] using one_le_mul_of_one_le_of_one_le (hf a) ih

variable {K : Type*} [Field K] {Œπ : Type*} [Fintype Œπ]

lemma AbsoluteValue.iSup_eq_subtype (v : AbsoluteValue K ‚Ñù) {x : Œπ ‚Üí K} (hx : x ‚â† 0) :
    ‚®Ü i, v (x i) = ‚®Ü i : {j // x j ‚â† 0}, v (x i) := by
  have ‚ü®i, hi‚ü© : ‚àÉ j, x j ‚â† 0 := Function.ne_iff.mp hx
  have : Nonempty {j // x j ‚â† 0} := Nonempty.intro ‚ü®i, hi‚ü©
  have : Nonempty Œπ := Nonempty.intro i
  apply le_antisymm
  ¬∑ refine ciSup_le fun j ‚Ü¶ ?_
    rcases eq_or_ne (x j) 0 with h | h
    ¬∑ rw [h, AbsoluteValue.map_zero]
      exact Real.iSup_nonneg' ‚ü®‚ü®i, hi‚ü©, AbsoluteValue.nonneg ..‚ü©
    ¬∑ exact le_ciSup_of_le (Finite.bddAbove_range _) ‚ü®j, h‚ü© le_rfl
  ¬∑ exact ciSup_le fun ‚ü®j, hj‚ü© ‚Ü¶ le_ciSup_of_le (Finite.bddAbove_range _) j le_rfl

lemma AbsoluteValue.max_one_eq_iSup (v : AbsoluteValue K ‚Ñù) (x : K) :
    v x ‚äî 1 = ‚®Ü i, v (![x, 1] i) := by
  have H (i : Fin 2) : v (![x, 1] i) = ![v x, 1] i := by fin_cases i <;> simp
  simp_rw [H]
  exact max_eq_iSup (v x) 1

variable [NumberField K]

lemma NumberField.FinitePlace.add_le (v : FinitePlace K) (x y : K) :
    v (x + y) ‚â§ max (v x) (v y) := by
  simp_rw [‚Üê NumberField.FinitePlace.norm_embedding_eq, map_add]
  rcases le_total ‚Äñembedding v.maximalIdeal x‚Äñ ‚Äñembedding v.maximalIdeal y‚Äñ with h | h
  ¬∑ refine le_sup_of_le_right ?_
    rw [Valued.toNormedField.norm_le_iff] at h ‚ä¢
    exact sup_of_le_right h ‚ñ∏ Valuation.map_add_le_max' Valued.v ..
  ¬∑ refine le_sup_of_le_left ?_
    rw [Valued.toNormedField.norm_le_iff] at h ‚ä¢
    exact sup_of_le_left h ‚ñ∏ Valuation.map_add_le_max' Valued.v ..

instance : NonarchimedeanHomClass (NumberField.FinitePlace K) K ‚Ñù where
  map_add_le_max v a b := NumberField.FinitePlace.add_le v a b

end aux

section Mathlib.Topology.Algebra.Module.FiniteDimension

variable  {ùïú E E' : Type*} [NontriviallyNormedField ùïú] [CompleteSpace ùïú] [AddCommGroup E]
  [Module ùïú E] [FiniteDimensional ùïú E] [TopologicalSpace E] [IsTopologicalAddGroup E]
  [ContinuousSMul ùïú E] [T2Space E] [AddCommGroup E'] [Module ùïú E'] [TopologicalSpace E']
  [IsTopologicalAddGroup E'] [ContinuousSMul ùïú E'] [T2Space E']

/-- The homeomorphism induced by a linear isomorphism between two finite-dimensional vector spaces
over a complete nontrivially normed field. -/
def FiniteDimensional.homeomorph_of_linearEquiv (f : E ‚âÉ‚Çó[ùïú] E') : E ‚âÉ‚Çú E' :=
  Homeomorph.mk f f.toLinearMap.continuous_of_finiteDimensional <| by
    have : FiniteDimensional ùïú E' := Module.Finite.equiv f
    exact f.symm.toLinearMap.continuous_of_finiteDimensional

end Mathlib.Topology.Algebra.Module.FiniteDimension

-- more API lemmas

section

lemma Algebra.charpoly_aeval_self_eq_zero {F R : Type*} [Field F] [Ring R]
    [Algebra F R] [FiniteDimensional F R] (x : R) :
    (LinearMap.mulLeft F x).charpoly.aeval x = 0 := by
  let p := (LinearMap.mulLeft F x).charpoly
  have : p.aeval (LinearMap.mulLeft F x) = 0 := LinearMap.aeval_self_charpoly _
  apply_fun (¬∑ 1) at this
  simp only [Polynomial.aeval_endomorphism, LinearMap.pow_mulLeft, LinearMap.mulLeft_apply,
    mul_one, LinearMap.zero_apply] at this
  rw [Polynomial.sum_eq_of_subset _ (p := p) (by simp) Polynomial.supp_subset_range_natDegree_succ] at this
  rwa [Polynomial.aeval_eq_sum_range]

lemma LinearMap.charpoly_eraseLead_natDegree_le {F R : Type*} [Field F] [AddCommGroup R]
    [Nontrivial R] [Module F R] [FiniteDimensional F R] (f : R ‚Üí‚Çó[F] R) :
  f.charpoly.eraseLead.natDegree + 1 ‚â§ Module.finrank F R := by
  have hnd := f.charpoly_natDegree
  by_cases hnc : f.charpoly.nextCoeff = 0
  ¬∑ have : 0 < Module.finrank F R := Module.finrank_pos
    have := Polynomial.natDegree_eraseLead_le_of_nextCoeff_eq_zero hnc
    omega
  ¬∑ exact hnd ‚ñ∏ (Polynomial.natDegree_eraseLead_add_one hnc).le

end

section Mathlib.Analysis.Normed.Ring.WithAbs

namespace WithAbs

/-- The identity map of `F` as a ring isomorphism between normed field structures on `F` induce
by two absolute values- -/
abbrev equiv‚ÇÇ {R : Type*} [Semiring R] (v‚ÇÅ v‚ÇÇ : AbsoluteValue R ‚Ñù) : WithAbs v‚ÇÅ ‚âÉ+* WithAbs v‚ÇÇ :=
  (equiv v‚ÇÅ).trans (equiv v‚ÇÇ).symm

@[simp]
lemma equiv‚ÇÇ_symm_eq {R : Type*} [Semiring R] (v‚ÇÅ v‚ÇÇ : AbsoluteValue R ‚Ñù) :
    (equiv‚ÇÇ v‚ÇÅ v‚ÇÇ).symm = equiv‚ÇÇ v‚ÇÇ v‚ÇÅ := by
  ext1
  simp

@[simp]
lemma apply_equiv {R Œ± : Type*} [Semiring R] (f : R ‚Üí Œ±) (v : AbsoluteValue R ‚Ñù) (x : R) :
    f (equiv v x) = f x := rfl

section equal

variable {R : Type*} [Ring R] {v v' : AbsoluteValue R ‚Ñù} (h : v = v')

include h in
lemma uniformContinuous_equiv‚ÇÇ_of_eq : UniformContinuous (equiv‚ÇÇ v v') := by
  apply Isometry.uniformContinuous
  refine AddMonoidHomClass.isometry_of_norm _ fun x ‚Ü¶ ?_
  rw [h]
  simp

include h in
lemma continuous_equiv‚ÇÇ_of_eq : Continuous (equiv‚ÇÇ v v') :=
  (uniformContinuous_equiv‚ÇÇ_of_eq h).continuous

end equal

instance charZero {R : Type*} [Semiring R] [CharZero R] {v : AbsoluteValue R ‚Ñù} :
    CharZero (WithAbs v) :=
  inferInstanceAs <| CharZero R

variable {F S : Type*} [Field F]

-- these two require heavier imports (so are not part of #20642)

instance fd_left [AddCommGroup S] [Module F S] [FiniteDimensional F S] {v : AbsoluteValue F ‚Ñù} :
    FiniteDimensional (WithAbs v) S :=
  inferInstanceAs <| FiniteDimensional F S

instance fd_right [Ring S] [Module F S] [FiniteDimensional F S] (v : AbsoluteValue S ‚Ñù) :
    FiniteDimensional F (WithAbs v) :=
  inferInstanceAs <| FiniteDimensional F S

-- #find_home fd_left -- [Mathlib.NumberTheory.NumberField.Completion]

--

/- @[simp]
lemma equiv_smul [Ring S] [Module R S] {v : AbsoluteValue S ‚Ñù} (c : R) (x : WithAbs v) :
    equiv v (c ‚Ä¢ x) = c ‚Ä¢ equiv v x := rfl

@[simp]
lemma equiv_symm_smul [Ring S] [Module R S] {v : AbsoluteValue S ‚Ñù} (c : R) (x : S) :
    (equiv v).symm (c ‚Ä¢ x) = c ‚Ä¢ (equiv v).symm x := rfl

@[simp]
lemma equiv_apply_algebraMap {R S : Type*} [CommRing R] [Ring S] [Algebra R S]
    {v : AbsoluteValue R ‚Ñù} (v' : AbsoluteValue S ‚Ñù) (x : WithAbs v) :
    equiv v' (algebraMap (WithAbs v) (WithAbs v') x) = algebraMap R S (equiv v x) :=
  rfl -/

lemma norm_equiv_eq {v v' : AbsoluteValue F ‚Ñù} (h : v = v') (x : WithAbs v) :
    ‚Äñ(algebraMap (WithAbs v') v'.Completion).comp (WithAbs.equiv v).toRingHom x‚Äñ = v x := by
  simp [h]
  rfl

end WithAbs

end Mathlib.Analysis.Normed.Ring.WithAbs

namespace UniformSpace.Completion

-- @[simp]
lemma coeFun_extensionHom {Œ± : Type*} [Ring Œ±] [UniformSpace Œ±] [IsTopologicalRing Œ±]
    [IsUniformAddGroup Œ±] {Œ≤ : Type*} [UniformSpace Œ≤] [Ring Œ≤] [IsUniformAddGroup Œ≤]
    [IsTopologicalRing Œ≤] (f : Œ± ‚Üí+* Œ≤) (hf : Continuous ‚áëf) [CompleteSpace Œ≤] [T0Space Œ≤] :
    ‚áë(extensionHom f hf) = Completion.extension f := rfl

end UniformSpace.Completion

namespace RingEquiv

lemma trans_symm_comp_trans_symm {R R' R'' : Type*} [Semiring R] [Semiring R'] [Semiring R'']
     (f : R ‚âÉ+* R') (f' : R'' ‚âÉ+* R'):
    ‚áë(f.trans f'.symm) ‚àò ‚áë(f'.trans f.symm) = id := by
  ext1
  simp

end RingEquiv


section UniformSpace.Completion.mapRingHom

namespace UniformSpace.Completion

variable {Œ± : Type*} [Ring Œ±] [UniformSpace Œ±] [IsTopologicalRing Œ±] [IsUniformAddGroup Œ±]
variable {Œ≤ : Type*} [Ring Œ≤] [UniformSpace Œ≤] [IsTopologicalRing Œ≤] [IsUniformAddGroup Œ≤]
variable {Œ≥ : Type*} [Ring Œ≥] [UniformSpace Œ≥] [IsTopologicalRing Œ≥] [IsUniformAddGroup Œ≥]

lemma continuous_mapRingHom {f : Œ± ‚Üí+* Œ≤} (hf : Continuous f) : Continuous (mapRingHom f hf) := by
  simpa only [mapRingHom, extensionHom, DFunLike.coe] using continuous_extension

lemma mapRingHom_id : mapRingHom (RingHom.id Œ±) continuous_id = RingHom.id _ := by
  ext1 x
  simp only [mapRingHom, extensionHom, RingHomCompTriple.comp_eq, RingHom.coe_mk, MonoidHom.coe_mk,
    OneHom.coe_mk, RingHom.id_apply]
  exact congrFun (extension_unique (uniformContinuous_coe Œ±) uniformContinuous_id (fun _ ‚Ü¶ rfl)) x

lemma mapRingHom_comp {f : Œ± ‚Üí+* Œ≤} {g : Œ≤ ‚Üí+* Œ≥} (hf : Continuous f) (hg : Continuous g) :
    mapRingHom (g.comp f) (RingHom.coe_comp .. ‚ñ∏ Continuous.comp hg hf) =
      (mapRingHom g hg).comp (mapRingHom f hf) := by
  ext1 x
  simp only [mapRingHom, extensionHom, RingHom.coe_comp, RingHom.coe_mk, MonoidHom.coe_mk,
    OneHom.coe_mk, Function.comp_apply]
  convert congrFun (extension_unique (f := ‚áëcoeRingHom ‚àò ‚áëg ‚àò ‚áëf)
    (g := (mapRingHom g hg).comp (mapRingHom f hf)) ?_ ?_ (fun a ‚Ü¶ ?_)) x
  ¬∑ refine UniformContinuous.comp (uniformContinuous_coe _) <| UniformContinuous.comp ?_ ?_
    ¬∑ exact uniformContinuous_addMonoidHom_of_continuous hg
    ¬∑ exact uniformContinuous_addMonoidHom_of_continuous hf
  ¬∑ rw [RingHom.coe_comp]
    refine UniformContinuous.comp ?_ ?_ <;>
      simpa [mapRingHom, extensionHom] using uniformContinuous_extension
  ¬∑ simp [Function.comp_apply, RingHom.coe_comp, mapRingHom, extensionHom_coe, coeRingHom]

/-- A ring isomorphism that is also a homeomorphism between two topological rings induces
a ring isomorphism between their completions. -/
noncomputable
def mapRingEquiv (f : Œ± ‚âÉ+* Œ≤) (hf : Continuous f) (hf' : Continuous f.symm):
    Completion Œ± ‚âÉ+* Completion Œ≤ := by
  refine RingEquiv.ofRingHom (mapRingHom f.toRingHom hf) (mapRingHom f.symm.toRingHom hf')
    ?_ ?_ <;>
  { rw [‚Üê mapRingHom_comp]
    simpa [RingEquiv.toRingHom_eq_coe, RingEquiv.comp_symm] using mapRingHom_id
  }

end UniformSpace.Completion

end UniformSpace.Completion.mapRingHom

/-!
### API lemmas for absolute values
-/

namespace AbsoluteValue

section API

namespace Completion

section general

variable {F : Type*} [Field F] (v : AbsoluteValue F ‚Ñù)

@[simp]
lemma norm_coe (x : WithAbs v) : ‚Äñ(x : v.Completion)‚Äñ = ‚Äñx‚Äñ :=
  UniformSpace.Completion.norm_coe x

end general

section equal

open WithAbs

variable {F : Type*} [Field F] {v v' : AbsoluteValue F ‚Ñù} (h : v = v')

noncomputable
def ringHom_of_eq : v.Completion ‚Üí+* v'.Completion :=
  extensionEmbedding_of_comp <| WithAbs.norm_equiv_eq h

lemma coeFun_ringHom_of_eq :
    ‚áë(ringHom_of_eq h) = UniformSpace.Completion.map ‚áë(equiv‚ÇÇ v v') := rfl

open UniformSpace.Completion in
lemma ringHom_of_eq_comp_symm :
    (ringHom_of_eq h).comp (ringHom_of_eq h.symm) = RingHom.id _ := by
  apply RingHom.coe_inj
  rw [RingHom.coe_comp, coeFun_ringHom_of_eq, coeFun_ringHom_of_eq, RingHom.coe_id,
    map_comp (uniformContinuous_equiv‚ÇÇ_of_eq h) (uniformContinuous_equiv‚ÇÇ_of_eq h.symm),
    RingEquiv.trans_symm_comp_trans_symm]
  simp

noncomputable
def ringEquiv_of_eq : v.Completion ‚âÉ+* v'.Completion :=
  UniformSpace.Completion.mapRingEquiv (equiv‚ÇÇ v v')
    (continuous_equiv‚ÇÇ_of_eq h) (continuous_equiv‚ÇÇ_of_eq h.symm)
  -- RingEquiv.ofRingHom (ringHom_of_eq h) (ringHom_of_eq h.symm)
  --   (ringHom_of_eq_comp_symm h) (ringHom_of_eq_comp_symm h.symm)

lemma coeFun_ringEquiv_of_eq :
    ‚áë(ringEquiv_of_eq h) = UniformSpace.Completion.map ‚áë(equiv‚ÇÇ v v') := rfl

lemma ringEquiv_of_eq_apply_ringEquiv_of_eq_apply (x : v'.Completion) :
    ringEquiv_of_eq h (ringEquiv_of_eq h.symm x) = x :=
  congrFun (congrArg (‚áë) <| ringHom_of_eq_comp_symm h) x

lemma isometry_ringEquiv_of_eq : Isometry <| ringEquiv_of_eq h := by
  refine AddMonoidHomClass.isometry_of_norm _ fun x ‚Ü¶ ?_
  rw [congrFun (coeFun_ringEquiv_of_eq h) x]
  revert x
  rw [‚Üê funext_iff]
  refine UniformSpace.Completion.ext (UniformSpace.Completion.continuous_map).norm
    continuous_id'.norm fun x ‚Ü¶ ?_
  rw [h] -- take the cheap way out
  simp

noncomputable
def isometryEquiv_of_eq : v.Completion ‚âÉ·µ¢ v'.Completion :=
  IsometryEquiv.mk' (ringEquiv_of_eq h) (ringEquiv_of_eq h.symm)
    (ringEquiv_of_eq_apply_ringEquiv_of_eq_apply h) <| isometry_ringEquiv_of_eq h

end equal

end Completion

variable {R : Type*} [Semiring R] {S : Type*} [Semiring S] [PartialOrder S] [IsOrderedRing S]

section nonarchimedean

variable {R : Type*} [Ring R] {v : AbsoluteValue R ‚Ñù}

/-- A version of `AbsoluteValue.isEquiv_def` that uses `AbsoluteValue.IsEquiv`. -/
lemma isEquiv_def' {v' : AbsoluteValue R ‚Ñù} : v ‚âà v' ‚Üî v.IsEquiv v' := Iff.rfl

lemma isEquiv_def {v' : AbsoluteValue R ‚Ñù} : v ‚âà v' ‚Üî ‚àÉ c : ‚Ñù, c > 0 ‚àß (v ¬∑ ^ c) = v' := Iff.rfl

lemma isNonarchimedean_of_isEquiv {v' : AbsoluteValue R ‚Ñù} (h‚ÇÅ : v ‚âà v')
    (h‚ÇÇ : IsNonarchimedean v) :
    IsNonarchimedean v' := by
  intro x y
  specialize h‚ÇÇ x y
  obtain ‚ü®c, hc‚ÇÄ, hc‚ü© := h‚ÇÅ
  simp_rw [‚Üê hc, Real.max_map_rpow (v.nonneg x) (v.nonneg y) hc‚ÇÄ.le]
  exact Real.rpow_le_rpow (v.nonneg _) h‚ÇÇ hc‚ÇÄ.le

lemma isNontrivial_of_archimedean (h : ¬¨ IsNonarchimedean v) : v.IsNontrivial := by
  contrapose! h
  rw [not_isNontrivial_iff] at h
  intro x y
  rcases eq_or_ne x 0 with rfl | hx
  ¬∑ simp
  rcases eq_or_ne y 0 with rfl | hy
  ¬∑ simp
  rcases eq_or_ne (x + y) 0 with hxy | hxy
  ¬∑ simp [hx, hy, hxy]
  simp [hx, hy, hxy, h]

lemma le_one_on_nat_of_isNonarchimedean [Nontrivial R] (h : IsNonarchimedean v) (n : ‚Ñï) : v n ‚â§ 1 := by
  induction n with
  | zero => simp
  | succ n ih =>
    rw [Nat.cast_add, Nat.cast_one]
    exact (h n 1).trans <| by simp [ih]

lemma le_one_on_nat_of_bounded [Nontrivial R] {B : ‚Ñù} (h : ‚àÄ n : ‚Ñï, v n ‚â§ B) (n : ‚Ñï) : v n ‚â§ 1 := by
  contrapose! h
  obtain ‚ü®m, hm‚ü© := pow_unbounded_of_one_lt B h
  exact ‚ü®n ^ m, by rwa [Nat.cast_pow, map_pow]‚ü©

variable {F : Type*} [Field F] {v : AbsoluteValue F ‚Ñù}

open IsUltrametricDist in
lemma isNonarchimedean_of_le_one_on_nat (h : ‚àÄ n : ‚Ñï, v n ‚â§ 1) : IsNonarchimedean v :=
  have H (n : ‚Ñï) : ‚Äñ(n : WithAbs v)‚Äñ ‚â§ 1 := h n
  isUltrametricDist_iff_isNonarchimedean_norm.mp <|
    isUltrametricDist_of_forall_norm_natCast_le_one H

lemma isNonarchimedean_of_bounded_on_nat {B : ‚Ñù} (h : ‚àÄ n : ‚Ñï, v n ‚â§ B) : IsNonarchimedean v :=
  isNonarchimedean_of_le_one_on_nat <| le_one_on_nat_of_bounded h

/-- An absolute value on a field is nonarchimedean if and only if it is bounded by `1`
on the image of `‚Ñï`. -/
lemma isNonarchimedean_iff_le_one_on_nat : IsNonarchimedean v ‚Üî ‚àÄ n : ‚Ñï, v n ‚â§ 1 :=
  ‚ü®le_one_on_nat_of_isNonarchimedean, isNonarchimedean_of_bounded_on_nat‚ü©

/-- A field with an archimedean absolute value has characteristic zero. -/
lemma charZero_of_archimedean (h : ¬¨ IsNonarchimedean v) : CharZero F := by
  contrapose! h
  let p := ringChar F
  have : CharP (WithAbs v) p := ringChar.charP F
  have : NeZero p := ‚ü®mt (CharP.ringChar_zero_iff_CharZero _).mp h‚ü©
  let œÜ := ZMod.castHom (dvd_refl p) (WithAbs v)
  obtain ‚ü®B, hB‚ü© : ‚àÉ B, ‚àÄ a : ZMod p, ‚ÄñœÜ a‚Äñ ‚â§ B := Finite.exists_le _
  have H (n : ‚Ñï) : ‚Äñ(n : WithAbs v)‚Äñ ‚â§ B := map_natCast œÜ n ‚ñ∏ hB n
  exact isNonarchimedean_of_bounded_on_nat H

end nonarchimedean

end API

end AbsoluteValue

section rat

open AbsoluteValue

namespace Rat.AbsoluteValue

lemma isNonarchimedean_padic (p : ‚Ñï) [Fact p.Prime] :
    IsNonarchimedean (padic p) :=
  isNonarchimedean_of_le_one_on_nat fun n ‚Ü¶ padic_le_one p n

lemma padic_of_isNonarchimedean {v : AbsoluteValue ‚Ñö ‚Ñù}
    (h : IsNonarchimedean v) (h' : v.IsNontrivial) :
    ‚àÉ (p : ‚Ñï) (_ : Fact p.Prime), v ‚âà padic p := by
  refine (equiv_padic_of_bounded h' ?_).exists
  exact le_one_on_nat_of_isNonarchimedean h

/-- A nontrivial absolute value on `‚Ñö` is nonarchimedean if and only if it is equivalent to
a `p`-adic absolute value for some prime `p`. -/
lemma isNonarchimedean_iff_equiv_padic {v : AbsoluteValue ‚Ñö ‚Ñù} (h : v.IsNontrivial) :
    IsNonarchimedean v ‚Üî ‚àÉ (p : ‚Ñï) (_ : Fact p.Prime), v ‚âà padic p :=
  ‚ü®fun a ‚Ü¶ padic_of_isNonarchimedean a h,
    fun ‚ü®p, _, hp‚ü© ‚Ü¶ isNonarchimedean_of_isEquiv (Setoid.symm hp) <| isNonarchimedean_padic p‚ü©

/-- An archimedean absolute value on `‚Ñö` must be equivalent to the standard absolute value. -/
lemma real_of_archimedean {v : AbsoluteValue ‚Ñö ‚Ñù} (h : ¬¨ IsNonarchimedean v) :
    v ‚âà real := by
  refine Or.resolve_right (equiv_real_or_padic v <| isNontrivial_of_archimedean h) fun H ‚Ü¶ ?_
  obtain ‚ü®p, _, hp‚ü© := H.exists
  exact h <| isNonarchimedean_of_isEquiv (Setoid.symm hp) <| isNonarchimedean_padic p

lemma norm_algebraMap_comp_eq_real (x : WithAbs real) :
    ‚Äñ(algebraMap ‚Ñö ‚Ñù).comp (WithAbs.equiv real) x‚Äñ = real x := rfl

open Completion in
noncomputable
def ringHom_completion_real : real.Completion ‚Üí+* ‚Ñù :=
  extensionEmbedding_of_comp norm_algebraMap_comp_eq_real

open Completion Topology in
lemma ringHom_completion_real_surjective : Function.Surjective ringHom_completion_real := by
  have : IsClosedEmbedding ringHom_completion_real :=
    isClosedEmbedding_extensionEmbedding_of_comp norm_algebraMap_comp_eq_real
  exact RingHom.fieldRange_eq_top_iff.mp <| Real.subfield_eq_of_closed this.isClosed_range

open Completion Topology in
noncomputable
def ringEquiv_completion_real : real.Completion ‚âÉ+* ‚Ñù :=
  RingEquiv.ofBijective ringHom_completion_real
    ‚ü®ringHom_completion_real.injective, ringHom_completion_real_surjective‚ü©

lemma isometry_ringEquiv_completion_real : Isometry ringEquiv_completion_real := by
  refine AddMonoidHomClass.isometry_of_norm ringEquiv_completion_real fun x ‚Ü¶ ?_
  simp only [ringEquiv_completion_real, RingEquiv.coe_ofBijective, ringHom_completion_real]
  refine (AddMonoidHomClass.isometry_iff_norm _).mp ?_ x
  exact AbsoluteValue.Completion.isometry_extensionEmbedding_of_comp norm_algebraMap_comp_eq_real

open Completion Topology in
lemma isHomeomorph_ringEquiv_completion_real : IsHomeomorph ringEquiv_completion_real := by
  simp only [ringEquiv_completion_real, RingEquiv.coe_ofBijective]
  have := isClosedEmbedding_extensionEmbedding_of_comp norm_algebraMap_comp_eq_real
  exact isHomeomorph_iff_isEmbedding_surjective.mpr
    ‚ü®this.toIsEmbedding, ringEquiv_completion_real.surjective‚ü©

end Rat.AbsoluteValue

end rat

namespace AbsoluteValue

section weak

-- Set up the data of a "weak absolute value" of a semiring `R`.
variable {R : Type*} [CommSemiring R] {v : R ‚Üí ‚Ñù} (hm : ‚àÄ x y, v (x * y) = v x * v y)
  (hn : ‚àÄ x, 0 ‚â§ v x) (h‚ÇÄ : ‚àÄ x, v x = 0 ‚Üî x = 0) (ha : ‚àÄ x y, v (x + y) ‚â§ 2 * max (v x) (v y))

include hn h‚ÇÄ ha

open Finset in
lemma abv_finsetSum_le_mul_max (f : ‚Ñï ‚Üí R) {N : ‚Ñï} (hN : 0 < N) :
    v (‚àë i ‚àà range N, f i) ‚â§
      2 * N * (range N).sup' (nonempty_range_iff.mpr hN.ne') fun i ‚Ü¶ v (f i) := by
  have key (f : ‚Ñï ‚Üí R) (n : ‚Ñï) : v (‚àë i ‚àà range (2 ^n), f i) ‚â§
      2 ^ n * (range (2 ^ n)).sup' (nonempty_range_iff.mpr n.two_pow_pos.ne') fun i ‚Ü¶ v (f i) := by
    induction n generalizing f with
    | zero => simp
    | succ n ih =>
      have H‚ÇÅ : 2 ^ n ‚â§ 2 ^ (n + 1) := by
        rw [pow_succ', Nat.two_mul]
        exact Nat.le_add_right ..
      rw [‚Üê sum_range_add_sum_Ico f H‚ÇÅ, sum_Ico_eq_sum_range]
      have H‚ÇÇ : 2 ^ (n + 1) - 2 ^ n = 2 ^ n := by
        rw [pow_succ', Nat.two_mul]
        exact Nat.add_sub_self_left ..
      rw [H‚ÇÇ, pow_succ', mul_assoc]
      refine (ha ..).trans ?_
      gcongr (2 * ?_)
      have hnr := nonempty_range_iff.mpr n.two_pow_pos.ne'
      have : (range (2 ^ (n + 1))).sup'
          (nonempty_range_iff.mpr (n + 1).two_pow_pos.ne') (fun i ‚Ü¶ v (f i)) =
            max ((range (2 ^ n)).sup' hnr (fun i ‚Ü¶ v (f i)))
              ((range (2 ^ n)).sup' hnr fun i ‚Ü¶ v (f (2 ^ n + i))) := by
        have : range (2 ^ (n + 1)) = range (2 ^ n) ‚à™ Ico (2 ^ n) (2 ^ (n + 1)) := by
          rw [range_eq_Ico]
          exact (Ico_union_Ico_eq_Ico (Nat.zero_le _) H‚ÇÅ).symm
        simp_rw [this]
        have H : (Ico (2 ^ n) (2 ^ (n + 1))).Nonempty := by
          rw [nonempty_Ico, ‚Üê one_mul (2 ^ n), pow_succ']
          gcongr
          exact one_lt_two
        rw [sup'_union hnr H]
        congr 1
        -- `rw` does not work
        erw [sup'_comp_eq_image (f := fun i ‚Ü¶ 2 ^ n + i) hnr (fun i ‚Ü¶ v (f i)),
          sup'_comp_eq_image (f := id) ?_ (fun i ‚Ü¶ v (f i))]
        refine sup'_congr ?_ ?_ fun i hi ‚Ü¶ rfl
        ¬∑ simp only [image_id, range_eq_Ico, image_add_left_Ico, add_zero, pow_succ']
          congr 2
          exact Nat.two_mul _
        ¬∑ exact H
      rw [this, mul_max_of_nonneg _ _ (mod_cast (2 ^ n).zero_le)]
      gcongr <;> exact ih _
  rcases le_or_gt N 1 with hN‚ÇÅ | hN‚ÇÅ
  ¬∑ replace hN‚ÇÅ : N = 1 := by omega
    simp only [hN‚ÇÅ, range_one, sum_singleton, Nat.cast_one, mul_one, sup'_singleton]
    nth_rewrite 1 [‚Üê one_mul (v (f 0))]
    gcongr
    ¬∑ exact hn (f 0)
    ¬∑ exact one_le_two
  obtain ‚ü®m, hm‚ÇÅ, hm‚ÇÇ‚ü© : ‚àÉ m : ‚Ñï, 2 ^ m < N ‚àß N ‚â§ 2 ^ (m + 1) := by
    induction N with
    | zero => exact hN.false.elim
    | succ n ih =>
      rcases eq_or_ne n 0 with rfl | hn
      ¬∑ norm_num at hN‚ÇÅ
      replace hN‚ÇÅ : 0 < n := by omega
      rcases eq_or_ne n 1 with rfl | hn‚ÇÅ
      ¬∑ exact ‚ü®0, by norm_num, by norm_num‚ü©
      have hn‚ÇÅ : 1 < n := by omega
      obtain ‚ü®m, hm‚ÇÅ, hm‚ÇÇ‚ü© := ih hN‚ÇÅ hn‚ÇÅ
      rcases lt_or_eq_of_le hm‚ÇÇ with hm | rfl
      ¬∑ exact ‚ü®m, by omega‚ü©
      ¬∑ exact ‚ü®m + 1, by omega‚ü©
  have HN := nonempty_range_iff.mpr hN.ne'
  let g i := if i < N then f i else 0
  have hg‚ÇÅ : ‚àë i ‚àà range N, f i = ‚àë i ‚àà range (2 ^ (m + 1)), g i := by
    have : ‚àÄ i ‚â• N, g i = 0 := by
      intro i hi
      replace hi : ¬¨ i < N := Nat.not_lt.mpr hi
      simp [g, hi]
    rw [Finset.eventually_constant_sum this hm‚ÇÇ]
    refine sum_congr rfl fun i hi ‚Ü¶ ?_
    simp [g, mem_range.mp hi]
  have hg‚ÇÇ : (range N).sup' HN (fun i ‚Ü¶ v (f i)) =
      (range (2 ^ (m + 1))).sup'
        (nonempty_range_iff.mpr (m + 1).two_pow_pos.ne') fun i ‚Ü¶ v (g i) := by
    rcases eq_or_lt_of_le hm‚ÇÇ with rfl | hm‚ÇÇ
    ¬∑ refine sup'_congr (nonempty_range_iff.mpr (m + 1).two_pow_pos.ne') rfl fun i hi ‚Ü¶ ?_
      simp [g, mem_range.mp hi]
    have : range (2 ^ (m + 1)) = range N ‚à™ Ico N (2 ^ (m + 1)) := by
      rw [range_eq_Ico, eq_comm]
      exact Ico_union_Ico_eq_Ico N.zero_le hm‚ÇÇ.le
    simp_rw [this]
    have H‚ÇÅ : (Ico N (2 ^ (m + 1))).Nonempty := by simpa
    rw [sup'_union HN H‚ÇÅ]
    have H‚ÇÇ : ((Ico N (2 ^ (m + 1))).sup' H‚ÇÅ fun x ‚Ü¶ v (g x)) ‚â§
        ((range N).sup' HN fun x ‚Ü¶ v (g x)) := by
      refine sup'_le H‚ÇÅ (fun x ‚Ü¶ v (g x)) fun i hi ‚Ü¶ ?_
      simp only [mem_Ico] at hi
      have hi' : ¬¨ i < N := Nat.not_lt.mpr hi.1
      simp only [hi', ‚ÜìreduceIte, le_sup'_iff, mem_range, g, (h‚ÇÄ 0).mpr rfl]
      exact ‚ü®0, hN, hn _‚ü©
    rw [max_eq_left H‚ÇÇ]
    refine sup'_congr HN rfl fun i hi ‚Ü¶ ?_
    simp [g, mem_range.mp hi]
  rw [hg‚ÇÅ, hg‚ÇÇ]
  refine (key g (m + 1)).trans ?_
  gcongr
  ¬∑ exact le_sup'_of_le _ (mem_range.mpr (m + 1).two_pow_pos) <| hn (g 0)
  ¬∑ rw [pow_succ']
    gcongr
    exact_mod_cast hm‚ÇÅ.le

include hm

lemma abv_natCast_le (n : ‚Ñï) : v n ‚â§ 2 * n := by
  rcases n.eq_zero_or_pos with rfl | hn‚ÇÄ
  ¬∑ simp [(h‚ÇÄ 0).mpr rfl]
  have : (n : R) = ‚àë i ‚àà Finset.range n, 1 := by
    refine (Finset.sum_range_induction (fun k ‚Ü¶ 1) Nat.cast Nat.cast_zero (fun n ‚Ü¶ ?_) n).symm
    simp
  rw [this]
  have : v 1 ‚â§ 1 := by
    by_contra! h
    have : v 1 ^ 2 = v 1 := by
      calc
      _ = v 1 * v 1 := by rw[sq]
      _ = v (1 * 1) := (hm 1 1).symm
      _ = v 1 := by rw [mul_one]
    rcases eq_zero_or_one_of_sq_eq_self this with h' | h' <;> linarith only [h, h']
  refine (abv_finsetSum_le_mul_max hn h‚ÇÄ ha _ hn‚ÇÄ).trans ?_
  simp only [Finset.sup'_const]
  nth_rewrite 2 [‚Üê mul_one (2 * (n : ‚Ñù))]
  gcongr

variable [Nontrivial R]

omit hn ha in
lemma abv_one : v 1 = 1 := by
  have : v 1 ^ 2 = v 1 := by
    calc
    _ = v 1 * v 1 := by rw[sq]
    _ = v (1 * 1) := (hm 1 1).symm
    _ = v 1 := by rw [mul_one]
  exact (eq_zero_or_one_of_sq_eq_self this).resolve_left <| (h‚ÇÄ 1).not.mpr one_ne_zero

omit hn ha in
lemma abv_pow (x : R) (n : ‚Ñï) : v (x ^ n) = v x ^ n := by
  induction n with
  | zero => simp [abv_one hm h‚ÇÄ]
  | succ n ih => rw [pow_succ, hm, ih, ‚Üê pow_succ]


open Filter Topology in
lemma add_le_add_of_add_le_two_mul_max  (x y : R) : v (x + y) ‚â§ v x + v y := by
  have hx : 0 ‚â§ v x := hn x
  have hy : 0 ‚â§ v y := hn y
  have key (N : ‚Ñï) : v (x + y) ^ N ‚â§ 2 * (N + 1) * (2 * (v x + v y) ^ N) := by
    have hN : (Finset.range (N + 1)).Nonempty := by simp
    rw [‚Üê abv_pow hm h‚ÇÄ, add_pow x y]
    refine (abv_finsetSum_le_mul_max hn h‚ÇÄ ha _ (N := N + 1) N.zero_lt_succ).trans ?_
    have H (i) (hi : i ‚àà Finset.range (N + 1)) : v (N.choose i) ‚â§ 2 * N.choose i :=
      abv_natCast_le hm hn h‚ÇÄ ha _
    have H' (i) (hi : i ‚àà Finset.range (N + 1)) :
        v (x ^ i * y ^ (N - i) * N.choose i) ‚â§ 2 * (v x ^ i * v y ^ (N - i) * N.choose i) := by
      simp only [hm, abv_pow hm h‚ÇÄ]
      rw [mul_comm 2, mul_assoc (v x ^ i * v y ^ (N - i))]
      gcongr (v x ^ i * v y ^ (N - i) * ?_)
      rw [mul_comm]
      exact H i hi
    push_cast
    gcongr
    refine (Finset.sup'_mono_fun (hs := hN) H').trans ?_
    rw [add_pow, Finset.mul_sum]
    refine Finset.sup'_le hN _ fun i hi ‚Ü¶ ?_
    refine Finset.single_le_sum (f := fun i ‚Ü¶ 2 * (v x ^ i * v y ^ (N - i) * ‚Üë(N.choose i))) (fun a h ‚Ü¶ ?_) hi
    simp only [Nat.ofNat_pos, mul_nonneg_iff_of_pos_left]
    positivity
  refine Real.le_of_forall_pow_le_mul_pow zero_lt_four zero_le_four (hn _) (add_nonneg hx hy) ?_
  convert Eventually.of_forall key using 3 with N
  ring

/-- A "weak absolute value" (satisfying the weaker triangle inequality
`v (x + y) ‚â§ 2 * max (v x) (v y)`) is actually an absolute value. -/
def of_add_le_two_mul_max : AbsoluteValue R ‚Ñù where
      toFun := v
      map_mul' := hm
      nonneg' := hn
      eq_zero' := h‚ÇÄ
      add_le' := add_le_add_of_add_le_two_mul_max hm hn h‚ÇÄ ha

end weak

lemma abv_natCast_strictMono_of_not_isNonarchimedean {R : Type*} [Field R] {v : AbsoluteValue R ‚Ñù}
    (hv : ¬¨ IsNonarchimedean v) :
    StrictMono (v ‚àò NatCast.natCast) := by
  intro m n h
  simp only [Function.comp_apply]
  have := v.isNonarchimedean_iff_le_one_on_nat.not.mp hv
  push_neg at this
  obtain ‚ü®k, hk‚ü© := this

  sorry

lemma abv_add_le_abv_two_mul_max {R : Type*} [Field R]
    {v : AbsoluteValue R ‚Ñù} (hv : ¬¨ IsNonarchimedean v) (x y : R) :
    v (x + y) ‚â§ v 2 * max (v x) (v y) := by
  refine Real.le_of_forall_pow_le_mul_pow zero_lt_one zero_le_one (v.nonneg _) (by positivity) <|
     Filter.Eventually.of_forall fun N ‚Ü¶ ?_
  rw [‚Üê v.map_pow, add_pow, one_mul, ‚Üê smul_eq_mul]
  norm_cast
  conv => enter [2]; rw [‚Üê Finset.card_range (N + 1)]
  refine (v.sum_le ..).trans <| (Finset.sum_le_card_nsmul _ _ _ fun i hi ‚Ü¶ ?_)
  rw [v.map_mul, mul_comm _ (v (N.choose i)), mul_pow]
  gcongr
  ¬∑ rw [‚Üê v.map_pow]
    have : N.choose i ‚â§ 2 ^ N := (N.choose_le_succ i).trans <| N.choose_succ_le_two_pow i
    convert (abv_natCast_strictMono_of_not_isNonarchimedean hv).monotone this
    simp
  ¬∑ rw [v.map_mul, v.map_pow, v.map_pow]
    simp only [Finset.mem_range, Nat.lt_add_one_iff] at hi
    nth_rewrite 2 [(Nat.add_sub_of_le hi).symm]
    rw [pow_add]
    gcongr
    exacts [le_max_left .., le_max_right ..]

end AbsoluteValue
