import Mathlib

/-!
### Auxiliary statements

These fill API gaps in Mathlib and should eventually go there.
-/

section aux

variable {Œ± Œ≤ : Type*}

lemma max_eq_iSup [ConditionallyCompleteLattice Œ±] (a b : Œ±) : max a b = iSup ![a, b] :=
  eq_of_forall_ge_iff <| by simp [ciSup_le_iff, Fin.forall_fin_two]

-- [Mathlib.Analysis.SpecialFunctions.Pow.Real]
lemma Real.max_map_rpow {x y c : ‚Ñù} (hx : 0 ‚â§ x) (hy : 0 ‚â§ y) (hc : 0 ‚â§ c) :
    max (x ^ c) (y ^ c) = max x y ^ c := by
  rcases le_total x y with h | h
  ¬∑ simpa only [h, sup_of_le_right, sup_eq_right] using Real.rpow_le_rpow hx h hc
  ¬∑ simpa only [h, sup_of_le_left, sup_eq_left] using Real.rpow_le_rpow hy h hc

lemma Real.iSup_pow_of_nonneg [Fintype Œ±] [Nonempty Œ±] {f : Œ± ‚Üí ‚Ñù} (hf : ‚àÄ a, 0 ‚â§ f a) (n : ‚Ñï) :
    (‚®Ü a, f a) ^ n = ‚®Ü a, (f a ^ n) := by
  have H a : ((f a).toNNReal  : ‚Ñù) = f a := Real.coe_toNNReal (f a) (hf a)
  conv => enter [1, 1, 1, a]; rw [‚Üê H]
  conv => enter [2, 1, a]; rw [‚Üê H]
  norm_cast
  exact Monotone.map_ciSup_of_continuousAt ((continuous_pow n).continuousAt)
    (pow_left_mono n) (Finite.bddAbove_range _)

@[to_additive]
lemma finprod_mono [OrderedCommMonoid Œ≤] {f g : Œ± ‚Üí Œ≤} (hf : f.mulSupport.Finite)
    (hg : g.mulSupport.Finite) (h : f ‚â§ g) :
    ‚àè·∂† a, f a ‚â§ ‚àè·∂† a, g a := by
  have : Fintype ‚Üë(f.mulSupport ‚à™ g.mulSupport) := (Set.Finite.union hf hg).fintype
  let s := (f.mulSupport ‚à™ g.mulSupport).toFinset
  have hf‚ÇÅ : f.mulSupport ‚äÜ s := by
    simp only [Set.coe_toFinset, Set.subset_union_left, s]
  have hg‚ÇÅ : g.mulSupport ‚äÜ s := by
    simp only [Set.coe_toFinset, Set.subset_union_right, s]
  rw [finprod_eq_finset_prod_of_mulSupport_subset f hf‚ÇÅ,
    finprod_eq_finset_prod_of_mulSupport_subset g hg‚ÇÅ]
  exact Finset.prod_le_prod' fun i _ ‚Ü¶ h i

/-- Monotonicity of `finprod`. See `finprod_mono` for a variant
where `Œ≤` is a `OrderedCommMonoid`. -/
lemma finprod_mono' [CommMonoidWithZero Œ≤] [PartialOrder Œ≤] [ZeroLEOneClass Œ≤] [PosMulMono Œ≤]
    {f g : Œ± ‚Üí Œ≤} (hf : f.mulSupport.Finite) (hf‚ÇÄ : ‚àÄ a, 0 ‚â§ f a)
    (hg : g.mulSupport.Finite) (h : f ‚â§ g) :
    ‚àè·∂† a, f a ‚â§ ‚àè·∂† a, g a := by
  have : Fintype ‚Üë(f.mulSupport ‚à™ g.mulSupport) := (Set.Finite.union hf hg).fintype
  let s := (f.mulSupport ‚à™ g.mulSupport).toFinset
  have hf‚ÇÅ : f.mulSupport ‚äÜ s := by
    simp only [Set.coe_toFinset, Set.subset_union_left, s]
  have hg‚ÇÅ : g.mulSupport ‚äÜ s := by
    simp only [Set.coe_toFinset, Set.subset_union_right, s]
  rw [finprod_eq_finset_prod_of_mulSupport_subset f hf‚ÇÅ,
    finprod_eq_finset_prod_of_mulSupport_subset g hg‚ÇÅ]
  exact Finset.prod_le_prod (fun i _ ‚Ü¶ hf‚ÇÄ i) fun i _ ‚Ü¶ h i

@[to_additive]
lemma Function.mulSupport_mul_finite [Monoid Œ≤] {f g : Œ± ‚Üí Œ≤} (hf : f.mulSupport.Finite)
    (hg : g.mulSupport.Finite) :
    (Function.mulSupport fun a ‚Ü¶ f a * g a).Finite :=
  (hf.union hg).subset <| mulSupport_mul f g

lemma one_le_finprod {M : Type*} [CommMonoidWithZero M] [Preorder M] [ZeroLEOneClass M]
    [PosMulMono M] {f : Œ± ‚Üí M} (hf : ‚àÄ i, 1 ‚â§ f i) :
    1 ‚â§ ‚àè·∂† i, f i :=
  finprod_induction _ le_rfl (fun _ _ ‚Ü¶ one_le_mul_of_one_le_of_one_le) hf

lemma Finset.one_le_prod [DecidableEq Œ±] (s : Finset Œ±) {M : Type*} [CommMonoidWithZero M]
    [Preorder M] [ZeroLEOneClass M] [PosMulMono M] {f : Œ± ‚Üí M} (hf : ‚àÄ i, 1 ‚â§ f i) :
    1 ‚â§ ‚àè i ‚àà s, f i := by
  induction s using Finset.induction with
  | empty => simp
  | @insert a s h ih => simpa [h] using one_le_mul_of_one_le_of_one_le (hf a) ih

variable {K : Type*} [Field K] {Œπ : Type*} [Fintype Œπ]

lemma AbsoluteValue.iSup_eq_subtype (v : AbsoluteValue K ‚Ñù) {x : Œπ ‚Üí K} (hx : x ‚â† 0) :
    ‚®Ü i, v (x i) = ‚®Ü i : {j // x j ‚â† 0}, v (x i) := by
  have ‚ü®i, hi‚ü© : ‚àÉ j, x j ‚â† 0 := Function.ne_iff.mp hx
  have : Nonempty {j // x j ‚â† 0} := Nonempty.intro ‚ü®i, hi‚ü©
  have : Nonempty Œπ := Nonempty.intro i
  apply le_antisymm
  ¬∑ refine ciSup_le fun j ‚Ü¶ ?_
    rcases eq_or_ne (x j) 0 with h | h
    ¬∑ rw [h, AbsoluteValue.map_zero]
      exact Real.iSup_nonneg' ‚ü®‚ü®i, hi‚ü©, AbsoluteValue.nonneg ..‚ü©
    ¬∑ exact le_ciSup_of_le (Finite.bddAbove_range _) ‚ü®j, h‚ü© le_rfl
  ¬∑ exact ciSup_le fun ‚ü®j, hj‚ü© ‚Ü¶ le_ciSup_of_le (Finite.bddAbove_range _) j le_rfl

lemma AbsoluteValue.max_one_eq_iSup (v : AbsoluteValue K ‚Ñù) (x : K) :
    v x ‚äî 1 = ‚®Ü i, v (![x, 1] i) := by
  have H (i : Fin 2) : v (![x, 1] i) = ![v x, 1] i := by fin_cases i <;> simp
  simp_rw [H]
  exact max_eq_iSup (v x) 1

variable [NumberField K]

lemma NumberField.FinitePlace.add_le (v : FinitePlace K) (x y : K) :
    v (x + y) ‚â§ max (v x) (v y) := by
  simp_rw [‚Üê NumberField.FinitePlace.norm_embedding_eq, map_add]
  rcases le_total ‚Äñembedding v.maximalIdeal x‚Äñ ‚Äñembedding v.maximalIdeal y‚Äñ with h | h
  ¬∑ refine le_sup_of_le_right ?_
    rw [Valued.toNormedField.norm_le_iff] at h ‚ä¢
    exact sup_of_le_right h ‚ñ∏ Valuation.map_add_le_max' Valued.v ..
  ¬∑ refine le_sup_of_le_left ?_
    rw [Valued.toNormedField.norm_le_iff] at h ‚ä¢
    exact sup_of_le_left h ‚ñ∏ Valuation.map_add_le_max' Valued.v ..

instance : NonarchimedeanHomClass (NumberField.FinitePlace K) K ‚Ñù where
  map_add_le_max v a b := NumberField.FinitePlace.add_le v a b

end aux

section Mathlib.Topology.Algebra.Module.FiniteDimension

variable  {ùïú E E' : Type*} [NontriviallyNormedField ùïú] [CompleteSpace ùïú] [AddCommGroup E]
  [Module ùïú E] [FiniteDimensional ùïú E] [TopologicalSpace E] [IsTopologicalAddGroup E]
  [ContinuousSMul ùïú E] [T2Space E] [AddCommGroup E'] [Module ùïú E'] [TopologicalSpace E']
  [IsTopologicalAddGroup E'] [ContinuousSMul ùïú E'] [T2Space E']

/-- The homeomorphism induced by a linear isomorphism between two finite-dimensional vector spaces
over a complete nontrivially normed field. -/
def FiniteDimensional.homeomorph_of_linearEquiv (f : E ‚âÉ‚Çó[ùïú] E') : E ‚âÉ‚Çú E' :=
  Homeomorph.mk f f.toLinearMap.continuous_of_finiteDimensional <| by
    have : FiniteDimensional ùïú E' := Module.Finite.equiv f
    exact f.symm.toLinearMap.continuous_of_finiteDimensional

end Mathlib.Topology.Algebra.Module.FiniteDimension

-- more API lemmas

section

lemma Algebra.charpoly_aeval_self_eq_zero {F R : Type*} [Field F] [Ring R]
    [Algebra F R] [FiniteDimensional F R] (x : R) :
    (LinearMap.mulLeft F x).charpoly.aeval x = 0 := by
  let p := (LinearMap.mulLeft F x).charpoly
  have : p.aeval (LinearMap.mulLeft F x) = 0 := LinearMap.aeval_self_charpoly _
  apply_fun (¬∑ 1) at this
  simp only [Polynomial.aeval_endomorphism, LinearMap.pow_mulLeft, LinearMap.mulLeft_apply,
    mul_one, LinearMap.zero_apply] at this
  rw [Polynomial.sum_eq_of_subset _ (p := p) (by simp) Polynomial.supp_subset_range_natDegree_succ] at this
  rwa [Polynomial.aeval_eq_sum_range]

lemma LinearMap.charpoly_eraseLead_natDegree_le {F R : Type*} [Field F] [AddCommGroup R]
    [Nontrivial R] [Module F R] [FiniteDimensional F R] (f : R ‚Üí‚Çó[F] R) :
  f.charpoly.eraseLead.natDegree + 1 ‚â§ Module.finrank F R := by
  have hnd := f.charpoly_natDegree
  by_cases hnc : f.charpoly.nextCoeff = 0
  ¬∑ have : 0 < Module.finrank F R := Module.finrank_pos
    have := Polynomial.natDegree_eraseLead_le_of_nextCoeff_eq_zero hnc
    omega
  ¬∑ exact hnd ‚ñ∏ (Polynomial.natDegree_eraseLead_add_one hnc).le

end

section Mathlib.Analysis.Normed.Ring.WithAbs

namespace WithAbs

variable {F S : Type*} [Field F]

-- these two require heavier imports (so are not part of #20642)

instance fd_left [AddCommGroup S] [Module F S] [FiniteDimensional F S] {v : AbsoluteValue F ‚Ñù} :
    FiniteDimensional (WithAbs v) S :=
  inferInstanceAs <| FiniteDimensional F S

instance fd_right [Ring S] [Module F S] [FiniteDimensional F S] (v : AbsoluteValue S ‚Ñù) :
    FiniteDimensional F (WithAbs v) :=
  inferInstanceAs <| FiniteDimensional F S

-- #find_home fd_left -- [Mathlib.NumberTheory.NumberField.Completion]

--

/- @[simp]
lemma equiv_smul [Ring S] [Module R S] {v : AbsoluteValue S ‚Ñù} (c : R) (x : WithAbs v) :
    equiv v (c ‚Ä¢ x) = c ‚Ä¢ equiv v x := rfl

@[simp]
lemma equiv_symm_smul [Ring S] [Module R S] {v : AbsoluteValue S ‚Ñù} (c : R) (x : S) :
    (equiv v).symm (c ‚Ä¢ x) = c ‚Ä¢ (equiv v).symm x := rfl

@[simp]
lemma equiv_apply_algebraMap {R S : Type*} [CommRing R] [Ring S] [Algebra R S]
    {v : AbsoluteValue R ‚Ñù} (v' : AbsoluteValue S ‚Ñù) (x : WithAbs v) :
    equiv v' (algebraMap (WithAbs v) (WithAbs v') x) = algebraMap R S (equiv v x) :=
  rfl -/

end WithAbs

end Mathlib.Analysis.Normed.Ring.WithAbs

namespace AbsoluteValue

/-!
### API lemmas for absolute values
-/

section API

variable {R : Type*} [Semiring R] {S : Type*} [OrderedSemiring S]

section nonarchimedean

variable {R : Type*} [Ring R] {v : AbsoluteValue R ‚Ñù}

/-- A version of `AbsoluteValue.isEquiv_def` that uses `AbsoluteValue.IsEquiv`. -/
lemma isEquiv_def' {v' : AbsoluteValue R ‚Ñù} : v ‚âà v' ‚Üî v.IsEquiv v' := Iff.rfl

lemma isEquiv_def {v' : AbsoluteValue R ‚Ñù} : v ‚âà v' ‚Üî ‚àÉ c : ‚Ñù, c > 0 ‚àß (v ¬∑ ^ c) = v' := Iff.rfl

lemma isNonarchimedean_of_isEquiv {v' : AbsoluteValue R ‚Ñù} (h‚ÇÅ : v ‚âà v')
    (h‚ÇÇ : IsNonarchimedean v) :
    IsNonarchimedean v' := by
  intro x y
  specialize h‚ÇÇ x y
  obtain ‚ü®c, hc‚ÇÄ, hc‚ü© := h‚ÇÅ
  simp_rw [‚Üê hc, Real.max_map_rpow (v.nonneg x) (v.nonneg y) hc‚ÇÄ.le]
  exact Real.rpow_le_rpow (v.nonneg _) h‚ÇÇ hc‚ÇÄ.le

lemma isNontrivial_of_archimedean (h : ¬¨ IsNonarchimedean v) : v.IsNontrivial := by
  contrapose! h
  rw [not_isNontrivial_iff] at h
  intro x y
  rcases eq_or_ne x 0 with rfl | hx
  ¬∑ simp
  rcases eq_or_ne y 0 with rfl | hy
  ¬∑ simp
  rcases eq_or_ne (x + y) 0 with hxy | hxy
  ¬∑ simp [hx, hy, hxy]
  simp [hx, hy, hxy, h]

lemma le_one_on_nat_of_isNonarchimedean [Nontrivial R] (h : IsNonarchimedean v) (n : ‚Ñï) : v n ‚â§ 1 := by
  induction n with
  | zero => simp
  | succ n ih =>
    rw [Nat.cast_add, Nat.cast_one]
    exact (h n 1).trans <| by simp [ih]

lemma le_one_on_nat_of_bounded [Nontrivial R] {B : ‚Ñù} (h : ‚àÄ n : ‚Ñï, v n ‚â§ B) (n : ‚Ñï) : v n ‚â§ 1 := by
  contrapose! h
  obtain ‚ü®m, hm‚ü© := pow_unbounded_of_one_lt B h
  exact ‚ü®n ^ m, by rwa [Nat.cast_pow, map_pow]‚ü©

variable {F : Type*} [Field F] {v : AbsoluteValue F ‚Ñù}

open IsUltrametricDist in
lemma isNonarchimedean_of_le_one_on_nat (h : ‚àÄ n : ‚Ñï, v n ‚â§ 1) : IsNonarchimedean v :=
  have H (n : ‚Ñï) : ‚Äñ(n : WithAbs v)‚Äñ ‚â§ 1 := h n
  isUltrametricDist_iff_isNonarchimedean_norm.mp <|
    isUltrametricDist_of_forall_norm_natCast_le_one H

lemma isNonarchimedean_of_bounded_on_nat {B : ‚Ñù} (h : ‚àÄ n : ‚Ñï, v n ‚â§ B) : IsNonarchimedean v :=
  isNonarchimedean_of_le_one_on_nat <| le_one_on_nat_of_bounded h

/-- An absolute value on a field is nonarchimedean if and only if it is bounded by `1`
on the image of `‚Ñï`. -/
lemma isNonarchimedean_iff_le_one_on_nat : IsNonarchimedean v ‚Üî ‚àÄ n : ‚Ñï, v n ‚â§ 1 :=
  ‚ü®le_one_on_nat_of_isNonarchimedean, isNonarchimedean_of_bounded_on_nat‚ü©

/-- A field with an archimedean absolute value has characteristic zero. -/
lemma charZero_of_archimedean (h : ¬¨ IsNonarchimedean v) : CharZero F := by
  contrapose! h
  let p := ringChar F
  have : CharP (WithAbs v) p := ringChar.charP F
  have : NeZero p := ‚ü®mt (CharP.ringChar_zero_iff_CharZero _).mp h‚ü©
  let œÜ := ZMod.castHom (dvd_refl p) (WithAbs v)
  obtain ‚ü®B, hB‚ü© : ‚àÉ B, ‚àÄ a : ZMod p, ‚ÄñœÜ a‚Äñ ‚â§ B := Finite.exists_le _
  have H (n : ‚Ñï) : ‚Äñ(n : WithAbs v)‚Äñ ‚â§ B := map_natCast œÜ n ‚ñ∏ hB n
  exact isNonarchimedean_of_bounded_on_nat H

end nonarchimedean

end API

end AbsoluteValue

section rat

open AbsoluteValue

namespace Rat.AbsoluteValue

lemma isNonarchimedean_padic (p : ‚Ñï) [Fact p.Prime] :
    IsNonarchimedean (padic p) :=
  isNonarchimedean_of_le_one_on_nat fun n ‚Ü¶ padic_le_one p n

lemma padic_of_isNonarchimedean {v : AbsoluteValue ‚Ñö ‚Ñù}
    (h : IsNonarchimedean v) (h' : v.IsNontrivial) :
    ‚àÉ (p : ‚Ñï) (_ : Fact p.Prime), v ‚âà padic p := by
  refine (equiv_padic_of_bounded h' ?_).exists
  exact le_one_on_nat_of_isNonarchimedean h

/-- A nontrivial absolute value on `‚Ñö` is nonarchimedean if and only if it is equivalent to
a `p`-adic absolute value for some prime `p`. -/
lemma isNonarchimedean_iff_equiv_padic {v : AbsoluteValue ‚Ñö ‚Ñù} (h : v.IsNontrivial) :
    IsNonarchimedean v ‚Üî ‚àÉ (p : ‚Ñï) (_ : Fact p.Prime), v ‚âà padic p :=
  ‚ü®fun a ‚Ü¶ padic_of_isNonarchimedean a h,
    fun ‚ü®p, _, hp‚ü© ‚Ü¶ isNonarchimedean_of_isEquiv (Setoid.symm hp) <| isNonarchimedean_padic p‚ü©

/-- An archimedean absolute value on `‚Ñö` must be equivalent to the standard absolute value. -/
lemma real_of_archimedean {v : AbsoluteValue ‚Ñö ‚Ñù} (h : ¬¨ IsNonarchimedean v) :
    v ‚âà real := by
  refine Or.resolve_right (equiv_real_or_padic v <| isNontrivial_of_archimedean h) fun H ‚Ü¶ ?_
  obtain ‚ü®p, _, hp‚ü© := H.exists
  exact h <| isNonarchimedean_of_isEquiv (Setoid.symm hp) <| isNonarchimedean_padic p

lemma norm_algebraMap_comp_eq_real (x : WithAbs real) :
    ‚Äñ(algebraMap ‚Ñö ‚Ñù).comp (WithAbs.equiv real) x‚Äñ = real x := rfl

open Completion in
noncomputable
def ringHom_completion_real : real.Completion ‚Üí+* ‚Ñù :=
  extensionEmbedding_of_comp norm_algebraMap_comp_eq_real

open Completion Topology in
lemma ringHom_completion_real_surjective : Function.Surjective ringHom_completion_real := by
  have : IsClosedEmbedding ringHom_completion_real :=
    isClosedEmbedding_extensionEmbedding_of_comp norm_algebraMap_comp_eq_real
  exact RingHom.fieldRange_eq_top_iff.mp <| Real.subfield_eq_of_closed this.isClosed_range

open Completion Topology in
noncomputable
def ringEquiv_completion_real : real.Completion ‚âÉ+* ‚Ñù :=
  RingEquiv.ofBijective ringHom_completion_real
    ‚ü®ringHom_completion_real.injective, ringHom_completion_real_surjective‚ü©

open Completion Topology in
lemma isHomeomorph_ringEquiv_completion_real : IsHomeomorph ringEquiv_completion_real := by
  simp only [ringEquiv_completion_real, RingEquiv.coe_ofBijective]
  have := isClosedEmbedding_extensionEmbedding_of_comp norm_algebraMap_comp_eq_real
  exact isHomeomorph_iff_isEmbedding_surjective.mpr
    ‚ü®this.toIsEmbedding, ringEquiv_completion_real.surjective‚ü©

end Rat.AbsoluteValue

end rat

section UniformSpace.Completion.mapRingHom

namespace UniformSpace.Completion

variable {Œ± : Type*} [Ring Œ±] [UniformSpace Œ±] [IsTopologicalRing Œ±] [IsUniformAddGroup Œ±]
variable {Œ≤ : Type*} [Ring Œ≤] [UniformSpace Œ≤] [IsTopologicalRing Œ≤] [IsUniformAddGroup Œ≤]
variable {Œ≥ : Type*} [Ring Œ≥] [UniformSpace Œ≥] [IsTopologicalRing Œ≥] [IsUniformAddGroup Œ≥]

lemma continuous_mapRingHom {f : Œ± ‚Üí+* Œ≤} (hf : Continuous f) : Continuous (mapRingHom f hf) := by
  simpa only [mapRingHom, extensionHom, DFunLike.coe] using continuous_extension

lemma mapRingHom_id : mapRingHom (RingHom.id Œ±) continuous_id = RingHom.id _ := by
  ext1 x
  simp only [mapRingHom, extensionHom, RingHomCompTriple.comp_eq, RingHom.coe_mk, MonoidHom.coe_mk,
    OneHom.coe_mk, RingHom.id_apply]
  exact congrFun (extension_unique (uniformContinuous_coe Œ±) uniformContinuous_id (fun _ ‚Ü¶ rfl)) x

lemma mapRingHom_comp {f : Œ± ‚Üí+* Œ≤} {g : Œ≤ ‚Üí+* Œ≥} (hf : Continuous f) (hg : Continuous g) :
    mapRingHom (g.comp f) (RingHom.coe_comp .. ‚ñ∏ Continuous.comp hg hf) =
      (mapRingHom g hg).comp (mapRingHom f hf) := by
  ext1 x
  simp only [mapRingHom, extensionHom, RingHom.coe_comp, RingHom.coe_mk, MonoidHom.coe_mk,
    OneHom.coe_mk, Function.comp_apply]
  convert congrFun (extension_unique (f := ‚áëcoeRingHom ‚àò ‚áëg ‚àò ‚áëf)
    (g := (mapRingHom g hg).comp (mapRingHom f hf)) ?_ ?_ (fun a ‚Ü¶ ?_)) x
  ¬∑ refine UniformContinuous.comp (uniformContinuous_coe _) <| UniformContinuous.comp ?_ ?_
    ¬∑ exact uniformContinuous_addMonoidHom_of_continuous hg
    ¬∑ exact uniformContinuous_addMonoidHom_of_continuous hf
  ¬∑ rw [RingHom.coe_comp]
    refine UniformContinuous.comp ?_ ?_ <;>
      simpa [mapRingHom, extensionHom] using uniformContinuous_extension
  ¬∑ simp [Function.comp_apply, RingHom.coe_comp, mapRingHom, extensionHom_coe, coeRingHom]

/-- A ring isomorphism that is also a homeomorphism between two topological rings induces
a ring isomorphism between their completions. -/
noncomputable
def mapRingEquiv (f : Œ± ‚âÉ+* Œ≤) (hf : Continuous f) (hf' : Continuous f.symm):
    Completion Œ± ‚âÉ+* Completion Œ≤ := by
  refine RingEquiv.ofRingHom (mapRingHom f.toRingHom hf) (mapRingHom f.symm.toRingHom hf')
    ?_ ?_ <;>
  { rw [‚Üê mapRingHom_comp]
    simpa [RingEquiv.toRingHom_eq_coe, RingEquiv.comp_symm] using mapRingHom_id
  }

end UniformSpace.Completion

end UniformSpace.Completion.mapRingHom
